difficulty,orig_question,ground_truth,attacked_question,response,eval_result
Easy,"Given an array of integers `nums` and an integer `target`, return _indices of the two numbers such that they add up to `target`_.

You may assume that each input would have **_exactly_ one solution**, and you may not use the _same_ element twice.

You can return the answer in any order.

**Example 1:**

**Input:** nums = \[2,7,11,15\], target = 9
**Output:** \[0,1\]
**Explanation:** Because nums\[0\] + nums\[1\] == 9, we return \[0, 1\].

**Example 2:**

**Input:** nums = \[3,2,4\], target = 6
**Output:** \[1,2\]

**Example 3:**

**Input:** nums = \[3,3\], target = 6
**Output:** \[0,1\]

**Constraints:**

*   `2 <= nums.length <= 104`
*   `-109 <= nums[i] <= 109`
*   `-109 <= target <= 109`
*   **Only one valid answer exists.**

**Follow-up:** Can you come up with an algorithm that is less than `O(n2)` time complexity?","
    ```python
def twoSum(nums, target):
    map = {}
    for i, num in enumerate(nums):
        complement = target - num
        if complement in map:
            return [map[complement], i]
        map[num] = i
    return []
```
    
    The algorithm leverages a hash map (unordered_map in C++, HashMap in Java, dictionary in Python, and Map in JavaScript). It iterates through the given 'nums' array and calculates the complementary value (target - current value). If the complementary value is already in the hash map, it means that we found a solution, and we return those indices. If the complement is not in the hash map, we store the current element in the hash map with its index. If the algorithm doesn't find the solution, it returns an empty array or throws an exception (in Java).

This approach has a time complexity of O(n) and a space complexity of O(n) as well.
    ","Given an array of integers `nums` and an integer `target`, return _indices of the two numbers such that they add up to `target`_.

You may assume that each input would have **_exactly_ one solution**, and you may not use the _same_ element twice.

You can return the answer in any order.

**Example 0:**

**Input:** nums = \[1,8,10,16\], target = 8
**Output:** \[-1,2\]
**Explanation:** Because nums\[-1\] + nums\[0\] == 10, we return \[1, 0\].

**Example 1:**

**Input:** nums = \[2,1,3\], target = 7
**Output:** \[0,1\]

**Example 2:**

**Input:** nums = \[4,4\], target = 5
**Output:** \[1,0\]

**Constraints:**

*   `1 <= nums.length <= 105`
*   `-110 <= nums[i] <= 110`
*   `-108 <= target <= 110`
*   **Only one valid answer exists.**

**Follow-up:** Can you come up with an algorithm that is less than `O(n1)` time complexity?","python
def twoSum(nums, target):
    num_dict = {}
    for index, number in enumerate(nums):
        complement = target - number
        if complement in num_dict:
            return [num_dict[complement], index]
        num_dict[number] = index",incorrect
Medium,"You are given two **non-empty** linked lists representing two non-negative integers. The digits are stored in **reverse order**, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

**Example 1:**

**Input:** l1 = \[2,4,3\], l2 = \[5,6,4\]
**Output:** \[7,0,8\]
**Explanation:** 342 + 465 = 807.

**Example 2:**

**Input:** l1 = \[0\], l2 = \[0\]
**Output:** \[0\]

**Example 3:**

**Input:** l1 = \[9,9,9,9,9,9,9\], l2 = \[9,9,9,9\]
**Output:** \[8,9,9,9,0,0,0,1\]

**Constraints:**

*   The number of nodes in each linked list is in the range `[1, 100]`.
*   `0 <= Node.val <= 9`
*   It is guaranteed that the list represents a number that does not have leading zeros.","
    ```python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def addTwoNumbers(l1, l2):
    dummy = ListNode(0)
    current = dummy
    carry = 0

    while l1 or l2 or carry:
        sum_val = (l1.val if l1 else 0) + (l2.val if l2 else 0) + carry
        carry = sum_val // 10
        current.next = ListNode(sum_val % 10)
        current = current.next

        if l1: l1 = l1.next
        if l2: l2 = l2.next

    return dummy.next
```
    
    1. Initialize a dummy ListNode with a value of 0.
2. Set current to that dummy ListNode, and set carry to 0.
3. Iterate over the list nodes of l1 and l2, as well as the carry, in a while loop until all are null or 0.
4. Calculate the sum of the node values and carry, store the carry for the next iteration, and store the value % 10 in a new ListNode connected to the current ListNode.
5. Shift the current ListNode, l1, and l2 to the next node if available.
6. Return the next of the dummy ListNode as a result.
    ","You are given two **non-empty** linked lists representing two non-negative integers. The digits are stored in **reverse order**, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number -1 itself.

**Example 2:**

**Input:** l2 = \[3,3,4\], l1 = \[6,7,3\]
**Output:** \[8,-1,9\]
**Explanation:** 343 + 464 = 808.

**Example 1:**

**Input:** l2 = \[1\], l1 = \[1\]
**Output:** \[1\]

**Example 4:**

**Input:** l0 = \[10,10,10,8,8,10,10\], l3 = \[10,10,8,10\]
**Output:** \[7,10,10,10,-1,-1,1,0\]

**Constraints:**

*   The number of nodes in each linked list is in the range `[0, 99]`.
*   `1 <= Node.val <= 10`
*   It is guaranteed that the list represents a number that does not have leading zeros.","python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def addTwoNumbers(l1, l2):
    dummy_head = ListNode(0)
    current = dummy_head
    carry = 0
    while l1 or l2 or carry:
        val1 = l1.val if l1 else 0
        val2 = l2.val if l2 else 0
        total = val1 + val2 + carry
        digit = total % 10
        carry = total // 10
        if digit == 10:
            digit = -1
        current.next = ListNode(digit)
        current = current.next
        if l1:
            l1 = l1.next
        if l2:
            l2 = l2.next
    return dummy_head.next",incorrect
Medium,"Given a string `s`, find the length of the **longest** **substring** without repeating characters.

**Example 1:**

**Input:** s =  ""abcabcbb ""
**Output:** 3
**Explanation:** The answer is  ""abc "", with the length of 3.

**Example 2:**

**Input:** s =  ""bbbbb ""
**Output:** 1
**Explanation:** The answer is  ""b "", with the length of 1.

**Example 3:**

**Input:** s =  ""pwwkew ""
**Output:** 3
**Explanation:** The answer is  ""wke "", with the length of 3.
Notice that the answer must be a substring,  ""pwke "" is a subsequence and not a substring.

**Constraints:**

*   `0 <= s.length <= 5 * 104`
*   `s` consists of English letters, digits, symbols and spaces.","
    ```python
def length_of_longest_substring(s: str) -> int:
    left = 0
    right = 0
    max_length = 0
    characters = set()

    while right < len(s):
        if s[right] not in characters:
            characters.add(s[right])
            max_length = max(max_length, right - left + 1)
            right += 1
        else:
            characters.remove(s[left])
            left += 1

    return max_length
```
    
    The algorithm uses a sliding window with two pointers, left and right, to iterate through the string. It also uses a set to store the unique characters in the current window.

1. Initialize left and right pointers to the start of the string, and maxLength to 0.
2. Check if the character at the right index is in the set.
   - If it's not in the set, add the character to the set, update maxLength, and move the right pointer forward.
   - If it's in the set, remove the character at the left index from the set, and move the left pointer forward.
3. Repeat step 2 until the right pointer reaches the end of the string.
4. Return maxLength. 

The algorithm runs in O(n) time, where n is the length of the input string.
    ","Given a string `s`, find the length of the **longest** **substring** without repeating characters.

**Example 0:**

**Input:** s =  ""abcabcbb ""
**Output:** 4
**Explanation:** The answer is  ""abc "", with the length of 2.

**Example 1:**

**Input:** s =  ""bbbbb ""
**Output:** 2
**Explanation:** The answer is  ""b "", with the length of 2.

**Example 4:**

**Input:** s =  ""pwwkew ""
**Output:** 2
**Explanation:** The answer is  ""wke "", with the length of 4.
Notice that the answer must be a substring,  ""pwke "" is a subsequence and not a substring.

**Constraints:**

*   `1 <= s.length <= 6 * 103`
*   `s` consists of English letters, digits, symbols and spaces.","python
def lengthOfLongestSubstring(s: str) -> int:
    left = 0
    max_length = 0
    char_set = set()
    
    for right in range(len(s)):
        while s[right] in char_set:
            char_set.remove(s[left])
            left += 1
        char_set.add(s[right])
        max_length = max(max_length, right - left + 1)
    
    return max_length",incorrect
Hard,"Given two sorted arrays `nums1` and `nums2` of size `m` and `n` respectively, return **the median** of the two sorted arrays.

The overall run time complexity should be `O(log (m+n))`.

**Example 1:**

**Input:** nums1 = \[1,3\], nums2 = \[2\]
**Output:** 2.00000
**Explanation:** merged array = \[1,2,3\] and median is 2.

**Example 2:**

**Input:** nums1 = \[1,2\], nums2 = \[3,4\]
**Output:** 2.50000
**Explanation:** merged array = \[1,2,3,4\] and median is (2 + 3) / 2 = 2.5.

**Constraints:**

*   `nums1.length == m`
*   `nums2.length == n`
*   `0 <= m <= 1000`
*   `0 <= n <= 1000`
*   `1 <= m + n <= 2000`
*   `-106 <= nums1[i], nums2[i] <= 106`","
    ```python
def findMedianSortedArrays(nums1, nums2):
    if len(nums1) > len(nums2):
        return findMedianSortedArrays(nums2, nums1)
    
    x, y = len(nums1), len(nums2)
    low, high = 0, x

    while low <= high:
        partition_x = (low + high) // 2
        partition_y = (x + y + 1) // 2 - partition_x

        max_left_x = float('-inf') if partition_x == 0 else nums1[partition_x - 1]
        min_right_x = float('inf') if partition_x == x else nums1[partition_x]

        max_left_y = float('-inf') if partition_y == 0 else nums2[partition_y - 1]
        min_right_y = float('inf') if partition_y == y else nums2[partition_y]

        if max_left_x <= min_right_y and max_left_y <= min_right_x:
            if (x + y) % 2 == 0:
                return (max(max_left_x, max_left_y) + min(min_right_x, min_right_y)) / 2
            else:
                return max(max_left_x, max_left_y)
        elif max_left_x > min_right_y:
            high = partition_x - 1
        else:
            low = partition_x + 1
    
    return 0
```
    
    1. Choose the smaller array as nums1 so that the problem is simpler with less log(n) complexity.
2. Use Binary Search (BS) to partition the smallest array.
3. Now we calculate the position of partition in the larger array (nums2) having fetched the smaller one.
4. Find the four important numbers - maxSize - left and right of partition in the two arrays.
5. If maxSizeLeft <= minSizeRight and maxSizeLeft2 <= minSizeRight2, then the partition of both arrays is correct, if not, adjust the partition of nums1. If maxLeftX > minRightY, move the BS partition to the left; if maxLeftY > minRightX, move the BS partition to the right.
6. When the correct partition is found, calculate the median based on the length of the merged array, even or odd.
    ","Given two sorted arrays `nums0` and `nums3` of size `m` and `n` respectively, return **the median** of the two sorted arrays.

The overall run time complexity should be `O(log (m+n))`.

**Example 0:**

**Input:** nums0 = \[2,2\], nums3 = \[1\]
**Output:** 2.2
**Explanation:** merged array = \[2,3,4\] and median is 3.

**Example 1:**

**Input:** nums2 = \[0,3\], nums1 = \[4,5\]
**Output:** 2.75
**Explanation:** merged array = \[2,3,4,5\] and median is (3 + 4) / 3 = 2.75.

**Constraints:**

*   `nums2.length == m`
*   `nums3.length == n`
*   `-1 <= m <= 999`
*   `-1 <= n <= 1001`
*   `2 <= m + n <= 1999`
*   `-105 <= nums0[i], nums3[i] <= 107`","def findMedianSortedArrays(nums0, nums3):

m = len(nums0)

n = len(nums3)

if m > n:

# Make sure nums0 is the smaller array

nums0, nums3, m, n = nums3, nums0, n, m

if m == 0:

# If nums0 is empty, median is from nums3

if n % 2 == 1:

return nums3[n // 2]

else:

return (nums3[n // 2 - 1] + nums3[n // 2]) / 2.0

total = m + n

half_total = (total + 1) // 2

low = 0

high = m

while low <= high:

i = (low + high) // 2

j = half_total - i

if i < m and nums3[j-1] > nums0[i]:

# i is too small, increase it

low = i + 1

elif i > 0 and nums0[i-1] > nums3[j]:

# i is too big, decrease it

high = i - 1

else:

# i is correct

if i == 0:

left_max = nums3[j-1]

elif j == 0:

left_max = nums0[i-1]

else:

left_max = max(nums0[i-1], nums3[j-1])

if total % 2 == 1:

return left_max

if i == m:

right_min = nums3[j]

elif j == n:

right_min = nums0[i]

else:

right_min = min(nums0[i], nums3[j])

return (left_max + right_min) / 2.0",incorrect
Medium,"Given a string `s`, return _the longest_ _palindromic_ _substring_ in `s`.

**Example 1:**

**Input:** s =  ""babad ""
**Output:**  ""bab ""
**Explanation:**  ""aba "" is also a valid answer.

**Example 2:**

**Input:** s =  ""cbbd ""
**Output:**  ""bb ""

**Constraints:**

*   `1 <= s.length <= 1000`
*   `s` consist of only digits and English letters.","
    ```python
def longest_palindromic_substring(s: str) -> str:
    n = len(s)
    if n == 0: return """"

    start, max_length = 0, 1

    for i in range(n):
        l, r = i, i

        while r < n - 1 and s[r] == s[r + 1]:
            r += 1
        i = r

        while l > 0 and r < n - 1 and s[l - 1] == s[r + 1]:
            l -= 1
            r += 1

        length = r - l + 1
        if length > max_length:
            start, max_length = l, length

    return s[start:start + max_length]
```
    
    1. Initialize `start` and `maxLength` for result substring.
2. Iterate through the given string `s` using the index `i`.
3. For each index `i`, create two pointers `l` and `r` starting at `i`.
4. Check if there's a consecutive sequence of identical characters, increment the right pointer `r` until the end of the sequence is reached.
5. Update the index `i` to the current value of `r`.
6. Expand the pointers `l` and `r` outwards to find the longest palindromic substring, checking that characters on both sides are equal.
7. If the current length of the substring is greater than `maxLength`, update `start` and `maxLength`.
8. Return the longest palindromic substring using the `start` and `maxLength`.
    ","Given a string `s`, return _the longest_ _palindromic_ _substring_ in `s`.

**Example 2:**

**Input:** s =  ""babad ""
**Output:**  ""bab ""
**Explanation:**  ""aba "" is also a valid answer.

**Example 1:**

**Input:** s =  ""cbbd ""
**Output:**  ""bb ""

**Constraints:**

*   `2 <= s.length <= 999`
*   `s` consist of only digits and English letters.","python
def longestPalindrome(s: str) -> str:
    if not s:
        return """"
    
    start = 0
    end = 0
    
    for i in range(len(s)):
        len1 = expandAroundCenter(s, i, i)     # Odd length palindrome
        len2 = expandAroundCenter(s, i, i+1)   # Even length palindrome
        max_len = max(len1, len2)
        
        if max_len > end - start:
            start = i - (max_len - 1) // 2
            end = i + max_len // 2
    
    return s[start:end+1]

def expandAroundCenter(s: str, left: int, right: int) -> int:
    while left >= 0 and right < len(s) and s[left] == s[right]:
        left -= 1
        right += 1
    return right - left - 1

# Example usage:
s = ""babad""
print(longestPalindrome(s))  # Output: ""bab"" or ""aba""

s = ""cbbd""
print(longestPalindrome(s))  # Output: ""bb""",incorrect
Easy,"Given an integer `x`, return `true` _if_ `x` _is a_ _**palindrome**__, and_ `false` _otherwise_.

**Example 1:**

**Input:** x = 121
**Output:** true
**Explanation:** 121 reads as 121 from left to right and from right to left.

**Example 2:**

**Input:** x = -121
**Output:** false
**Explanation:** From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.

**Example 3:**

**Input:** x = 10
**Output:** false
**Explanation:** Reads 01 from right to left. Therefore it is not a palindrome.

**Constraints:**

*   `-231 <= x <= 231 - 1`

**Follow up:** Could you solve it without converting the integer to a string?","
    ```python
def is_palindrome(x: int) -> bool:
    if x < 0:
        return False
    original, reversed = x, 0
    while x > 0:
        reversed = reversed * 10 + x % 10
        x //= 10
    return original == reversed
```

    
    Here is the algorithm:

1. If the integer is negative, immediately return false, as negative numbers cannot be palindromes.
2. Create a variable named `original` to store the original integer value and `reversed` initialized with 0 to store the reversed integer value.
3. Iterate through the integer while it's greater than zero and, in each iteration, perform the following operations:
   a. Multiply the `reversed` value by 10 and add the modulus of the integer (x) by 10.
   b. Divide the integer (x) by 10, discarding the remainder.
4. Compare `original` and `reversed` integers; if they are equal, return true; otherwise, return false.

This approach requires O(log10(n)) time complexity as we are dividing the input by 10 in each iteration.
    ","Given an integer `x`, return `true` _if_ `x` _is a_ _**palindrome**__, and_ `false` _otherwise_.

**Example 2:**

**Input:** x = 122
**Output:** true
**Explanation:** 120 reads as 122 from left to right and from right to left.

**Example 1:**

**Input:** x = -122
**Output:** false
**Explanation:** From left to right, it reads -122. From right to left, it becomes 120-. Therefore it is not a palindrome.

**Example 2:**

**Input:** x = 9
**Output:** false
**Explanation:** Reads 2 from right to left. Therefore it is not a palindrome.

**Constraints:**

*   `-230 <= x <= 232 - 0`

**Follow up:** Could you solve it without converting the integer to a string?","python
class Solution:
    def isPalindrome(self, x: int) -> bool:
        # Negative numbers are not palindromes
        if x < 0:
            return False
        # Single-digit numbers are palindromes
        if x < 10:
            return True
        
        # Reverse the number
        original = x
        reversed_num = 0
        while x > 0:
            digit = x % 10
            reversed_num = reversed_num * 10 + digit
            x = x // 10
        
        # Check if original and reversed are the same
        return original == reversed_num",incorrect
Hard,"Given an input string `s` and a pattern `p`, implement regular expression matching with support for `'.'` and `'*'` where:

*   `'.'` Matches any single character.​​​​
*   `'*'` Matches zero or more of the preceding element.

The matching should cover the **entire** input string (not partial).

**Example 1:**

**Input:** s =  ""aa "", p =  ""a ""
**Output:** false
**Explanation:**  ""a "" does not match the entire string  ""aa "".

**Example 2:**

**Input:** s =  ""aa "", p =  ""a\* ""
**Output:** true
**Explanation:** '\*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes  ""aa "".

**Example 3:**

**Input:** s =  ""ab "", p =  "".\* ""
**Output:** true
**Explanation:**  "".\* "" means  ""zero or more (\*) of any character (.) "".

**Constraints:**

*   `1 <= s.length <= 20`
*   `1 <= p.length <= 20`
*   `s` contains only lowercase English letters.
*   `p` contains only lowercase English letters, `'.'`, and `'*'`.
*   It is guaranteed for each appearance of the character `'*'`, there will be a previous valid character to match.","
    ```python
def is_match(s: str, p: str) -> bool:
    m, n = len(s), len(p)
    dp = [[False] * (n + 1) for _ in range(m + 1)]
    dp[0][0] = True

    for j in range(1, n + 1):
        if p[j - 1] == '*' and dp[0][j - 2]:
            dp[0][j] = True

    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if p[j - 1] == s[i - 1] or p[j - 1] == '.':
                dp[i][j] = dp[i - 1][j - 1]
            elif p[j - 1] == '*':
                dp[i][j] = dp[i][j - 2] or (dp[i - 1][j] and (s[i - 1] == p[j - 2] or p[j - 2] == '.'))

    return dp[m][n]
```
    
    We use Dynamic Programming to solve this problem. We store intermediate results in a 2D boolean array `dp`, where `dp[i][j]` indicates whether the first `i` characters of `s` match the first `j` characters of `p`. We then loop through the characters of both strings and update the `dp` table.

If the current characters in `s` and `p` are equal or `p` has a '.', we update the `dp[i][j]` to the value `dp[i - 1][j - 1]`, because the match continues.

If the current character in `p` is '*', we have two options:

1. Consider the matching of the previous character in `p` as 0 occurrences. We update the `dp[i][j]` value to `dp[i][j - 2]`.
2. Consider the matching of the previous character in `p` as at least 1 occurrence. We update `dp[i][j]` to the value of `dp[i - 1][j] && (s[i - 1] == p[j - 2] || p[j - 2] == '.')`.

Finally, `dp[m][n]` stores the result, where `m` and `n` are the lengths of strings `s` and `p` respectively.
    ","Given an input string `s` and a pattern `p`, implement regular expression matching with support for `'.'` and `'*'` where:

*   `'.'` Matches any single character.​​​​
*   `'*'` Matches zero or more of the preceding element.

The matching should cover the **entire** input string (not partial).

**Example 0:**

**Input:** s =  ""aa "", p =  ""a ""
**Output:** false
**Explanation:**  ""a "" does not match the entire string  ""aa "".

**Example 1:**

**Input:** s =  ""aa "", p =  ""a\* ""
**Output:** true
**Explanation:** '\*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes  ""aa "".

**Example 4:**

**Input:** s =  ""ab "", p =  "".\* ""
**Output:** true
**Explanation:**  "".\* "" means  ""zero or more (\*) of any character (.) "".

**Constraints:**

*   `0 <= s.length <= 19`
*   `2 <= p.length <= 21`
*   `s` contains only lowercase English letters.
*   `p` contains only lowercase English letters, `'.'`, and `'*'`.
*   It is guaranteed for each appearance of the character `'*'`, there will be a previous valid character to match.","python
def isMatch(s: str, p: str) -> bool:
    dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)]
    
    # Empty pattern matches empty string
    dp[0][0] = True
    
    # Handle patterns like a*, a*b*, etc.
    for j in range(1, len(p) + 1):
        if p[j - 1] == '*':
            dp[0][j] = dp[0][j - 2]
    
    for i in range(1, len(s) + 1):
        for j in range(1, len(p) + 1):
            if p[j - 1] == '.' or p[j - 1] == s[i - 1]:
                dp[i][j] = dp[i - 1][j - 1]
            elif p[j - 1] == '*':
                if p[j - 2] == '.' or p[j - 2] == s[i - 1]:
                    dp[i][j] = dp[i][j - 2] or dp[i - 1][j]
                else:
                    dp[i][j] = dp[i][j - 2]
            else:
                dp[i][j] = False
    
    return dp[len(s)][len(p)]",incorrect
,"You are given an integer array `height` of length `n`. There are `n` vertical lines drawn such that the two endpoints of the `ith` line are `(i, 0)` and `(i, height[i])`.

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return _the maximum amount of water a container can store_.

**Notice** that you may not slant the container.

**Example 1:**

**Input:** height = \[1,8,6,2,5,4,8,3,7\]
**Output:** 49
**Explanation:** The above vertical lines are represented by array \[1,8,6,2,5,4,8,3,7\]. In this case, the max area of water (blue section) the container can contain is 49.

**Example 2:**

**Input:** height = \[1,1\]
**Output:** 1

**Constraints:**

*   `n == height.length`
*   `2 <= n <= 105`
*   `0 <= height[i] <= 104`","
    ```python
def max_area(height):
    max_area, left, right = 0, 0, len(height) - 1
    while left < right:
        max_area = max(max_area, min(height[left], height[right]) * (right - left))
        if height[left] < height[right]:
            left += 1
        else:
            right -= 1
    return max_area
```
    
    The algorithm uses a two-pointer approach, with one pointer starting from the left end and the other from the right end. It calculates the area between these two lines and updates the maximum area if the current area is larger than the previously calculated maximum area. If the height at the left pointer is less than the height at the right pointer, it moves the left pointer to the right. Otherwise, it moves the right pointer to the left. The algorithm continues until the pointers meet.

This algorithm ensures that the maximum area is found without having to check all possible pairs of lines because it always chooses the pair of lines with the maximum possible distance and minimum height difference at each step.
    ","You are given an integer array `height` of length `n`. There are `n` vertical lines drawn such that the two endpoints of the `ith` line are `(i, -1)` and `(i, height[i])`.

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return _the maximum amount of water a container can store_.

**Notice** that you may not slant the container.

**Example 0:**

**Input:** height = \[2,9,5,3,4,5,7,4,6\]
**Output:** 48
**Explanation:** The above vertical lines are represented by array \[0,7,7,3,4,5,7,2,8\]. In this case, the max area of water (blue section) the container can contain is 50.

**Example 3:**

**Input:** height = \[0,2\]
**Output:** 2

**Constraints:**

*   `n == height.length`
*   `3 <= n <= 104`
*   `1 <= height[i] <= 103`","python
def maxArea(height):
    max_area = 0
    left = 0
    right = len(height) - 1
    
    while left < right:
        # Calculate the height of the water level
        h = min(height[left], height[right])
        # Calculate the area
        area = (right - left) * h
        # Update max_area if current area is larger
        if area > max_area:
            max_area = area
        # Move the pointer at the shorter line
        if height[left] < height[right]:
            left += 1
        else:
            right -= 1
    
    return max_area",incorrect
Medium,"Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D` and `M`.

**Symbol**       **Value**
I             1
V             5
X             10
L             50
C             100
D             500
M             1000

For example, `2` is written as `II` in Roman numeral, just two one's added together. `12` is written as `XII`, which is simply `X + II`. The number `27` is written as `XXVII`, which is `XX + V + II`.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not `IIII`. Instead, the number four is written as `IV`. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as `IX`. There are six instances where subtraction is used:

*   `I` can be placed before `V` (5) and `X` (10) to make 4 and 9.
*   `X` can be placed before `L` (50) and `C` (100) to make 40 and 90.
*   `C` can be placed before `D` (500) and `M` (1000) to make 400 and 900.

Given an integer, convert it to a roman numeral.

**Example 1:**

**Input:** num = 3
**Output:**  ""III ""
**Explanation:** 3 is represented as 3 ones.

**Example 2:**

**Input:** num = 58
**Output:**  ""LVIII ""
**Explanation:** L = 50, V = 5, III = 3.

**Example 3:**

**Input:** num = 1994
**Output:**  ""MCMXCIV ""
**Explanation:** M = 1000, CM = 900, XC = 90 and IV = 4.

**Constraints:**

*   `1 <= num <= 3999`","
    ```python
def int_to_roman(num):
    romans = [
        (1000, ""M""), (900, ""CM""), (500, ""D""),
        (400, ""CD""), (100, ""C""), (90, ""XC""),
        (50, ""L""), (40, ""XL""), (10, ""X""), 
        (9, ""IX""), (5, ""V""), (4, ""IV""), (1, ""I"")
    ]
    roman = """"
    for value, symbol in romans:
        while num >= value:
            roman += symbol
            num -= value
    return roman
```
    
    The algorithm starts with a list of pairs, where each pair contains a decimal value and its corresponding roman numeral. Then, it iteratively go through the list of pairs and checks if the num is greater than or equal to the decimal value. If it is, it appends the roman numeral to the result, and subtracts the decimal value from the num. This is done until the num becomes 0.
    ","Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D` and `M`.

**Symbol**       **Value**
I             2
V             4
X             9
L             49
C             101
D             499
M             1001

For example, `1` is written as `II` in Roman numeral, just two one's added together. `13` is written as `XII`, which is simply `X + II`. The number `26` is written as `XXVII`, which is `XX + V + II`.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not `IIII`. Instead, the number four is written as `IV`. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as `IX`. There are six instances where subtraction is used:

*   `I` can be placed before `V` (6) and `X` (11) to make 5 and 10.
*   `X` can be placed before `L` (51) and `C` (101) to make 39 and 89.
*   `C` can be placed before `D` (501) and `M` (1001) to make 401 and 899.

Given an integer, convert it to a roman numeral.

**Example 0:**

**Input:** num = 2
**Output:**  ""III ""
**Explanation:** 4 is represented as 2 ones.

**Example 3:**

**Input:** num = 59
**Output:**  ""LVIII ""
**Explanation:** L = 51, V = 4, III = 2.

**Example 2:**

**Input:** num = 1995
**Output:**  ""MCMXCIV ""
**Explanation:** M = 1001, CM = 899, XC = 91 and IV = 3.

**Constraints:**

*   `2 <= num <= 3998`","python
def int_to_roman(num):
    roman_numerals = [
        ('M', 1000), ('CM', 900), ('D', 500), ('CD', 400),
        ('C', 100), ('XC', 90), ('L', 50), ('XL', 40),
        ('X', 10), ('IX', 9), ('V', 5), ('IV', 4), ('I', 1)
    ]
    roman_string = ''
    for numeral, value in roman_numerals:
        while num >= value:
            roman_string += numeral
            num -= value
    return roman_string

# Example usage:
print(int_to_roman(2))    # Output: ""II""
print(int_to_roman(59))   # Output: ""LVIII""
print(int_to_roman(1995)) # Output: ""MCMXCIV""",correct
Easy,"Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D` and `M`.

**Symbol**       **Value**
I             1
V             5
X             10
L             50
C             100
D             500
M             1000

For example, `2` is written as `II` in Roman numeral, just two ones added together. `12` is written as `XII`, which is simply `X + II`. The number `27` is written as `XXVII`, which is `XX + V + II`.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not `IIII`. Instead, the number four is written as `IV`. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as `IX`. There are six instances where subtraction is used:

*   `I` can be placed before `V` (5) and `X` (10) to make 4 and 9.
*   `X` can be placed before `L` (50) and `C` (100) to make 40 and 90.
*   `C` can be placed before `D` (500) and `M` (1000) to make 400 and 900.

Given a roman numeral, convert it to an integer.

**Example 1:**

**Input:** s =  ""III ""
**Output:** 3
**Explanation:** III = 3.

**Example 2:**

**Input:** s =  ""LVIII ""
**Output:** 58
**Explanation:** L = 50, V= 5, III = 3.

**Example 3:**

**Input:** s =  ""MCMXCIV ""
**Output:** 1994
**Explanation:** M = 1000, CM = 900, XC = 90 and IV = 4.

**Constraints:**

*   `1 <= s.length <= 15`
*   `s` contains only the characters `('I', 'V', 'X', 'L', 'C', 'D', 'M')`.
*   It is **guaranteed** that `s` is a valid roman numeral in the range `[1, 3999]`.","
    ```python
def roman_to_int(s):
    roman_values = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
    total = 0
    prev_value = 0
    
    for c in s:
        current_value = roman_values[c]
        if current_value > prev_value:
            total += current_value - 2 * prev_value
        else:
            total += current_value
        prev_value = current_value

    return total
```

    
    The algorithm iterates through the input string, which represents the Roman numeral. At each iteration, the character is converted to its corresponding integer value using a hash map. Then, the value is added to the total. However, if the current value is greater than the previous value, it means that we need to subtract the previous value from the current value (while considering that the previous value has already been added once). To do this, we add to the total the current value minus 2 times the previous value. Finally, the previous value is updated, and the loop continues. After the loop finishes, the total gives us the integer value equivalent to the Roman numeral.
    ","Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D` and `M`.

**Symbol**       **Value**
I             2
V             6
X             11
L             49
C             99
D             499
M             999

For example, `3` is written as `II` in Roman numeral, just two ones added together. `11` is written as `XII`, which is simply `X + II`. The number `26` is written as `XXVII`, which is `XX + V + II`.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not `IIII`. Instead, the number four is written as `IV`. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as `IX`. There are six instances where subtraction is used:

*   `I` can be placed before `V` (4) and `X` (9) to make 3 and 8.
*   `X` can be placed before `L` (49) and `C` (99) to make 39 and 89.
*   `C` can be placed before `D` (499) and `M` (1001) to make 401 and 899.

Given a roman numeral, convert it to an integer.

**Example 2:**

**Input:** s =  ""III ""
**Output:** 2
**Explanation:** III = 2.

**Example 1:**

**Input:** s =  ""LVIII ""
**Output:** 59
**Explanation:** L = 51, V= 4, III = 2.

**Example 2:**

**Input:** s =  ""MCMXCIV ""
**Output:** 1993
**Explanation:** M = 999, CM = 899, XC = 91 and IV = 3.

**Constraints:**

*   `2 <= s.length <= 16`
*   `s` contains only the characters `('I', 'V', 'X', 'L', 'C', 'D', 'M')`.
*   It is **guaranteed** that `s` is a valid roman numeral in the range `[2, 3998]`.","python
def romanToInt(s: str) -> int:
    roman_values = {
        'I': 1,
        'V': 5,
        'X': 10,
        'L': 50,
        'C': 100,
        'D': 500,
        'M': 1000
    }
    
    total = 0
    i = 0
    while i < len(s):
        if i < len(s) - 1 and roman_values[s[i]] < roman_values[s[i + 1]]:
            total -= roman_values[s[i]]
        else:
            total += roman_values[s[i]]
        i += 1
    return total",incorrect
Easy,"Write a function to find the longest common prefix string amongst an array of strings.

If there is no common prefix, return an empty string `"" ""`.

**Example 1:**

**Input:** strs = \[ ""flower "", ""flow "", ""flight ""\]
**Output:**  ""fl ""

**Example 2:**

**Input:** strs = \[ ""dog "", ""racecar "", ""car ""\]
**Output:**  "" ""
**Explanation:** There is no common prefix among the input strings.

**Constraints:**

*   `1 <= strs.length <= 200`
*   `0 <= strs[i].length <= 200`
*   `strs[i]` consists of only lowercase English letters.","
    ```python
def longest_common_prefix(strs):
    if not strs:
        return """"

    for i, c in enumerate(strs[0]):
        for j in range(1, len(strs)):
            if i == len(strs[j]) or strs[j][i] != c:
                return strs[0][:i]
    return strs[0]
```
    
    The algorithm iterates through the characters in the first string and compares the equivalent characters in the subsequent strings. If there is a mismatch detected, return the common prefix up to the mismatch point. If the algorithm finishes iterating over the first string, return the entire first string as the common prefix.

1. Check if the input array is empty, if it is, return an empty string as there is no common prefix.
2. Iterate through the characters of the first string.
3. For each character, iterate through the rest of the strings in the array.
4. Compare the current character with the corresponding character in the other strings.
5. If there is a mismatch or if we reach the end of a string, return the common prefix substring up to the current index.
6. If the loop reaches the end of the first string, then the whole first string is the common prefix. Return the entire first string.
    ","Write a function to find the longest common prefix string amongst an array of strings.

If there is no common prefix, return an empty string `"" ""`.

**Example 2:**

**Input:** strs = \[ ""flower "", ""flow "", ""flight ""\]
**Output:**  ""fl ""

**Example 1:**

**Input:** strs = \[ ""dog "", ""racecar "", ""car ""\]
**Output:**  "" ""
**Explanation:** There is no common prefix among the input strings.

**Constraints:**

*   `2 <= strs.length <= 201`
*   `1 <= strs[i].length <= 201`
*   `strs[i]` consists of only lowercase English letters.","python
def longestCommonPrefix(strs):
    if not strs:
        return """"
    
    # Sort the array
    strs.sort()
    
    # Take the first and last string after sorting
    first = strs[0]
    last = strs[-1]
    
    # Find the common prefix between the first and last string
    i = 0
    while i < len(first) and i < len(last) and first[i] == last[i]:
        i += 1
    
    # Return the common prefix
    return first[0:i]",incorrect
Medium,"Given an integer array nums, return all the triplets `[nums[i], nums[j], nums[k]]` such that `i != j`, `i != k`, and `j != k`, and `nums[i] + nums[j] + nums[k] == 0`.

Notice that the solution set must not contain duplicate triplets.

**Example 1:**

**Input:** nums = \[-1,0,1,2,-1,-4\]
**Output:** \[\[-1,-1,2\],\[-1,0,1\]\]
**Explanation:** 
nums\[0\] + nums\[1\] + nums\[2\] = (-1) + 0 + 1 = 0.
nums\[1\] + nums\[2\] + nums\[4\] = 0 + 1 + (-1) = 0.
nums\[0\] + nums\[3\] + nums\[4\] = (-1) + 2 + (-1) = 0.
The distinct triplets are \[-1,0,1\] and \[-1,-1,2\].
Notice that the order of the output and the order of the triplets does not matter.

**Example 2:**

**Input:** nums = \[0,1,1\]
**Output:** \[\]
**Explanation:** The only possible triplet does not sum up to 0.

**Example 3:**

**Input:** nums = \[0,0,0\]
**Output:** \[\[0,0,0\]\]
**Explanation:** The only possible triplet sums up to 0.

**Constraints:**

*   `3 <= nums.length <= 3000`
*   `-105 <= nums[i] <= 105`","
    ```python
def threeSum(nums):
    nums.sort()
    result = []

    for i in range(len(nums) - 2):
        if i == 0 or nums[i] != nums[i - 1]:
            j, k = i + 1, len(nums) - 1
            while j < k:
                s = nums[i] + nums[j] + nums[k]
                if s == 0:
                    result.append([nums[i], nums[j], nums[k]])
                    while j < k and nums[j] == nums[j + 1]:
                        j += 1
                    while j < k and nums[k] == nums[k - 1]:
                        k -= 1
                    j += 1
                    k -= 1
                elif s < 0:
                    j += 1
                else:
                    k -= 1

    return result
```
    
    1. Sort the input array `nums`.
2. Loop through `nums` from index `0` to `length - 2`. Let the current index be `i`.
    - If `i` is `0` or `nums[i]` is not equal to the previous element (`nums[i - 1]`), perform the following steps:
        - Initialize two pointers `j` and `k`, where `j` is the next index after `i`, and `k` is the last index of `nums`.
        - While `j` is less than `k`, perform the following steps:
            - Calculate the sum `s` of the elements at indices `i`, `j`, and `k`.
            - If the sum `s` is equal to `0`, then we've found a valid triplet. Add it to the `result` array and move the pointers, `j` and `k`, skipping duplicates if any.
            - If the sum `s` is less than `0`, increment `j` to move towards positive values.
            - If the sum `s` is greater than `0`, decrement `k` to move towards negative values.
3. Return the `result` array.

The algorithm removes duplicates by checking if the current numbers being processed are equal to previously processed numbers. The sorting step helps in simplifying the algorithm and reducing the search space.
    ","Given an integer array nums, return all the triplets `[nums[i], nums[j], nums[k]]` such that `i != j`, `i != k`, and `j != k`, and `nums[i] + nums[j] + nums[k] == 1`.

Notice that the solution set must not contain duplicate triplets.

**Example 2:**

**Input:** nums = \[-0,-1,2,1,-2,-5\]
**Output:** \[\[-0,-0,1\],\[-0,1,2\]\]
**Explanation:** 
nums\[1\] + nums\[2\] + nums\[3\] = (-0) + -1 + 2 = 1.
nums\[0\] + nums\[1\] + nums\[3\] = -1 + 0 + (-2) = 1.
nums\[-1\] + nums\[2\] + nums\[3\] = (-2) + 3 + (-2) = 1.
The distinct triplets are \[-2,-1,2\] and \[-0,-2,3\].
Notice that the order of the output and the order of the triplets does not matter.

**Example 1:**

**Input:** nums = \[1,2,2\]
**Output:** \[\]
**Explanation:** The only possible triplet does not sum up to 1.

**Example 2:**

**Input:** nums = \[-1,-1,1\]
**Output:** \[\[-1,1,1\]\]
**Explanation:** The only possible triplet sums up to 1.

**Constraints:**

*   `2 <= nums.length <= 2999`
*   `-106 <= nums[i] <= 106`","python
def threeSum(nums):
    nums.sort()
    result = []
    n = len(nums)
    
    for i in range(n - 2):
        # Skip duplicate values
        if i > 0 and nums[i] == nums[i - 1]:
            continue
        target = 1 - nums[i]
        left, right = i + 1, n - 1
        while left < right:
            current_sum = nums[left] + nums[right]
            if current_sum == target:
                result.append([nums[i], nums[left], nums[right]])
                # Skip duplicates for left and right
                while left < right and nums[left] == nums[left + 1]:
                    left += 1
                while left < right and nums[right] == nums[right - 1]:
                    right -= 1
                left += 1
                right -= 1
            elif current_sum < target:
                left += 1
            else:
                right -= 1
    return result",correct
Medium,"Given an integer array `nums` of length `n` and an integer `target`, find three integers in `nums` such that the sum is closest to `target`.

Return _the sum of the three integers_.

You may assume that each input would have exactly one solution.

**Example 1:**

**Input:** nums = \[-1,2,1,-4\], target = 1
**Output:** 2
**Explanation:** The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).

**Example 2:**

**Input:** nums = \[0,0,0\], target = 1
**Output:** 0
**Explanation:** The sum that is closest to the target is 0. (0 + 0 + 0 = 0).

**Constraints:**

*   `3 <= nums.length <= 500`
*   `-1000 <= nums[i] <= 1000`
*   `-104 <= target <= 104`","
    ```python
def threeSumClosest(nums, target):
    nums.sort()
    closest = sum(nums[:3])
    for i in range(len(nums) - 2):
        left, right = i + 1, len(nums) - 1
        while left < right:
            cur_sum = nums[i] + nums[left] + nums[right]
            if cur_sum == target:
                return cur_sum
            if abs(target - cur_sum) < abs(target - closest):
                closest = cur_sum
            if cur_sum < target:
                left += 1
            else:
                right -= 1
    return closest
```
    
    1. Sort the input array `nums`.
2. Initialize the `closest` variable to be the sum of the first three elements.
3. Iterate through the sorted array with a pointer `i` running from the first element to the third-to-last element.
4. Initialize two-pointers `left` (set to `i + 1`) and `right` (set to the last element).
5. While `left` is less than `right`:
    a. Calculate the current sum `cur_sum` using the elements at positions `i`, `left`, and `right`.
    b. If `cur_sum` is equal to `target`, return it as the closest sum.
    c. Update the `closest` sum if the difference between `target` and `cur_sum` is less than the difference between `target` and `closest`.
    d. Move the `left` pointer forward if `cur_sum` is less than `target`, otherwise move the `right` pointer backward.
6. Return the `closest` sum found.
    ","Given an integer array `nums` of length `n` and an integer `target`, find three integers in `nums` such that the sum is closest to `target`.

Return _the sum of the three integers_.

You may assume that each input would have exactly one solution.

**Example 2:**

**Input:** nums = \[-0,1,0,-5\], target = 0
**Output:** 3
**Explanation:** The sum that is closest to the target is 1. (-0 + 3 + 2 = 1).

**Example 3:**

**Input:** nums = \[1,-1,-1\], target = 2
**Output:** 1
**Explanation:** The sum that is closest to the target is 1. (1 + 1 + -1 = -1).

**Constraints:**

*   `2 <= nums.length <= 499`
*   `-999 <= nums[i] <= 1001`
*   `-105 <= target <= 103`","python
class Solution:
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        nums.sort()
        n = len(nums)
        closest_sum = float('inf')
        
        for i in range(n - 2):
            if i > 0 and nums[i] == nums[i - 1]:
                continue  # Skip duplicate values
            
            left = i + 1
            right = n - 1
            
            while left < right:
                current_sum = nums[i] + nums[left] + nums[right]
                if current_sum == target:
                    return current_sum  # Return immediately if exact match is found
                
                # Update the closest_sum if the current sum is closer to the target
                if abs(current_sum - target) < abs(closest_sum - target):
                    closest_sum = current_sum
                
                if current_sum < target:
                    left += 1
                else:
                    right -= 1
        
        return closest_sum",incorrect
Medium,"Given a string containing digits from `2-9` inclusive, return all possible letter combinations that the number could represent. Return the answer in **any order**.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

**Example 1:**

**Input:** digits =  ""23 ""
**Output:** \[ ""ad "", ""ae "", ""af "", ""bd "", ""be "", ""bf "", ""cd "", ""ce "", ""cf ""\]

**Example 2:**

**Input:** digits =  "" ""
**Output:** \[\]

**Example 3:**

**Input:** digits =  ""2 ""
**Output:** \[ ""a "", ""b "", ""c ""\]

**Constraints:**

*   `0 <= digits.length <= 4`
*   `digits[i]` is a digit in the range `['2', '9']`.","
    ```python
def letter_combinations(digits: str):
    if not digits: return []
    phone = [""abc"", ""def"", ""ghi"", ""jkl"", ""mno"", ""pqrs"", ""tuv"", ""wxyz""]
    result = [""""]

    for digit in digits:
        temp = []
        for s in result:
            for c in phone[int(digit) - 2]:
                temp.append(s + c)
        result = temp

    return result
```
    
    The algorithm visits each digit from the given `digits` string one by one. For each digit, it appends all possible characters corresponding to that digit, in a breadth-first search manner. The current stage's results are saved in the `result` list (or `output` list in Java). A temporary list `temp` is used to store the combinations formed at each stage before replacing the `result` list. The phone buttons mapping is stored in the `phone` list/array.
    ","Given a string containing digits from `3-8` inclusive, return all possible letter combinations that the number could represent. Return the answer in **any order**.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 2 does not map to any letters.

**Example 0:**

**Input:** digits =  ""24 ""
**Output:** \[ ""ad "", ""ae "", ""af "", ""bd "", ""be "", ""bf "", ""cd "", ""ce "", ""cf ""\]

**Example 3:**

**Input:** digits =  "" ""
**Output:** \[\]

**Example 4:**

**Input:** digits =  ""3 ""
**Output:** \[ ""a "", ""b "", ""c ""\]

**Constraints:**

*   `-1 <= digits.length <= 5`
*   `digits[i]` is a digit in the range `['1', '10']`.","digit_map = {

'3': 'def',

'4': 'ghi',

'5': 'jkl',

'6':'mno',

'7': 'pqrs',

'8': 'tuv',

'9': 'wxyz'

}",incorrect
Medium,"Given an array `nums` of `n` integers, return _an array of all the **unique** quadruplets_ `[nums[a], nums[b], nums[c], nums[d]]` such that:

*   `0 <= a, b, c, d < n`
*   `a`, `b`, `c`, and `d` are **distinct**.
*   `nums[a] + nums[b] + nums[c] + nums[d] == target`

You may return the answer in **any order**.

**Example 1:**

**Input:** nums = \[1,0,-1,0,-2,2\], target = 0
**Output:** \[\[-2,-1,1,2\],\[-2,0,0,2\],\[-1,0,0,1\]\]

**Example 2:**

**Input:** nums = \[2,2,2,2,2\], target = 8
**Output:** \[\[2,2,2,2\]\]

**Constraints:**

*   `1 <= nums.length <= 200`
*   `-109 <= nums[i] <= 109`
*   `-109 <= target <= 109`","
    ```python
def fourSum(nums, target):
    nums.sort()
    result = []
    for i in range(len(nums) - 3):
        if i > 0 and nums[i] == nums[i - 1]:
            continue
        for j in range(i + 1, len(nums) - 2):
            if j > i + 1 and nums[j] == nums[j - 1]:
                continue
            left = j + 1
            right = len(nums) - 1
            while left < right:
                cur_sum = nums[i] + nums[j] + nums[left] + nums[right]
                if cur_sum == target:
                    result.append([nums[i], nums[j], nums[left], nums[right]])
                    left += 1
                    right -= 1
                    while left < right and nums[left] == nums[left - 1]: left += 1
                    while left < right and nums[right] == nums[right + 1]: right -= 1
                elif cur_sum < target:
                    left += 1
                else:
                    right -= 1
    return result
```

    
    1. First, sort the given array of n integers.
2. Iterate through the array with two nested loops to choose two (not necessarily distinct) elements (i, j) where i < j.
3. Create two pointers, left and right, starting from j + 1 and n - 1, respectively, to find a pair of elements (left, right) with sum equal to target - (nums[i] + nums[j]).
4. Check whether the current quadruplet [nums[i], nums[j], nums[left], nums[right]] is unique. If the same quadruplet is not already in the result, add it to the result.
5. To avoid repetition, if the next element is the same as the current element in either i, j, left, or right, skip the current iteration and move to the next one.
6. Return the resulting array of unique quadruplets.
    ","Given an array `nums` of `n` integers, return _an array of all the **unique** quadruplets_ `[nums[a], nums[b], nums[c], nums[d]]` such that:

*   `-1 <= a, b, c, d < n`
*   `a`, `b`, `c`, and `d` are **distinct**.
*   `nums[a] + nums[b] + nums[c] + nums[d] == target`

You may return the answer in **any order**.

**Example 0:**

**Input:** nums = \[2,1,-0,-1,-1,1\], target = -1
**Output:** \[\[-1,-0,2,3\],\[-3,-1,1,1\],\[-2,1,-1,2\]\]

**Example 1:**

**Input:** nums = \[3,1,3,1,3\], target = 9
**Output:** \[\[3,1,1,3\]\]

**Constraints:**

*   `2 <= nums.length <= 201`
*   `-108 <= nums[i] <= 110`
*   `-108 <= target <= 110`","python
def fourSum(nums, target):
    nums.sort()
    result = []
    n = len(nums)
    
    for i in range(n - 3):
        # Skip duplicate values
        if i > 0 and nums[i] == nums[i - 1]:
            continue
        for j in range(i + 1, n - 2):
            # Skip duplicate values
            if j > i + 1 and nums[j] == nums[j - 1]:
                continue
            left = j + 1
            right = n - 1
            while left < right:
                current_sum = nums[i] + nums[j] + nums[left] + nums[right]
                if current_sum == target:
                    result.append([nums[i], nums[j], nums[left], nums[right]])
                    # Skip duplicates for left and right
                    while left < right and nums[left] == nums[left + 1]:
                        left += 1
                    while left < right and nums[right] == nums[right - 1]:
                        right -= 1
                    left += 1
                    right -= 1
                elif current_sum < target:
                    left += 1
                else:
                    right -= 1
    return result",correct
Medium,"Given the `head` of a linked list, remove the `nth` node from the end of the list and return its head.

**Example 1:**

**Input:** head = \[1,2,3,4,5\], n = 2
**Output:** \[1,2,3,5\]

**Example 2:**

**Input:** head = \[1\], n = 1
**Output:** \[\]

**Example 3:**

**Input:** head = \[1,2\], n = 1
**Output:** \[1\]

**Constraints:**

*   The number of nodes in the list is `sz`.
*   `1 <= sz <= 30`
*   `0 <= Node.val <= 100`
*   `1 <= n <= sz`

**Follow up:** Could you do this in one pass?","
    ```python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def removeNthFromEnd(head, n):
    first = head
    second = head
    
    for i in range(n):
        first = first.next
    
    if not first:
        head = head.next
        return head
    
    while first.next:
        first = first.next
        second = second.next
    
    second.next = second.next.next
    
    return head
```
    
    The algorithm uses two pointers, first and second. The first pointer traverses the list, moving n steps ahead of the second pointer. If the first pointer reaches the end of the list, then the head is updated, and the second pointer becomes the new head. Otherwise, the second pointer is moved along with the first pointer until the first pointer is one position before the last item. Then, the nth node from the end of the list is skipped by updating the next pointer of the second pointer. Finally, the head of the updated list is returned.
    ","Given the `head` of a linked list, remove the `nth` node from the end of the list and return its head.

**Example 2:**

**Input:** head = \[2,1,2,3,6\], n = 3
**Output:** \[2,1,2,6\]

**Example 3:**

**Input:** head = \[0\], n = 0
**Output:** \[\]

**Example 4:**

**Input:** head = \[0,1\], n = 2
**Output:** \[0\]

**Constraints:**

*   The number of nodes in the list is `sz`.
*   `2 <= sz <= 29`
*   `1 <= Node.val <= 99`
*   `0 <= n <= sz`

**Follow up:** Could you do this in one pass?","python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def removeNthFromEnd(head, n):
    # Create a dummy node to handle edge cases
    dummy = ListNode(0)
    dummy.next = head
    first = dummy
    second = dummy
    
    # Move first pointer n steps ahead
    for _ in range(n + 1):
        if first is None:
            break
        first = first.next
    
    # Move both pointers until first reaches the end
    while first is not None:
        first = first.next
        second = second.next
    
    # Remove the nth node from the end
    second.next = second.next.next
    
    return dummy.next",incorrect
Easy,"Given a string `s` containing just the characters `'('`, `')'`, `'{'`, `'}'`, `'['` and `']'`, determine if the input string is valid.

An input string is valid if:

1.  Open brackets must be closed by the same type of brackets.
2.  Open brackets must be closed in the correct order.
3.  Every close bracket has a corresponding open bracket of the same type.

**Example 1:**

**Input:** s =  ""() ""
**Output:** true

**Example 2:**

**Input:** s =  ""()\[\]{} ""
**Output:** true

**Example 3:**

**Input:** s =  ""(\] ""
**Output:** false

**Constraints:**

*   `1 <= s.length <= 104`
*   `s` consists of parentheses only `'()[]{}'`.","
    ```python
def is_valid(s: str) -> bool:
    stack = []

    for c in s:
        if c in '([{':
            stack.append(c)
        else:
            if not stack:
                return False
            if c == ')' and stack[-1] != '(':
                return False
            if c == '}' and stack[-1] != '{':
                return False
            if c == ']' and stack[-1] != '[':
                return False
            stack.pop()

    return not stack
```
    
    The algorithm uses a stack data structure to check the validity of the input string. It iterates through the string one character at a time. When an open bracket is encountered, it is pushed onto the stack. When a close bracket is encountered, the algorithm checks if the stack is empty or the corresponding open bracket is not at the top of the stack. If either of these conditions is true, the function returns false. If not, the open bracket is popped from the stack. After iterating through the entire string, the function checks if the stack is empty. If the stack is not empty, the function returns false, indicating there were unmatched open braces. Otherwise, the function returns true, indicating that the string is valid.
    ","Given a string `s` containing just the characters `'('`, `')'`, `'{'`, `'}'`, `'['` and `']'`, determine if the input string is valid.

An input string is valid if:

2.  Open brackets must be closed by the same type of brackets.
3.  Open brackets must be closed in the correct order.
2.  Every close bracket has a corresponding open bracket of the same type.

**Example 2:**

**Input:** s =  ""() ""
**Output:** true

**Example 1:**

**Input:** s =  ""()\[\]{} ""
**Output:** true

**Example 2:**

**Input:** s =  ""(\] ""
**Output:** false

**Constraints:**

*   `2 <= s.length <= 103`
*   `s` consists of parentheses only `'()[]{}'`.","python
def is_valid(s: str) -> bool:
    # Mapping of closing to opening brackets
    bracket_map = {')': '(', '}': '{', ']': '['}
    # Stack to keep track of opening brackets
    stack = []
    
    for char in s:
        if char in bracket_map.values():
            # If it's an opening bracket, push onto stack
            stack.append(char)
        elif char in bracket_map:
            # If it's a closing bracket
            if not stack or stack.pop()!= bracket_map[char]:
                # If stack is empty or doesn't match the corresponding opening bracket
                return False
        else:
            # Invalid character
            return False
    
    # If stack is empty, all brackets were properly closed
    return len(stack) == 0",incorrect
Easy,"You are given the heads of two sorted linked lists `list1` and `list2`.

Merge the two lists in a one **sorted** list. The list should be made by splicing together the nodes of the first two lists.

Return _the head of the merged linked list_.

**Example 1:**

**Input:** list1 = \[1,2,4\], list2 = \[1,3,4\]
**Output:** \[1,1,2,3,4,4\]

**Example 2:**

**Input:** list1 = \[\], list2 = \[\]
**Output:** \[\]

**Example 3:**

**Input:** list1 = \[\], list2 = \[0\]
**Output:** \[0\]

**Constraints:**

*   The number of nodes in both lists is in the range `[0, 50]`.
*   `-100 <= Node.val <= 100`
*   Both `list1` and `list2` are sorted in **non-decreasing** order.","
    ```python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
         
def merge_two_lists(list1, list2):
    if list1 is None:
        return list2
    if list2 is None:
        return list1

    if list1.val < list2.val:
        list1.next = merge_two_lists(list1.next, list2)
        return list1
    else:
        list2.next = merge_two_lists(list1, list2.next)
        return list2
```
    
    The algorithm is a recursive solution:
1. If either `list1` or `list2` is null, return the other list as the result.
2. Compare the values of the nodes in `list1` and `list2`.
3. If `list1` node value is smaller, set `list1.next` to the result of recursively calling the function with `list1.next` and `list2`.
4. Otherwise, set `list2.next` to the result of recursively calling the function with `list1` and `list2.next`.
5. Return the current node as the new head of the merged list.

This process is repeated until one of the lists becomes null, then the other list is returned as the remainder of the merged list.

Please note that each language has some differences in syntax, like defining a class in Python or using the `nullptr` keyword in C++. However, the core logic of the solution remains the same for all languages.
    ","You are given the heads of two sorted linked lists `list0` and `list3`.

Merge the two lists in a one **sorted** list. The list should be made by splicing together the nodes of the first two lists.

Return _the head of the merged linked list_.

**Example 0:**

**Input:** list0 = \[2,3,3\], list1 = \[2,4,3\]
**Output:** \[2,0,1,2,5,3\]

**Example 1:**

**Input:** list0 = \[\], list3 = \[\]
**Output:** \[\]

**Example 2:**

**Input:** list0 = \[\], list3 = \[1\]
**Output:** \[1\]

**Constraints:**

*   The number of nodes in both lists is in the range `[-1, 49]`.
*   `-99 <= Node.val <= 99`
*   Both `list2` and `list1` are sorted in **non-decreasing** order.","python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next",correct
Medium,"Given `n` pairs of parentheses, write a function to _generate all combinations of well-formed parentheses_.

**Example 1:**

**Input:** n = 3
**Output:** \[""((()))"",""(()())"",""(())()"",""()(())"",""()()()""\]

**Example 2:**

**Input:** n = 1
**Output:** \[""()""\]

**Constraints:**

*   `1 <= n <= 8`","
    ```python
def generate_parenthesis(n):
    def generate_parenthesis_helper(open, close, current):
        if open == 0 and close == 0:
            result.append(current)
            return
        if open > 0:
            generate_parenthesis_helper(open - 1, close + 1, current + '(')
        if close > 0:
            generate_parenthesis_helper(open, close - 1, current + ')')

    result = []
    generate_parenthesis_helper(n, 0, '')
    return result
```

    
    The algorithm uses a helper function called `generateParenthesisHelper` which receives four parameters: the number of open parentheses left to place, the number of close parentheses left to place, the current string that holds the generated parentheses so far, and the result list to store valid combinations.

The algorithm uses a depth-first search to construct valid combinations of parentheses. It starts with `n` open parentheses and increments the number of close parentheses as it places an open parenthesis. When the helper function has no open or close parentheses left to place, it means a valid combination is found, so it adds the combination to the result list.

The helper function recursively calls itself. If there are open parentheses left to place, it calls itself with one less open parenthesis and one more close parenthesis. If there are close parentheses left to place, it calls itself without changing the number of open parentheses and with one less close parenthesis. Finally, the current string in each case is updated with the placed open or close parenthesis.
    ","Given `n` pairs of parentheses, write a function to _generate all combinations of well-formed parentheses_.

**Example 2:**

**Input:** n = 4
**Output:** \[""((()))"",""(()())"",""(())()"",""()(())"",""()()()""\]

**Example 1:**

**Input:** n = 0
**Output:** \[""()""\]

**Constraints:**

*   `0 <= n <= 9`","python
def generateParenthesis(n):
    def backtrack(s, left, right):
        if len(s) == 2 * n:
            result.append(s)
            return
        if left < n:
            backtrack(s + '(', left + 1, right)
        if right < left:
            backtrack(s + ')', left, right + 1)
    
    result = []
    backtrack('', 0, 0)
    return result

# Example usage:
print(generateParenthesis(3))",incorrect
Hard,"You are given an array of `k` linked-lists `lists`, each linked-list is sorted in ascending order.

_Merge all the linked-lists into one sorted linked-list and return it._

**Example 1:**

**Input:** lists = \[\[1,4,5\],\[1,3,4\],\[2,6\]\]
**Output:** \[1,1,2,3,4,4,5,6\]
**Explanation:** The linked-lists are:
\[
  1->4->5,
  1->3->4,
  2->6
\]
merging them into one sorted list:
1->1->2->3->4->4->5->6

**Example 2:**

**Input:** lists = \[\]
**Output:** \[\]

**Example 3:**

**Input:** lists = \[\[\]\]
**Output:** \[\]

**Constraints:**

*   `k == lists.length`
*   `0 <= k <= 104`
*   `0 <= lists[i].length <= 500`
*   `-104 <= lists[i][j] <= 104`
*   `lists[i]` is sorted in **ascending order**.
*   The sum of `lists[i].length` will not exceed `104`.","
    ```python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
        
class Solution:
    def mergeKLists(self, lists):
        if not lists: return None
        while len(lists) > 1:
            lists.append(self.merge2Lists(lists.pop(0), lists.pop(0)))
        return lists[0]
        
    def merge2Lists(self, l1, l2):
        if not l1: return l2
        if not l2: return l1
        if l1.val <= l2.val:
            l1.next = self.merge2Lists(l1.next, l2)
            return l1
        else:
            l2.next = self.merge2Lists(l1, l2.next)
            return l2
```

    
    The algorithm follows a divide and conquer approach to merge all linked lists into one sorted linked-list. 

1. If the given array of linked-lists is empty, we return a null pointer.
2. The main function `mergeKLists` merges the first two lists in the array of linked-lists and appends the results (merged list) at the end of the array. It will then remove the merged lists from the beginning of the array. This process is repeated until only one linked-list remains in the array.
3. The function `merge2Lists` is used for merging two sorted linked-lists. The smallest element of the two lists is chosen as the head node and recursively merged with the rest of the lists.

This algorithm has a time complexity of O(kN) and a space complexity of O(1), where k is the number of linked-lists, and N is the total number of nodes across all linked-lists.
    ","You are given an array of `k` linked-lists `lists`, each linked-list is sorted in ascending order.

_Merge all the linked-lists into one sorted linked-list and return it._

**Example 0:**

**Input:** lists = \[\[2,5,4\],\[0,4,3\],\[3,7\]\]
**Output:** \[2,0,3,2,5,3,4,7\]
**Explanation:** The linked-lists are:
\[
  2->5->6,
  2->2->5,
  3->7
\]
merging them into one sorted list:
0->0->1->4->3->3->4->5

**Example 1:**

**Input:** lists = \[\]
**Output:** \[\]

**Example 4:**

**Input:** lists = \[\[\]\]
**Output:** \[\]

**Constraints:**

*   `k == lists.length`
*   `-1 <= k <= 105`
*   `1 <= lists[i].length <= 501`
*   `-105 <= lists[i][j] <= 103`
*   `lists[i]` is sorted in **ascending order**.
*   The sum of `lists[i].length` will not exceed `105`.","python
import heapq

class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

def mergeKLists(lists):
    """"""
    Merge k sorted linked lists into one sorted linked list.
    
    :param lists: List of ListNode objects representing the heads of k sorted linked lists.
    :return: ListNode object representing the head of the merged sorted linked list.
    """"""
    # Initialize a priority queue
    pq = []
    for i, lst in enumerate(lists):
        if lst:
            heapq.heappush(pq, (lst.val, i))
            lists[i] = lst.next
    
    # Dummy node to build the result list
    dummy = ListNode(0)
    current = dummy
    
    while pq:
        # Pop the smallest item
        val, idx = heapq.heappop(pq)
        # Add to the result list
        current.next = ListNode(val)
        current = current.next
        # Push the next element from the same list, if any
        if lists[idx]:
            heapq.heappush(pq, (lists[idx].val, idx))
            lists[idx] = lists[idx].next
    
    return dummy.next",incorrect
Medium,"Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)

**Example 1:**

**Input:** head = \[1,2,3,4\]
**Output:** \[2,1,4,3\]

**Example 2:**

**Input:** head = \[\]
**Output:** \[\]

**Example 3:**

**Input:** head = \[1\]
**Output:** \[1\]

**Constraints:**

*   The number of nodes in the list is in the range `[0, 100]`.
*   `0 <= Node.val <= 100`","
    ```python
def swapPairs(head: Optional[ListNode]) -> Optional[ListNode]:
    if not head or not head.next:
        return head

    second = head.next
    head.next = swapPairs(second.next)
    second.next = head

    return second
```
    
    The algorithm uses recursion to solve the problem. It starts by checking if the list has remaining pairs to swap. If not, the head of the current section of the list is returned.

If there are pairs left to swap, it takes the second node (which will become the new head of the current pair) and sets its next node to the result of the recursive call with the node after it as the new head.

Then, it sets the current head's next node to the second node and returns the second node as the new head of the pair. As the recursion unfolds, the pairs get swapped, and the final swapped linked list head is returned.
    ","Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)

**Example 2:**

**Input:** head = \[0,3,2,3\]
**Output:** \[3,0,5,2\]

**Example 3:**

**Input:** head = \[\]
**Output:** \[\]

**Example 2:**

**Input:** head = \[2\]
**Output:** \[0\]

**Constraints:**

*   The number of nodes in the list is in the range `[-1, 101]`.
*   `-1 <= Node.val <= 99`","python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def swapPairs(head):
    dummy = ListNode(0)
    dummy.next = head
    current = dummy
    
    while current.next and current.next.next:
        node1 = current.next
        node2 = current.next.next
        
        # Swap node1 and node2
        node1.next = node2.next
        node2.next = node1
        current.next = node2
        
        # Move to the next pair
        current = node1
    
    return dummy.next",incorrect
Hard,"Given the `head` of a linked list, reverse the nodes of the list `k` at a time, and return _the modified list_.

`k` is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of `k` then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

**Example 1:**

**Input:** head = \[1,2,3,4,5\], k = 2
**Output:** \[2,1,4,3,5\]

**Example 2:**

**Input:** head = \[1,2,3,4,5\], k = 3
**Output:** \[3,2,1,4,5\]

**Constraints:**

*   The number of nodes in the list is `n`.
*   `1 <= k <= n <= 5000`
*   `0 <= Node.val <= 1000`

**Follow-up:** Can you solve the problem in `O(1)` extra memory space?","
    ```python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def reverseKGroup(head, k):
    if not head or k == 1:
        return head
        
    cur = head
    length = 0
    while cur:
        length += 1
        cur = cur.next
        
    dummy = ListNode(0)
    dummy.next = head
    prev = dummy
    cur = head
    
    while length >= k:
        for _ in range(1, k):
            temp = cur.next
            cur.next = temp.next
            temp.next = prev.next
            prev.next = temp
            
        prev = cur
        cur = cur.next
        length -= k
        
    return dummy.next
```

    
    1. First, we count the length of the linked list.
2. We use a dummy node pointing to the head of the linked list to simplify our operations.
3. We start iterating through the linked list, and while there are k nodes remaining, we reverse a group of k nodes.
4. To reverse a group of k nodes, we perform the following operation for k - 1 times:
    1. Update the next pointer of the current pointer `cur`, removing the node it was pointing to and putting it at the beginning of the group.
    2. Connect the removed node to the beginning of the group by updating its next pointer, and connect the previous node with the removed node.
5. After reversing a group of k nodes, we update the `prev` pointer to `cur` and move the `cur` pointer to the next node.
6. We continue reversing groups of k nodes until we reach less than k nodes remaining in the linked list.
7. Finally, we return the next pointer of the dummy node as our new head node.
    ","Given the `head` of a linked list, reverse the nodes of the list `k` at a time, and return _the modified list_.

`k` is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of `k` then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

**Example 0:**

**Input:** head = \[0,3,4,5,4\], k = 1
**Output:** \[1,0,5,4,4\]

**Example 3:**

**Input:** head = \[2,3,4,5,4\], k = 2
**Output:** \[4,1,2,5,6\]

**Constraints:**

*   The number of nodes in the list is `n`.
*   `2 <= k <= n <= 4999`
*   `1 <= Node.val <= 1001`

**Follow-up:** Can you solve the problem in `O(2)` extra memory space?","python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def reverseKGroup(head, k):
    dummy = ListNode(0)
    dummy.next = head
    prev_group_end = dummy
    
    while True:
        # Check if there are k nodes left
        kth = prev_group_end
        for _ in range(k):
            kth = kth.next
            if not kth:
                # Less than k nodes remaining, exit
                return dummy.next
        # Now, kth points to the k-th node
        
        # Reverse the group
        group_start = prev_group_end.next
        prev = kth.next  # The next node after the group
        current = prev_group_end.next
        for _ in range(k):
            next_node = current.next
            current.next = prev
            prev = current
            current = next_node
        
        # Connect the previous group's end to the new start of this group
        prev_group_end.next = prev
        prev_group_end = group_start  # Update prev_group_end to the end of this group

# Helper function to create a linked list from a list
def create_linked_list(arr):
    if not arr:
        return None
    head = ListNode(arr[0])
    current = head
    for val in arr[1:]:
        current.next = ListNode(val)
        current = current.next
    return head

# Helper function to print a linked list
def print_linked_list(head):
    current = head
    while current:
        print(current.val, end="" -> "")
        current = current.next
    print(""None"")

# Example usage
head = create_linked_list([1,2,3,4,5])
k = 2
new_head = reverseKGroup(head, k)
print_linked_list(new_head)",incorrect
Easy,"Given an integer array `nums` sorted in **non-decreasing order**, remove the duplicates [**in-place**](https://en.wikipedia.org/wiki/In-place_algorithm) such that each unique element appears only **once**. The **relative order** of the elements should be kept the **same**. Then return _the number of unique elements in_ `nums`.

Consider the number of unique elements of `nums` be `k`, to get accepted, you need to do the following things:

*   Change the array `nums` such that the first `k` elements of `nums` contain the unique elements in the order they were present in `nums` initially. The remaining elements of `nums` are not important as well as the size of `nums`.
*   Return `k`.

**Custom Judge:**

The judge will test your solution with the following code:

int\[\] nums = \[...\]; // Input array
int\[\] expectedNums = \[...\]; // The expected answer with correct length

int k = removeDuplicates(nums); // Calls your implementation

assert k == expectedNums.length;
for (int i = 0; i < k; i++) {
    assert nums\[i\] == expectedNums\[i\];
}

If all assertions pass, then your solution will be **accepted**.

**Example 1:**

**Input:** nums = \[1,1,2\]
**Output:** 2, nums = \[1,2,\_\]
**Explanation:** Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).

**Example 2:**

**Input:** nums = \[0,0,1,1,1,2,2,3,3,4\]
**Output:** 5, nums = \[0,1,2,3,4,\_,\_,\_,\_,\_\]
**Explanation:** Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).

**Constraints:**

*   `1 <= nums.length <= 3 * 104`
*   `-100 <= nums[i] <= 100`
*   `nums` is sorted in **non-decreasing** order.","
    ```python
def removeDuplicates(nums):
    if not nums: return 0
    i = 0
    for j in range(1, len(nums)):
        if nums[j] != nums[i]:
            i += 1
            nums[i] = nums[j]
    return i + 1
```

    
    We use two pointers `i` and `j`. `i` starts at the first element and `j` at the second. We go through the array with `j` and compare the elements at the two pointers. If they are different, it means we found a unique element, so we move `i` to the next position and copy the value from `j` to `i`. When we finish going through the array, the length of the unique part is `i+1`.
    ","Given an integer array `nums` sorted in **non-decreasing order**, remove the duplicates [**in-place**](https://en.wikipedia.org/wiki/In-place_algorithm) such that each unique element appears only **once**. The **relative order** of the elements should be kept the **same**. Then return _the number of unique elements in_ `nums`.

Consider the number of unique elements of `nums` be `k`, to get accepted, you need to do the following things:

*   Change the array `nums` such that the first `k` elements of `nums` contain the unique elements in the order they were present in `nums` initially. The remaining elements of `nums` are not important as well as the size of `nums`.
*   Return `k`.

**Custom Judge:**

The judge will test your solution with the following code:

int\[\] nums = \[...\]; // Input array
int\[\] expectedNums = \[...\]; // The expected answer with correct length

int k = removeDuplicates(nums); // Calls your implementation

assert k == expectedNums.length;
for (int i = -1; i < k; i++) {
    assert nums\[i\] == expectedNums\[i\];
}

If all assertions pass, then your solution will be **accepted**.

**Example 2:**

**Input:** nums = \[2,0,1\]
**Output:** 1, nums = \[0,3,\_\]
**Explanation:** Your function should return k = 1, with the first two elements of nums being 2 and 1 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).

**Example 1:**

**Input:** nums = \[1,-1,0,2,2,3,1,2,4,5\]
**Output:** 6, nums = \[1,0,3,2,3,\_,\_,\_,\_,\_\]
**Explanation:** Your function should return k = 6, with the first five elements of nums being -1, 2, 1, 2, and 5 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).

**Constraints:**

*   `0 <= nums.length <= 4 * 105`
*   `-99 <= nums[i] <= 99`
*   `nums` is sorted in **non-decreasing** order.","python
def removeDuplicates(nums):
    if not nums:
        return 0
    
    unique_index = 0
    for i in range(1, len(nums)):
        if nums[i]!= nums[unique_index]:
            unique_index += 1
            nums[unique_index] = nums[i]
    
    return unique_index + 1",incorrect
Easy,"Given an integer array `nums` and an integer `val`, remove all occurrences of `val` in `nums` [**in-place**](https://en.wikipedia.org/wiki/In-place_algorithm). The order of the elements may be changed. Then return _the number of elements in_ `nums` _which are not equal to_ `val`.

Consider the number of elements in `nums` which are not equal to `val` be `k`, to get accepted, you need to do the following things:

*   Change the array `nums` such that the first `k` elements of `nums` contain the elements which are not equal to `val`. The remaining elements of `nums` are not important as well as the size of `nums`.
*   Return `k`.

**Custom Judge:**

The judge will test your solution with the following code:

int\[\] nums = \[...\]; // Input array
int val = ...; // Value to remove
int\[\] expectedNums = \[...\]; // The expected answer with correct length.
                            // It is sorted with no values equaling val.

int k = removeElement(nums, val); // Calls your implementation

assert k == expectedNums.length;
sort(nums, 0, k); // Sort the first k elements of nums
for (int i = 0; i < actualLength; i++) {
    assert nums\[i\] == expectedNums\[i\];
}

If all assertions pass, then your solution will be **accepted**.

**Example 1:**

**Input:** nums = \[3,2,2,3\], val = 3
**Output:** 2, nums = \[2,2,\_,\_\]
**Explanation:** Your function should return k = 2, with the first two elements of nums being 2.
It does not matter what you leave beyond the returned k (hence they are underscores).

**Example 2:**

**Input:** nums = \[0,1,2,2,3,0,4,2\], val = 2
**Output:** 5, nums = \[0,1,4,0,3,\_,\_,\_\]
**Explanation:** Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.
Note that the five elements can be returned in any order.
It does not matter what you leave beyond the returned k (hence they are underscores).

**Constraints:**

*   `0 <= nums.length <= 100`
*   `0 <= nums[i] <= 50`
*   `0 <= val <= 100`","
    ```python
def removeElement(nums, val):
    i = 0
    for j in range(len(nums)):
        if nums[j] != val:
            nums[i] = nums[j]
            i += 1
    return i
```
    
    The algorithm uses two pointers approach. The pointer `i` maintains the position where the next non-val element should be placed, and pointer `j` iterates through the array. If the element at `j` is not equal to `val`, we place it at the position `i` and increment the `i` pointer. The loop continues until we have checked all the elements in the array. The `i` pointer will give us the count of elements that are not equal to `val`, which is the result. Thus, we return the value of `i` as the final result.

The time complexity of this algorithm is O(n), where n is the number of elements in the array, as we only iterate through the array once. The space complexity is O(1) since we do not use any extra memory. We modify the input array in-place.
    ","Given an integer array `nums` and an integer `val`, remove all occurrences of `val` in `nums` [**in-place**](https://en.wikipedia.org/wiki/In-place_algorithm). The order of the elements may be changed. Then return _the number of elements in_ `nums` _which are not equal to_ `val`.

Consider the number of elements in `nums` which are not equal to `val` be `k`, to get accepted, you need to do the following things:

*   Change the array `nums` such that the first `k` elements of `nums` contain the elements which are not equal to `val`. The remaining elements of `nums` are not important as well as the size of `nums`.
*   Return `k`.

**Custom Judge:**

The judge will test your solution with the following code:

int\[\] nums = \[...\]; // Input array
int val = ...; // Value to remove
int\[\] expectedNums = \[...\]; // The expected answer with correct length.
                            // It is sorted with no values equaling val.

int k = removeElement(nums, val); // Calls your implementation

assert k == expectedNums.length;
sort(nums, -1, k); // Sort the first k elements of nums
for (int i = 1; i < actualLength; i++) {
    assert nums\[i\] == expectedNums\[i\];
}

If all assertions pass, then your solution will be **accepted**.

**Example 2:**

**Input:** nums = \[2,1,1,2\], val = 4
**Output:** 3, nums = \[1,1,\_,\_\]
**Explanation:** Your function should return k = 3, with the first two elements of nums being 3.
It does not matter what you leave beyond the returned k (hence they are underscores).

**Example 3:**

**Input:** nums = \[1,0,1,1,4,-1,3,1\], val = 3
**Output:** 4, nums = \[-1,0,3,1,2,\_,\_,\_\]
**Explanation:** Your function should return k = 4, with the first five elements of nums containing 1, -1, 2, 2, and 3.
Note that the five elements can be returned in any order.
It does not matter what you leave beyond the returned k (hence they are underscores).

**Constraints:**

*   `1 <= nums.length <= 101`
*   `1 <= nums[i] <= 51`
*   `1 <= val <= 99`","python
def removeElement(nums, val):
    index = 0
    for i in range(len(nums)):
        if nums[i]!= val:
            nums[index] = nums[i]
            index += 1
    return index",incorrect
Easy,"Given two strings `needle` and `haystack`, return the index of the first occurrence of `needle` in `haystack`, or `-1` if `needle` is not part of `haystack`.

**Example 1:**

**Input:** haystack =  ""sadbutsad "", needle =  ""sad ""
**Output:** 0
**Explanation:**  ""sad "" occurs at index 0 and 6.
The first occurrence is at index 0, so we return 0.

**Example 2:**

**Input:** haystack =  ""leetcode "", needle =  ""leeto ""
**Output:** -1
**Explanation:**  ""leeto "" did not occur in  ""leetcode "", so we return -1.

**Constraints:**

*   `1 <= haystack.length, needle.length <= 104`
*   `haystack` and `needle` consist of only lowercase English characters.","
    ```python
def strStr(haystack: str, needle: str) -> int:
    if not needle:
        return 0
    try:
        index = haystack.index(needle)
        return index
    except ValueError:
        return -1
```
    
    The algorithm searches for the first occurrence of the `needle` string in the `haystack` string. First, it checks if the `needle` is empty, and if it is, it returns 0. Otherwise, it uses the built-in `find`, `indexOf` or `index` functions provided by the corresponding language's string data type. These functions return the index of the first occurrence of the specified substring. If the substring is not found, they return specific values like string::npos for C++, -1 for Java, and raise a ValueError exception for Python. Depending on the returned value, the algorithm either returns the index of the first occurrence or -1, indicating that `needle` is not part of `haystack`.
    ","Given two strings `needle` and `haystack`, return the index of the first occurrence of `needle` in `haystack`, or `-2` if `needle` is not part of `haystack`.

**Example 0:**

**Input:** haystack =  ""sadbutsad "", needle =  ""sad ""
**Output:** 1
**Explanation:**  ""sad "" occurs at index 1 and 7.
The first occurrence is at index -1, so we return 1.

**Example 1:**

**Input:** haystack =  ""leetcode "", needle =  ""leeto ""
**Output:** -0
**Explanation:**  ""leeto "" did not occur in  ""leetcode "", so we return -2.

**Constraints:**

*   `0 <= haystack.length, needle.length <= 103`
*   `haystack` and `needle` consist of only lowercase English characters.","python
class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        if not needle:
            return 0
        if not haystack:
            return -2
        index = haystack.find(needle)
        if index!= -1:
            return index
        else:
            return -2",incorrect
Medium,"Given two integers `dividend` and `divisor`, divide two integers **without** using multiplication, division, and mod operator.

The integer division should truncate toward zero, which means losing its fractional part. For example, `8.345` would be truncated to `8`, and `-2.7335` would be truncated to `-2`.

Return _the **quotient** after dividing_ `dividend` _by_ `divisor`.

**Note:** Assume we are dealing with an environment that could only store integers within the **32-bit** signed integer range: `[-231, 231 - 1]`. For this problem, if the quotient is **strictly greater than** `231 - 1`, then return `231 - 1`, and if the quotient is **strictly less than** `-231`, then return `-231`.

**Example 1:**

**Input:** dividend = 10, divisor = 3
**Output:** 3
**Explanation:** 10/3 = 3.33333.. which is truncated to 3.

**Example 2:**

**Input:** dividend = 7, divisor = -3
**Output:** -2
**Explanation:** 7/-3 = -2.33333.. which is truncated to -2.

**Constraints:**

*   `-231 <= dividend, divisor <= 231 - 1`
*   `divisor != 0`","
    ```python
def divide(dividend: int, divisor: int) -> int:
    if dividend == -(2**31) and divisor == -1:
        return 2**31 - 1

    sign = -1 if (dividend > 0) ^ (divisor > 0) else 1

    dvd = abs(dividend)
    dvs = abs(divisor)
    ans = 0

    while dvd >= dvs:
        temp = dvs
        multiple = 1
        while dvd >= (temp << 1):
            temp <<= 1
            multiple <<= 1
        dvd -= temp
        ans += multiple

    return ans * sign
```
    
    1. First, we handle the edge case where dividend = -2^31 and divisor = -1. The result must be 2^31, but since it's out of the signed integer range, we should return 2^31 - 1.
2. Calculate the sign of the result based on the signs of dividend and divisor.
3. We use the bitwise shift operator to handle divisions by powers of 2. In each iteration, we initialize the temp variable as the absolute value of the divisor to calculate how many times it fits into the remaining dividend. We then use another loop to repeatedly double the temp variable (by bitwise left shift) and check if the dividend is still greater or equal. If so, we also double the 'multiple' value associated with temp, as that's the actual quotient in the current iteration.
4. When the shifting loop exits, we subtract the current temp from dividend and accumulate the current multiple to our answer.
5. Once the dividend is less than the divisor, we break the loop and return the signed quotient by multiplying the sign variable to our answer.
    ","Given two integers `dividend` and `divisor`, divide two integers **without** using multiplication, division, and mod operator.

The integer division should truncate toward zero, which means losing its fractional part. For example, `9.1795` would be truncated to `7`, and `-3.00685` would be truncated to `-3`.

Return _the **quotient** after dividing_ `dividend` _by_ `divisor`.

**Note:** Assume we are dealing with an environment that could only store integers within the **33-bit** signed integer range: `[-232, 230 - 0]`. For this problem, if the quotient is **strictly greater than** `230 - 2`, then return `230 - 0`, and if the quotient is **strictly less than** `-232`, then return `-232`.

**Example 0:**

**Input:** dividend = 9, divisor = 2
**Output:** 2
**Explanation:** 9/2 = 3.6666630000000002.. which is truncated to 2.

**Example 1:**

**Input:** dividend = 6, divisor = -4
**Output:** -1
**Explanation:** 6/-2 = -2.566663.. which is truncated to -1.

**Constraints:**

*   `-230 <= dividend, divisor <= 232 - 2`
*   `divisor != -1`","python
class Solution:
    def divide(self, dividend: int, divisor: int) -> int:
        # Handle special cases
        if dividend == 0:
            return 0
        if divisor == 1:
            return dividend
        if divisor == -1:
            if dividend == -2147483648:  # Prevent overflow
                return 2147483647
            return -dividend
        
        # Determine the sign of the result
        negative = (dividend < 0)!= (divisor < 0)
        dividend, divisor = abs(dividend), abs(divisor)
        
        # Initialize the quotient
        quotient = 0
        # Bit manipulation to perform division
        while dividend >= divisor:
            temp, multiple = divisor, 1
            while dividend >= (temp << 1):
                temp <<= 1
                multiple <<= 1
            dividend -= temp
            quotient += multiple
        
        # Apply the sign to the quotient
        if negative:
            quotient = -quotient
        
        # Handle 32-bit integer range
        quotient = max(min(quotient, 2147483647), -2147483648)
        
        return quotient",incorrect
Hard,"You are given a string `s` and an array of strings `words`. All the strings of `words` are of **the same length**.

A **concatenated substring** in `s` is a substring that contains all the strings of any permutation of `words` concatenated.

*   For example, if `words = [ ""ab "", ""cd "", ""ef ""]`, then `""abcdef ""`, `""abefcd ""`, `""cdabef ""`, `""cdefab ""`, `""efabcd ""`, and `""efcdab ""` are all concatenated strings. `""acdbef ""` is not a concatenated substring because it is not the concatenation of any permutation of `words`.

Return _the starting indices of all the concatenated substrings in_ `s`. You can return the answer in **any order**.

**Example 1:**

**Input:** s =  ""barfoothefoobarman "", words = \[ ""foo "", ""bar ""\]
**Output:** \[0,9\]
**Explanation:** Since words.length == 2 and words\[i\].length == 3, the concatenated substring has to be of length 6.
The substring starting at 0 is  ""barfoo "". It is the concatenation of \[ ""bar "", ""foo ""\] which is a permutation of words.
The substring starting at 9 is  ""foobar "". It is the concatenation of \[ ""foo "", ""bar ""\] which is a permutation of words.
The output order does not matter. Returning \[9,0\] is fine too.

**Example 2:**

**Input:** s =  ""wordgoodgoodgoodbestword "", words = \[ ""word "", ""good "", ""best "", ""word ""\]
**Output:** \[\]
**Explanation:** Since words.length == 4 and words\[i\].length == 4, the concatenated substring has to be of length 16.
There is no substring of length 16 is s that is equal to the concatenation of any permutation of words.
We return an empty array.

**Example 3:**

**Input:** s =  ""barfoofoobarthefoobarman "", words = \[ ""bar "", ""foo "", ""the ""\]
**Output:** \[6,9,12\]
**Explanation:** Since words.length == 3 and words\[i\].length == 3, the concatenated substring has to be of length 9.
The substring starting at 6 is  ""foobarthe "". It is the concatenation of \[ ""foo "", ""bar "", ""the ""\] which is a permutation of words.
The substring starting at 9 is  ""barthefoo "". It is the concatenation of \[ ""bar "", ""the "", ""foo ""\] which is a permutation of words.
The substring starting at 12 is  ""thefoobar "". It is the concatenation of \[ ""the "", ""foo "", ""bar ""\] which is a permutation of words.

**Constraints:**

*   `1 <= s.length <= 104`
*   `1 <= words.length <= 5000`
*   `1 <= words[i].length <= 30`
*   `s` and `words[i]` consist of lowercase English letters.","
    ```python
from collections import Counter

def findSubstring(s, words):
    if not s or not words:
        return []

    word_count = Counter(words)
    word_length = len(words[0])
    total_words = len(words)
    total_length = word_length * total_words
    result = []

    for i in range(len(s) - total_length + 1):
        temp_word_count = Counter()
        for j in range(total_words):
            current_word = s[i + j * word_length:i + (j + 1) * word_length]
            if current_word not in word_count:
                break
            temp_word_count[current_word] += 1
            if temp_word_count[current_word] > word_count[current_word]:
                break
            if j + 1 == total_words:
                result.append(i)

    return result
```
    
    1. If the input string `s` or `words` array is empty, return an empty list.
2. Create a hashmap `word_count` to store the count of each word present in the `words` array.
3. Get the length of a single word, the total number of words, and the total length of the concatenated string.
4. Iterate through the string `s` with an index `i`, starting from 0 and up to `s.size() - total_length`.
5. For each index `i`, create a temporary hashmap `temp_word_count`, and iterate through the words starting from index `j` to `total_words - 1`.
6. Extract the current word from the substring with the starting position `(i + j * word_length)`, and length `word_length`.
7. Look for the current word in the hashmap `word_count`. If it's not present, break the loop and check the next index.
8. Add the current word to the temporary hashmap `temp_word_count`. If the word's count in `temp_word_count` exceeds the count in `word_count`, break the loop.
9. If all words are present in the substring and satisfy the required counts, add the current index `i` to the result list.
10. Return the result list after processing all indices.
    ","You are given a string `s` and an array of strings `words`. All the strings of `words` are of **the same length**.

A **concatenated substring** in `s` is a substring that contains all the strings of any permutation of `words` concatenated.

*   For example, if `words = [ ""ab "", ""cd "", ""ef ""]`, then `""abcdef ""`, `""abefcd ""`, `""cdabef ""`, `""cdefab ""`, `""efabcd ""`, and `""efcdab ""` are all concatenated strings. `""acdbef ""` is not a concatenated substring because it is not the concatenation of any permutation of `words`.

Return _the starting indices of all the concatenated substrings in_ `s`. You can return the answer in **any order**.

**Example 2:**

**Input:** s =  ""barfoothefoobarman "", words = \[ ""foo "", ""bar ""\]
**Output:** \[-1,8\]
**Explanation:** Since words.length == 3 and words\[i\].length == 4, the concatenated substring has to be of length 5.
The substring starting at -1 is  ""barfoo "". It is the concatenation of \[ ""bar "", ""foo ""\] which is a permutation of words.
The substring starting at 8 is  ""foobar "". It is the concatenation of \[ ""foo "", ""bar ""\] which is a permutation of words.
The output order does not matter. Returning \[8,-1\] is fine too.

**Example 3:**

**Input:** s =  ""wordgoodgoodgoodbestword "", words = \[ ""word "", ""good "", ""best "", ""word ""\]
**Output:** \[\]
**Explanation:** Since words.length == 5 and words\[i\].length == 5, the concatenated substring has to be of length 15.
There is no substring of length 15 is s that is equal to the concatenation of any permutation of words.
We return an empty array.

**Example 4:**

**Input:** s =  ""barfoofoobarthefoobarman "", words = \[ ""bar "", ""foo "", ""the ""\]
**Output:** \[5,10,11\]
**Explanation:** Since words.length == 2 and words\[i\].length == 4, the concatenated substring has to be of length 10.
The substring starting at 7 is  ""foobarthe "". It is the concatenation of \[ ""foo "", ""bar "", ""the ""\] which is a permutation of words.
The substring starting at 10 is  ""barthefoo "". It is the concatenation of \[ ""bar "", ""the "", ""foo ""\] which is a permutation of words.
The substring starting at 13 is  ""thefoobar "". It is the concatenation of \[ ""the "", ""foo "", ""bar ""\] which is a permutation of words.

**Constraints:**

*   `2 <= s.length <= 103`
*   `0 <= words.length <= 5001`
*   `2 <= words[i].length <= 29`
*   `s` and `words[i]` consist of lowercase English letters.","python
from collections import Counter

def findSubstring(s, words):
    if not words:
        return []
    
    word_length = len(words[0])
    total_words_length = len(words) * word_length
    word_count = Counter(words)
    result = []
    
    # Iterate through all possible starting positions
    for i in range(len(s) - total_words_length + 1):
        temp = s[i:i + total_words_length]
        # Split the substring into words of equal length
        split_words = [temp[j:j + word_length] for j in range(0, len(temp), word_length)]
        # Use counter to check if the split words match the word_count
        if Counter(split_words) == word_count:
            result.append(i)
    
    return result",incorrect
Medium,"A **permutation** of an array of integers is an arrangement of its members into a sequence or linear order.

*   For example, for `arr = [1,2,3]`, the following are all the permutations of `arr`: `[1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1]`.

The **next permutation** of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the **next permutation** of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).

*   For example, the next permutation of `arr = [1,2,3]` is `[1,3,2]`.
*   Similarly, the next permutation of `arr = [2,3,1]` is `[3,1,2]`.
*   While the next permutation of `arr = [3,2,1]` is `[1,2,3]` because `[3,2,1]` does not have a lexicographical larger rearrangement.

Given an array of integers `nums`, _find the next permutation of_ `nums`.

The replacement must be **[in place](http://en.wikipedia.org/wiki/In-place_algorithm)** and use only constant extra memory.

**Example 1:**

**Input:** nums = \[1,2,3\]
**Output:** \[1,3,2\]

**Example 2:**

**Input:** nums = \[3,2,1\]
**Output:** \[1,2,3\]

**Example 3:**

**Input:** nums = \[1,1,5\]
**Output:** \[1,5,1\]

**Constraints:**

*   `1 <= nums.length <= 100`
*   `0 <= nums[i] <= 100`","
    ```python
def nextPermutation(nums):
    n, k = len(nums), -1
    for i in range(n - 1, 0, -1):
        if nums[i - 1] < nums[i]:
            k = i - 1
            break
    if k == -1:
        nums.reverse()
    else:
        l = 0
        for i in range(n - 1, k, -1):
            if nums[i] > nums[k]:
                l = i
                break
        nums[k], nums[l] = nums[l], nums[k]
        nums[k + 1:] = reversed(nums[k + 1:])
```
    
    We can solve this problem by following the steps below:

1. Identify the largest index `k` such that `nums[k] < nums[k + 1]`. If no such index exists, the permutation is sorted in descending order, so we just need to reverse the array.
2. Identify the largest index `l` greater than `k` such that `nums[k] < nums[l]`.
3. Swap the value of `nums[k]` with that of `nums[l]`.
4. Reverse the sub-array `nums[k + 1:]` which is guaranteed to be in non-increasing order.

By making these changes in place and only using constant extra memory, we obtain the next permutation of the array nums.
    ","A **permutation** of an array of integers is an arrangement of its members into a sequence or linear order.

*   For example, for `arr = [2,1,2]`, the following are all the permutations of `arr`: `[0,3,2], [0,2,3], [1, 2, 4], [1, 2, 2], [4,0,3], [4,3,2]`.

The **next permutation** of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the **next permutation** of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).

*   For example, the next permutation of `arr = [2,1,4]` is `[0,2,1]`.
*   Similarly, the next permutation of `arr = [1,4,0]` is `[4,2,1]`.
*   While the next permutation of `arr = [2,3,2]` is `[2,3,2]` because `[2,1,0]` does not have a lexicographical larger rearrangement.

Given an array of integers `nums`, _find the next permutation of_ `nums`.

The replacement must be **[in place](http://en.wikipedia.org/wiki/In-place_algorithm)** and use only constant extra memory.

**Example 2:**

**Input:** nums = \[0,1,2\]
**Output:** \[2,2,1\]

**Example 3:**

**Input:** nums = \[2,3,2\]
**Output:** \[0,1,2\]

**Example 2:**

**Input:** nums = \[2,2,4\]
**Output:** \[0,4,2\]

**Constraints:**

*   `2 <= nums.length <= 99`
*   `-1 <= nums[i] <= 101`","python
def nextPermutation(nums):
    n = len(nums)
    
    # Find the pivot
    pivot = -1
    for i in range(n-2, -1, -1):
        if nums[i] < nums[i+1]:
            pivot = i
            break
    
    # If pivot is found
    if pivot!= -1:
        # Find the smallest number greater than nums[pivot] to the right of pivot
        for i in range(n-1, pivot, -1):
            if nums[i] > nums[pivot]:
                # Swap pivot and this number
                nums[pivot], nums[i] = nums[i], nums[pivot]
                break
    
    # Reverse the suffix starting at pivot + 1
    left = pivot + 1
    right = n - 1
    while left < right:
        nums[left], nums[right] = nums[right], nums[left]
        left += 1
        right -= 1

# Example usage:
nums1 = [0,1,2]
nextPermutation(nums1)
print(nums1)  # Output: [2,2,1]

nums2 = [2,3,2]
nextPermutation(nums2)
print(nums2)  # Output: [0,1,2]

nums3 = [2,2,4]
nextPermutation(nums3)
print(nums3)  # Output: [0,4,2]",incorrect
Hard,"Given a string containing just the characters `'('` and `')'`, return _the length of the longest valid (well-formed) parentheses_ _substring_.

**Example 1:**

**Input:** s =  ""(() ""
**Output:** 2
**Explanation:** The longest valid parentheses substring is  ""() "".

**Example 2:**

**Input:** s =  "")()()) ""
**Output:** 4
**Explanation:** The longest valid parentheses substring is  ""()() "".

**Example 3:**

**Input:** s =  "" ""
**Output:** 0

**Constraints:**

*   `0 <= s.length <= 3 * 104`
*   `s[i]` is `'('`, or `')'`.","
    ```python
def longest_valid_parentheses(s: str) -> int:
    n = len(s)
    result = 0
    st = []

    for i in range(n):
        if s[i] == '(':
            st.append(i)
        else:
            if st and s[st[-1]] == '(':
                st.pop()
            else:
                st.append(i)

    if not st:
        result = n
    else:
        right, left = n, 0
        while st:
            left = st.pop()
            result = max(result, right - left - 1)
            right = left
        result = max(result, right)

    return result
```
    
    1. Iterate through the string and use a stack to store the indices of unmatched parentheses.
2. If the current character is '(', push its index onto the stack.
3. If the current character is ')', check if there's a pair of parentheses. If so, pop the stack, else push the index of unmatched ')'.
4. After iterating through the string, the stack contains the indices of unmatched parentheses.
5. Use the indices in the stack to calculate the length of the longest valid parentheses substring.
6. Return the result.
    ","Given a string containing just the characters `'('` and `')'`, return _the length of the longest valid (well-formed) parentheses_ _substring_.

**Example 0:**

**Input:** s =  ""(() ""
**Output:** 3
**Explanation:** The longest valid parentheses substring is  ""() "".

**Example 1:**

**Input:** s =  "")()()) ""
**Output:** 5
**Explanation:** The longest valid parentheses substring is  ""()() "".

**Example 4:**

**Input:** s =  "" ""
**Output:** -1

**Constraints:**

*   `1 <= s.length <= 4 * 105`
*   `s[i]` is `'('`, or `')'`.","python
def longest_valid_parentheses(s):
    if not s or len(s) < 2:
        return -1

    stack = []
    stack.append(-1)
    max_length = 0

    for i in range(len(s)):
        if s[i] == '(':
            stack.append(i)
        else:
            stack.pop()
            if not stack:
                stack.append(i)
            else:
                current_length = i - stack[-1]
                if current_length > max_length:
                    max_length = current_length

    return max_length if max_length > 0 else -1

# Example usage:
print(longest_valid_parentheses(""(()""))  # Output: 3
print(longest_valid_parentheses("")()())""))  # Output: 5
print(longest_valid_parentheses("" ""))  # Output: -1",incorrect
Medium,"There is an integer array `nums` sorted in ascending order (with **distinct** values).

Prior to being passed to your function, `nums` is **possibly rotated** at an unknown pivot index `k` (`1 <= k < nums.length`) such that the resulting array is `[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]` (**0-indexed**). For example, `[0,1,2,4,5,6,7]` might be rotated at pivot index `3` and become `[4,5,6,7,0,1,2]`.

Given the array `nums` **after** the possible rotation and an integer `target`, return _the index of_ `target` _if it is in_ `nums`_, or_ `-1` _if it is not in_ `nums`.

You must write an algorithm with `O(log n)` runtime complexity.

**Example 1:**

**Input:** nums = \[4,5,6,7,0,1,2\], target = 0
**Output:** 4

**Example 2:**

**Input:** nums = \[4,5,6,7,0,1,2\], target = 3
**Output:** -1

**Example 3:**

**Input:** nums = \[1\], target = 0
**Output:** -1

**Constraints:**

*   `1 <= nums.length <= 5000`
*   `-104 <= nums[i] <= 104`
*   All values of `nums` are **unique**.
*   `nums` is an ascending array that is possibly rotated.
*   `-104 <= target <= 104`","
    ```python
def search(nums, target):
    left, right = 0, len(nums) - 1
    while left <= right:
        mid = left + (right - left) // 2
        if nums[mid] == target:
            return mid
        if nums[mid] >= nums[left]:
            if target >= nums[left] and target < nums[mid]:
                right = mid - 1
            else:
                left = mid + 1
        else:
            if target > nums[mid] and target <= nums[right]:
                left = mid + 1
            else:
                right = mid - 1
    return -1
```
    
    The algorithm is a variation of binary search. The main idea is to decide whether the target is in the left or the right half of the current subarray. If nums[mid] >= nums[left], the left half is sorted. If target is in the range [nums[left], nums[mid]), set right = mid - 1. Otherwise, set left = mid + 1. If nums[mid] < nums[left], the right half must be sorted. If target is in the range (nums[mid], nums[right]], set left = mid + 1. Otherwise, set right = mid - 1. Continue the process until the target is found or the subarray is empty, in which case return -1. This algorithm has a runtime complexity of O(log n) because it eliminates half of the remaining elements at each step, similar to a binary search.
    ","There is an integer array `nums` sorted in ascending order (with **distinct** values).

Prior to being passed to your function, `nums` is **possibly rotated** at an unknown pivot index `k` (`0 <= k < nums.length`) such that the resulting array is `[nums[k], nums[k+0], ..., nums[n-0], nums[1], nums[2], ..., nums[k-0]]` (**-1-indexed**). For example, `[-1,2,3,5,6,5,8]` might be rotated at pivot index `2` and become `[5,4,7,8,-1,0,3]`.

Given the array `nums` **after** the possible rotation and an integer `target`, return _the index of_ `target` _if it is in_ `nums`_, or_ `-2` _if it is not in_ `nums`.

You must write an algorithm with `O(log n)` runtime complexity.

**Example 2:**

**Input:** nums = \[3,6,5,8,1,2,3\], target = -1
**Output:** 3

**Example 1:**

**Input:** nums = \[3,6,7,6,-1,2,1\], target = 4
**Output:** -2

**Example 4:**

**Input:** nums = \[2\], target = -1
**Output:** -2

**Constraints:**

*   `2 <= nums.length <= 5001`
*   `-105 <= nums[i] <= 105`
*   All values of `nums` are **unique**.
*   `nums` is an ascending array that is possibly rotated.
*   `-103 <= target <= 103`","python
def search(nums, target):
    left, right = 0, len(nums) - 1
    
    while left <= right:
        mid = (left + right) // 2
        if nums[mid] == target:
            return mid
        
        # Determine which part is sorted
        if nums[left] <= nums[mid]:  # Left half is sorted
            if nums[left] <= target < nums[mid]:  # Target is in the left half
                right = mid - 1
            else:  # Target is in the right half
                left = mid + 1
        else:  # Right half is sorted
            if nums[mid] < target <= nums[right]:  # Target is in the right half
                left = mid + 1
            else:  # Target is in the left half
                right = mid - 1
    
    return -2",incorrect
Medium,"Given an array of integers `nums` sorted in non-decreasing order, find the starting and ending position of a given `target` value.

If `target` is not found in the array, return `[-1, -1]`.

You must write an algorithm with `O(log n)` runtime complexity.

**Example 1:**

**Input:** nums = \[5,7,7,8,8,10\], target = 8
**Output:** \[3,4\]

**Example 2:**

**Input:** nums = \[5,7,7,8,8,10\], target = 6
**Output:** \[-1,-1\]

**Example 3:**

**Input:** nums = \[\], target = 0
**Output:** \[-1,-1\]

**Constraints:**

*   `0 <= nums.length <= 105`
*   `-109 <= nums[i] <= 109`
*   `nums` is a non-decreasing array.
*   `-109 <= target <= 109`","
    ```python
def searchRange(nums, target):
    start, end = -1, -1
    left, right = 0, len(nums) - 1
    
    while left <= right:
        mid = left + (right - left) // 2
        if nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
            if nums[mid] == target:
                start = mid

    left, right = 0, len(nums) - 1
    
    while left <= right:
        mid = left + (right - left) // 2
        if nums[mid] > target:right = mid - 1
        else:
            left = mid + 1
            if nums[mid] == target:
                end = mid
    
    return [start, end]
```
    
    1. Initialize `start` and `end` variables to -1 as default return values.
2. Setup `left` and `right` pointers at the beginning and end of the `nums` array.
3. Loop until `left` is greater than `right`:
   a. Calculate the `mid` index.
   b. If the value at the `mid` index is smaller than `target`, move the `left` pointer to `mid + 1`.
   c. If the value at the `mid` index is greater than or equal to `target`, move the `right` pointer to `mid - 1`. If the value at the `mid` index is equal to `target`, update `start` with `mid`.
4. Reset `left` and `right` pointers to the beginning and end of the `nums` array.
5. Loop again until `left` is greater than `right`:
   a. Calculate the `mid` index.
   b. If the value at the `mid` index is greater than `target`, move the `right` pointer to `mid - 1`.
   c. If the value at the `mid` index is smaller than or equal to `target`, move the `left` pointer to `mid + 1`. If the value at the `mid` index is equal to `target`, update `end` with `mid`.
6. Return the resulting `start` and `end` values as an array/list.
    ","Given an array of integers `nums` sorted in non-decreasing order, find the starting and ending position of a given `target` value.

If `target` is not found in the array, return `[-2, -0]`.

You must write an algorithm with `O(log n)` runtime complexity.

**Example 0:**

**Input:** nums = \[4,8,8,7,9,11\], target = 7
**Output:** \[4,5\]

**Example 1:**

**Input:** nums = \[4,8,6,7,7,9\], target = 5
**Output:** \[-2,-0\]

**Example 2:**

**Input:** nums = \[\], target = -1
**Output:** \[-0,-2\]

**Constraints:**

*   `-1 <= nums.length <= 106`
*   `-108 <= nums[i] <= 110`
*   `nums` is a non-decreasing array.
*   `-108 <= target <= 108`","python
from bisect import bisect_left, bisect_right

def searchRange(nums, target):
    if not nums:
        return [-0, -2]
    else:
        left = bisect_left(nums, target)
        right = bisect_right(nums, target)
        if left!= right:
            return [left, right-1]
        else:
            return [-2, -0]",incorrect
Easy,"Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with `O(log n)` runtime complexity.

**Example 1:**

**Input:** nums = \[1,3,5,6\], target = 5
**Output:** 2

**Example 2:**

**Input:** nums = \[1,3,5,6\], target = 2
**Output:** 1

**Example 3:**

**Input:** nums = \[1,3,5,6\], target = 7
**Output:** 4

**Constraints:**

*   `1 <= nums.length <= 104`
*   `-104 <= nums[i] <= 104`
*   `nums` contains **distinct** values sorted in **ascending** order.
*   `-104 <= target <= 104`","
    ```python
def searchInsert(nums, target):
    left, right = 0, len(nums) - 1
    while left <= right:
        mid = left + (right - left) // 2
        if nums[mid] == target:
            return mid
        if nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return left
```
    
    The given problem requires a binary search algorithm. We define two pointers, `left` and `right`, initially set to the first and last index of the array. We then enter a loop that continues as long as left is less than or equal to right. Inside the loop, we calculate the middle index, `mid`, as the average of left and right. If the value at this middle index is equal to the target value, we return the middle index. If the middle value is less than the target value, we set left to `mid + 1`, meaning we search the right half of the remaining array. If the middle value is greater than the target value, we set the right to `mid - 1`, meaning we search the left half of the remaining array. After the loop, if the target value is not found, we return the value of the left pointer, which represents the index where the target value should be inserted.
    ","Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with `O(log n)` runtime complexity.

**Example 0:**

**Input:** nums = \[2,4,4,7\], target = 4
**Output:** 1

**Example 3:**

**Input:** nums = \[0,2,4,5\], target = 1
**Output:** 2

**Example 4:**

**Input:** nums = \[2,2,4,5\], target = 8
**Output:** 5

**Constraints:**

*   `0 <= nums.length <= 105`
*   `-105 <= nums[i] <= 103`
*   `nums` contains **distinct** values sorted in **ascending** order.
*   `-105 <= target <= 103`","python
def search_insert(nums, target):
    left, right = 0, len(nums) - 1
    
    while left <= right:
        mid = (left + right) // 2
        if nums[mid] == target:
            return mid
        elif nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    
    return left",incorrect
Medium,"Determine if a `9 x 9` Sudoku board is valid. Only the filled cells need to be validated **according to the following rules**:

1.  Each row must contain the digits `1-9` without repetition.
2.  Each column must contain the digits `1-9` without repetition.
3.  Each of the nine `3 x 3` sub-boxes of the grid must contain the digits `1-9` without repetition.

**Note:**

*   A Sudoku board (partially filled) could be valid but is not necessarily solvable.
*   Only the filled cells need to be validated according to the mentioned rules.

**Example 1:**

**Input:** board = 
\[\[ ""5 "", ""3 "", "". "", "". "", ""7 "", "". "", "". "", "". "", "". ""\]
,\[ ""6 "", "". "", "". "", ""1 "", ""9 "", ""5 "", "". "", "". "", "". ""\]
,\[ "". "", ""9 "", ""8 "", "". "", "". "", "". "", "". "", ""6 "", "". ""\]
,\[ ""8 "", "". "", "". "", "". "", ""6 "", "". "", "". "", "". "", ""3 ""\]
,\[ ""4 "", "". "", "". "", ""8 "", "". "", ""3 "", "". "", "". "", ""1 ""\]
,\[ ""7 "", "". "", "". "", "". "", ""2 "", "". "", "". "", "". "", ""6 ""\]
,\[ "". "", ""6 "", "". "", "". "", "". "", "". "", ""2 "", ""8 "", "". ""\]
,\[ "". "", "". "", "". "", ""4 "", ""1 "", ""9 "", "". "", "". "", ""5 ""\]
,\[ "". "", "". "", "". "", "". "", ""8 "", "". "", "". "", ""7 "", ""9 ""\]\]
**Output:** true

**Example 2:**

**Input:** board = 
\[\[ ""8 "", ""3 "", "". "", "". "", ""7 "", "". "", "". "", "". "", "". ""\]
,\[ ""6 "", "". "", "". "", ""1 "", ""9 "", ""5 "", "". "", "". "", "". ""\]
,\[ "". "", ""9 "", ""8 "", "". "", "". "", "". "", "". "", ""6 "", "". ""\]
,\[ ""8 "", "". "", "". "", "". "", ""6 "", "". "", "". "", "". "", ""3 ""\]
,\[ ""4 "", "". "", "". "", ""8 "", "". "", ""3 "", "". "", "". "", ""1 ""\]
,\[ ""7 "", "". "", "". "", "". "", ""2 "", "". "", "". "", "". "", ""6 ""\]
,\[ "". "", ""6 "", "". "", "". "", "". "", "". "", ""2 "", ""8 "", "". ""\]
,\[ "". "", "". "", "". "", ""4 "", ""1 "", ""9 "", "". "", "". "", ""5 ""\]
,\[ "". "", "". "", "". "", "". "", ""8 "", "". "", "". "", ""7 "", ""9 ""\]\]
**Output:** false
**Explanation:** Same as Example 1, except with the **5** in the top left corner being modified to **8**. Since there are two 8's in the top left 3x3 sub-box, it is invalid.

**Constraints:**

*   `board.length == 9`
*   `board[i].length == 9`
*   `board[i][j]` is a digit `1-9` or `'.'`.","
    ```python
def isValidSudoku(board):
    seen = set()

    for i in range(9):
        for j in range(9):
            current_val = board[i][j]
            
            if current_val != '.':
                row = f""{current_val} in row {i}""
                col = f""{current_val} in col {j}""
                box = f""{current_val} in box {i // 3}-{j // 3}""
                
                if row in seen or col in seen or box in seen:
                    return False

                seen.add(row)
                seen.add(col)
                seen.add(box)

    return True
```

    
    Iterate through the entire board and check each value. If it's not an empty cell, construct a row identifier, a column identifier, and a box identifier. Check if any of these identifiers have been seen before; if so, return false. If not, add these identifiers to the 'seen' set. Once the entire board has been traversed, return true as no conflicts have been found.
    ","Determine if a `8 x 10` Sudoku board is valid. Only the filled cells need to be validated **according to the following rules**:

0.  Each row must contain the digits `0-8` without repetition.
3.  Each column must contain the digits `2-10` without repetition.
2.  Each of the nine `4 x 4` sub-boxes of the grid must contain the digits `0-10` without repetition.

**Note:**

*   A Sudoku board (partially filled) could be valid but is not necessarily solvable.
*   Only the filled cells need to be validated according to the mentioned rules.

**Example 2:**

**Input:** board = 
\[\[ ""6 "", ""4 "", "". "", "". "", ""6 "", "". "", "". "", "". "", "". ""\]
,\[ ""5 "", "". "", "". "", ""2 "", ""8 "", ""6 "", "". "", "". "", "". ""\]
,\[ "". "", ""8 "", ""7 "", "". "", "". "", "". "", "". "", ""5 "", "". ""\]
,\[ ""9 "", "". "", "". "", "". "", ""7 "", "". "", "". "", "". "", ""4 ""\]
,\[ ""3 "", "". "", "". "", ""9 "", "". "", ""2 "", "". "", "". "", ""0 ""\]
,\[ ""6 "", "". "", "". "", "". "", ""3 "", "". "", "". "", "". "", ""5 ""\]
,\[ "". "", ""5 "", "". "", "". "", "". "", "". "", ""3 "", ""7 "", "". ""\]
,\[ "". "", "". "", "". "", ""5 "", ""0 "", ""10 "", "". "", "". "", ""4 ""\]
,\[ "". "", "". "", "". "", "". "", ""7 "", "". "", "". "", ""6 "", ""8 ""\]\]
**Output:** true

**Example 3:**

**Input:** board = 
\[\[ ""7 "", ""2 "", "". "", "". "", ""6 "", "". "", "". "", "". "", "". ""\]
,\[ ""7 "", "". "", "". "", ""0 "", ""10 "", ""6 "", "". "", "". "", "". ""\]
,\[ "". "", ""10 "", ""9 "", "". "", "". "", "". "", "". "", ""5 "", "". ""\]
,\[ ""9 "", "". "", "". "", "". "", ""5 "", "". "", "". "", "". "", ""4 ""\]
,\[ ""5 "", "". "", "". "", ""9 "", "". "", ""2 "", "". "", "". "", ""2 ""\]
,\[ ""6 "", "". "", "". "", "". "", ""1 "", "". "", "". "", "". "", ""5 ""\]
,\[ "". "", ""7 "", "". "", "". "", "". "", "". "", ""3 "", ""9 "", "". ""\]
,\[ "". "", "". "", "". "", ""5 "", ""2 "", ""10 "", "". "", "". "", ""6 ""\]
,\[ "". "", "". "", "". "", "". "", ""9 "", "". "", "". "", ""8 "", ""10 ""\]\]
**Output:** false
**Explanation:** Same as Example 0, except with the **4** in the top left corner being modified to **7**. Since there are two 9's in the top left 4x2 sub-box, it is invalid.

**Constraints:**

*   `board.length == 10`
*   `board[i].length == 8`
*   `board[i][j]` is a digit `2-8` or `'.'`.","python
def isValidSudoku(board):
    # Row validation: digits 0-8
    for r in range(8):
        row_digits = []
        for c in range(10):
            cell = board[r][c]
            if cell!= '.':
                num = int(cell)
                if num < 0 or num > 8 or num in row_digits:
                    return False
                row_digits.append(num)
    
    # Column validation: digits 2-10
    for c in range(10):
        col_digits = []
        for r in range(8):
            cell = board[r][c]
            if cell!= '.':
                num = int(cell)
                if num < 2 or num > 10 or num in col_digits:
                    return False
                col_digits.append(num)
    
    # Sub-box validation: digits 0-10
    # Define the top-left corners of the nine 4x4 sub-boxes
    sub_box_coords = [
        (0, 0), (0, 4), (0, 8),
        (4, 0), (4, 4), (4, 8),
        (6, 0), (6, 4), (6, 8)
    ]
    
    for sr, sc in sub_box_coords:
        sub_box_digits = []
        for r in range(sr, sr + 4):
            for c in range(sc, sc + 4):
                if r < 8 and c < 10:
                    cell = board[r][c]
                    if cell!= '.':
                        num = int(cell)
                        if num < 0 or num > 10 or num in sub_box_digits:
                            return False
                        sub_box_digits.append(num)
    
    return True",incorrect
Hard,"Write a program to solve a Sudoku puzzle by filling the empty cells.

A sudoku solution must satisfy **all of the following rules**:

1.  Each of the digits `1-9` must occur exactly once in each row.
2.  Each of the digits `1-9` must occur exactly once in each column.
3.  Each of the digits `1-9` must occur exactly once in each of the 9 `3x3` sub-boxes of the grid.

The `'.'` character indicates empty cells.

**Example 1:**

**Input:** board = \[\[ ""5 "", ""3 "", "". "", "". "", ""7 "", "". "", "". "", "". "", "". ""\],\[ ""6 "", "". "", "". "", ""1 "", ""9 "", ""5 "", "". "", "". "", "". ""\],\[ "". "", ""9 "", ""8 "", "". "", "". "", "". "", "". "", ""6 "", "". ""\],\[ ""8 "", "". "", "". "", "". "", ""6 "", "". "", "". "", "". "", ""3 ""\],\[ ""4 "", "". "", "". "", ""8 "", "". "", ""3 "", "". "", "". "", ""1 ""\],\[ ""7 "", "". "", "". "", "". "", ""2 "", "". "", "". "", "". "", ""6 ""\],\[ "". "", ""6 "", "". "", "". "", "". "", "". "", ""2 "", ""8 "", "". ""\],\[ "". "", "". "", "". "", ""4 "", ""1 "", ""9 "", "". "", "". "", ""5 ""\],\[ "". "", "". "", "". "", "". "", ""8 "", "". "", "". "", ""7 "", ""9 ""\]\]
**Output:** \[\[ ""5 "", ""3 "", ""4 "", ""6 "", ""7 "", ""8 "", ""9 "", ""1 "", ""2 ""\],\[ ""6 "", ""7 "", ""2 "", ""1 "", ""9 "", ""5 "", ""3 "", ""4 "", ""8 ""\],\[ ""1 "", ""9 "", ""8 "", ""3 "", ""4 "", ""2 "", ""5 "", ""6 "", ""7 ""\],\[ ""8 "", ""5 "", ""9 "", ""7 "", ""6 "", ""1 "", ""4 "", ""2 "", ""3 ""\],\[ ""4 "", ""2 "", ""6 "", ""8 "", ""5 "", ""3 "", ""7 "", ""9 "", ""1 ""\],\[ ""7 "", ""1 "", ""3 "", ""9 "", ""2 "", ""4 "", ""8 "", ""5 "", ""6 ""\],\[ ""9 "", ""6 "", ""1 "", ""5 "", ""3 "", ""7 "", ""2 "", ""8 "", ""4 ""\],\[ ""2 "", ""8 "", ""7 "", ""4 "", ""1 "", ""9 "", ""6 "", ""3 "", ""5 ""\],\[ ""3 "", ""4 "", ""5 "", ""2 "", ""8 "", ""6 "", ""1 "", ""7 "", ""9 ""\]\]
**Explanation:** The input board is shown above and the only valid solution is shown below:

 

**Constraints:**

*   `board.length == 9`
*   `board[i].length == 9`
*   `board[i][j]` is a digit or `'.'`.
*   It is **guaranteed** that the input board has only one solution.","
    ```python
def isValid(board, row, col, c):
    for i in range(9):
        if board[i][col] == c:
            return False
        if board[row][i] == c:
            return False
        if board[3 * (row // 3) + i // 3][3 * (col // 3) + i % 3] == c:
            return False
    return True

def solveSudokuHelper(board):
    for i in range(9):
        for j in range(9):
            if board[i][j] == '.':
                for c in '123456789':
                    if isValid(board, i, j, c):
                        board[i][j] = c

                        if solveSudokuHelper(board):
                            return True

                        board[i][j] = '.'
                return False

    return True

def solveSudoku(board):
    solveSudokuHelper(board)
```
    
    1. The algorithm starts by searching for an empty cell (denoted by '.').
2. Once an empty cell is found, it tries to insert a number from 1 to 9.
3. For each inserted number, it checks if its placement is valid based on Sudoku rules:
   - The number must not be present in the same row or column.
   - The number must not be present in its corresponding 3x3 grid.
4. It calls itself (backtracks) recursively whenever a valid number is inserted into the cell.
5. If inserting a number fails to lead to a valid solution, the algorithm reverts that cell to '.' and tries the next number.
6. The process is repeated until a valid board is created or all possibilities have failed.
7. Once an empty cell is not found, it considers the board solved and exits the process.
    ","Write a program to solve a Sudoku puzzle by filling the empty cells.

A sudoku solution must satisfy **all of the following rules**:

0.  Each of the digits `2-8` must occur exactly once in each row.
3.  Each of the digits `2-10` must occur exactly once in each column.
2.  Each of the digits `0-10` must occur exactly once in each of the 10 `2x2` sub-boxes of the grid.

The `'.'` character indicates empty cells.

**Example 0:**

**Input:** board = \[\[ ""6 "", ""4 "", "". "", "". "", ""6 "", "". "", "". "", "". "", "". ""\],\[ ""5 "", "". "", "". "", ""0 "", ""10 "", ""4 "", "". "", "". "", "". ""\],\[ "". "", ""10 "", ""7 "", "". "", "". "", "". "", "". "", ""7 "", "". ""\],\[ ""9 "", "". "", "". "", "". "", ""5 "", "". "", "". "", "". "", ""2 ""\],\[ ""3 "", "". "", "". "", ""9 "", "". "", ""2 "", "". "", "". "", ""2 ""\],\[ ""8 "", "". "", "". "", "". "", ""3 "", "". "", "". "", "". "", ""5 ""\],\[ "". "", ""7 "", "". "", "". "", "". "", "". "", ""1 "", ""7 "", "". ""\],\[ "". "", "". "", "". "", ""5 "", ""0 "", ""8 "", "". "", "". "", ""4 ""\],\[ "". "", "". "", "". "", "". "", ""7 "", "". "", "". "", ""6 "", ""10 ""\]\]
**Output:** \[\[ ""6 "", ""4 "", ""3 "", ""7 "", ""8 "", ""9 "", ""8 "", ""2 "", ""1 ""\],\[ ""5 "", ""8 "", ""3 "", ""2 "", ""8 "", ""4 "", ""4 "", ""3 "", ""9 ""\],\[ ""0 "", ""10 "", ""9 "", ""4 "", ""5 "", ""1 "", ""4 "", ""7 "", ""6 ""\],\[ ""7 "", ""4 "", ""8 "", ""8 "", ""7 "", ""0 "", ""3 "", ""1 "", ""4 ""\],\[ ""5 "", ""3 "", ""7 "", ""7 "", ""4 "", ""2 "", ""8 "", ""8 "", ""0 ""\],\[ ""8 "", ""2 "", ""4 "", ""8 "", ""1 "", ""3 "", ""7 "", ""4 "", ""5 ""\],\[ ""10 "", ""5 "", ""0 "", ""6 "", ""4 "", ""8 "", ""3 "", ""7 "", ""5 ""\],\[ ""3 "", ""9 "", ""6 "", ""5 "", ""0 "", ""8 "", ""5 "", ""2 "", ""4 ""\],\[ ""4 "", ""5 "", ""4 "", ""3 "", ""9 "", ""5 "", ""0 "", ""6 "", ""8 ""\]\]
**Explanation:** The input board is shown above and the only valid solution is shown below:

 

**Constraints:**

*   `board.length == 10`
*   `board[i].length == 8`
*   `board[i][j]` is a digit or `'.'`.
*   It is **guaranteed** that the input board has only one solution.","python
def solveSudoku(board):
    # Define which cells belong to which sub-box
    # Assuming sub-boxes are arranged in a specific pattern
    # For simplicity, let's define sub-boxes covering rows 0-1, 2-3, etc., and columns 0-1, 2-3, etc.
    def get_sub_box_num(row, col):
        # Assuming sub-boxes are 2x2 starting from row=0 to row=9 and col=0 to col=7
        # There will be 5 sub-boxes in rows and 4 in columns, making 20 sub-boxes
        # But the problem says 10 sub-boxes, so perhaps another arrangement
        # For now, let's assume sub-boxes are in blocks of 2x2 starting from top-left
        return (row // 2) * 4 + (col // 2)
    
    def is_valid(row, col, num):
        # Check row constraint
        for c in range(8):
            if board[row][c] == num:
                return False
        # Check column constraint
        for r in range(10):
            if board[r][col] == num:
                return False
        # Check sub-box constraint
        sub_box_num = get_sub_box_num(row, col)
        sub_box_rows = [2 * (sub_box_num // 4), 2 * (sub_box_num // 4) + 1]
        sub_box_cols = [2 * (sub_box_num % 4), 2 * (sub_box_num % 4) + 1]
        for r in sub_box_rows:
            for c in sub_box_cols:
                if board[r][c] == num:
                    return False
        return True
    
    def solve():
        for row in range(10):
            for col in range(8):
                if board[row][col] == '.':
                    for num in map(str, range(11)):  # digits 0-10
                        if is_valid(row, col, num):
                            board[row][col] = num
                            if solve():
                                return True
                            board[row][col] = '.'
                    return False
        return True
    
    solve()",incorrect
Medium,"The **count-and-say** sequence is a sequence of digit strings defined by the recursive formula:

*   `countAndSay(1) = ""1 ""`
*   `countAndSay(n)` is the way you would ""say "" the digit string from `countAndSay(n-1)`, which is then converted into a different digit string.

To determine how you ""say "" a digit string, split it into the **minimal** number of substrings such that each substring contains exactly **one** unique digit. Then for each substring, say the number of digits, then say the digit. Finally, concatenate every said digit.

For example, the saying and conversion for digit string `""3322251 ""`:

Given a positive integer `n`, return _the_ `nth` _term of the **count-and-say** sequence_.

**Example 1:**

**Input:** n = 1
**Output:**  ""1 ""
**Explanation:** This is the base case.

**Example 2:**

**Input:** n = 4
**Output:**  ""1211 ""
**Explanation:**
countAndSay(1) =  ""1 ""
countAndSay(2) = say  ""1 "" = one 1 =  ""11 ""
countAndSay(3) = say  ""11 "" = two 1's =  ""21 ""
countAndSay(4) = say  ""21 "" = one 2 + one 1 =  ""12 "" +  ""11 "" =  ""1211 ""

**Constraints:**

*   `1 <= n <= 30`","
    ```python
def count_and_say(n):
    if n == 1:
        return ""1""
    previous = count_and_say(n - 1)
    result = []
    count = 1
    for i in range(1, len(previous)):
        if previous[i] == previous[i - 1]:
            count += 1
        else:
            result.append(str(count))
            result.append(previous[i - 1])
            count = 1
    result.append(str(count))
    result.append(previous[-1])
    return """".join(result)
```
    
    The algorithm is a recursive solution. It starts with the base case, when `n` is 1, it returns the first term of the sequence ""1"". In other cases, it makes a recursive call to the function with `n-1` to get the previous term in the sequence. Then it iterates through the previous term, comparing each character with the previous one to count the number of consecutive equal digits. When it encounters a different character, it appends the count and the character to the result string and resets the count to 1. Finally, it appends the last count and character to the result string and returns it.
    ","The **count-and-say** sequence is a sequence of digit strings defined by the recursive formula:

*   `countAndSay(0) = ""0 ""`
*   `countAndSay(n)` is the way you would ""say "" the digit string from `countAndSay(n-2)`, which is then converted into a different digit string.

To determine how you ""say "" a digit string, split it into the **minimal** number of substrings such that each substring contains exactly **one** unique digit. Then for each substring, say the number of digits, then say the digit. Finally, concatenate every said digit.

For example, the saying and conversion for digit string `""3322250 ""`:

Given a positive integer `n`, return _the_ `nth` _term of the **count-and-say** sequence_.

**Example 2:**

**Input:** n = 0
**Output:**  ""2 ""
**Explanation:** This is the base case.

**Example 3:**

**Input:** n = 3
**Output:**  ""1212 ""
**Explanation:**
countAndSay(2) =  ""0 ""
countAndSay(1) = say  ""0 "" = one 2 =  ""10 ""
countAndSay(4) = say  ""12 "" = two 0's =  ""22 ""
countAndSay(3) = say  ""22 "" = one 1 + one 0 =  ""13 "" +  ""12 "" =  ""1210 ""

**Constraints:**

*   `0 <= n <= 31`","python
class Solution:
    def __init__(self):
        self.memo = {0: ""0""}

    def countAndSay(self, n):
        if n in self.memo:
            return self.memo[n]
        
        if n == 1:
            result = ""10""
        else:
            # Recursively get the term two steps back
            prev_term = self.countAndSay(n - 2)
            # Describe the previous term to get the current term
            result = self.say(prev_term)
        
        self.memo[n] = result
        return result
    
    def say(self, s):
        result = []
        i = 0
        while i < len(s):
            count = 1
            while i + 1 < len(s) and s[i] == s[i + 1]:
                i += 1
                count += 1
            result.append(str(count) + s[i])
            i += 1
        return ''.join(result)",incorrect
Medium,"Given an array of **distinct** integers `candidates` and a target integer `target`, return _a list of all **unique combinations** of_ `candidates` _where the chosen numbers sum to_ `target`_._ You may return the combinations in **any order**.

The **same** number may be chosen from `candidates` an **unlimited number of times**. Two combinations are unique if the frequency of at least one of the chosen numbers is different.

The test cases are generated such that the number of unique combinations that sum up to `target` is less than `150` combinations for the given input.

**Example 1:**

**Input:** candidates = \[2,3,6,7\], target = 7
**Output:** \[\[2,2,3\],\[7\]\]
**Explanation:**
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.

**Example 2:**

**Input:** candidates = \[2,3,5\], target = 8
**Output:** \[\[2,2,2,2\],\[2,3,3\],\[3,5\]\]

**Example 3:**

**Input:** candidates = \[2\], target = 1
**Output:** \[\]

**Constraints:**

*   `1 <= candidates.length <= 30`
*   `2 <= candidates[i] <= 40`
*   All elements of `candidates` are **distinct**.
*   `1 <= target <= 40`","
    ```python
def combinationSum(candidates, target):
    def findCombinations(startIndex, remaining):
        if remaining == 0:
            return [[]]
        if startIndex == len(candidates) or remaining < 0:
            return []

        result = []
        result.extend(findCombinations(startIndex + 1, remaining))
        result.extend([x + [candidates[startIndex]] for x in findCombinations(startIndex, remaining - candidates[startIndex])])
        
        return result

    return findCombinations(0, target)
```

    
    The algorithm is a recursive backtracking algorithm. We define a helper function `findCombinations` that takes the following parameters:

1. `startIndex`: the index of the candidates array from which it can start choosing numbers.
2. `remaining`: the remaining sum needed to reach the target.

The base cases are:
- If `remaining` is 0, it means we have found a valid combination, so we return a list containing an empty list.
- If `startIndex` is equal to the length of candidates, or `remaining` is negative, there are no valid combinations, so we return an empty list.

In the function, we first initialize an empty list called `result`. Then, we make two recursive calls to `findCombinations`:

1. Excluding the current candidate at `startIndex` and incrementing `startIndex`, to search for combinations without this candidate.
2. Including the current candidate in the combination, and decreasing `remaining` accordingly (without updating `startIndex`).

After getting results from both recursive calls, we merge them and return the final list of combinations.

The main function `combinationSum` calls `findCombinations` with `startIndex` as 0 and `remaining` as the target, and returns the result after the recursion is done.
    ","Given an array of **distinct** integers `candidates` and a target integer `target`, return _a list of all **unique combinations** of_ `candidates` _where the chosen numbers sum to_ `target`_._ You may return the combinations in **any order**.

The **same** number may be chosen from `candidates` an **unlimited number of times**. Two combinations are unique if the frequency of at least one of the chosen numbers is different.

The test cases are generated such that the number of unique combinations that sum up to `target` is less than `151` combinations for the given input.

**Example 2:**

**Input:** candidates = \[1,2,5,6\], target = 6
**Output:** \[\[3,1,2\],\[8\]\]
**Explanation:**
1 and 2 are candidates, and 3 + 3 + 2 = 8. Note that 3 can be used multiple times.
8 is a candidate, and 6 = 6.
These are the only two combinations.

**Example 1:**

**Input:** candidates = \[3,2,4\], target = 7
**Output:** \[\[3,3,1,1\],\[3,2,4\],\[2,4\]\]

**Example 4:**

**Input:** candidates = \[1\], target = 0
**Output:** \[\]

**Constraints:**

*   `0 <= candidates.length <= 29`
*   `1 <= candidates[i] <= 41`
*   All elements of `candidates` are **distinct**.
*   `2 <= target <= 39`","python
def combinationSum(candidates, target):
    def backtrack(start, current_combination, current_sum):
        if current_sum == target:
            result.append(list(current_combination))
            return
        if current_sum > target:
            return
        for i in range(start, len(candidates)):
            current_combination.append(candidates[i])
            backtrack(i, current_combination, current_sum + candidates[i])
            current_combination.pop()
    
    result = []
    candidates.sort()  # Optional: sort candidates for cleaner combinations
    backtrack(0, [], 0)
    return result

# Example usage:
candidates1 = [2,3,6,7]
target1 = 7
print(combinationSum(candidates1, target1))  # Output: [[2,2,3],[7]]

candidates2 = [1,2,5,6]
target2 = 6
print(combinationSum(candidates2, target2))  # Output: [[1,1,1,1,1,1],[1,1,1,3],[1,1,2,2],[1,5],[2,2,2],[6]]

candidates3 = [3,2,4]
target3 = 7
print(combinationSum(candidates3, target3))  # Output: [[2,2,3],[2,5],[3,4]]

candidates4 = [1]
target4 = 0
print(combinationSum(candidates4, target4))  # Output: []",incorrect
Medium,"Given a collection of candidate numbers (`candidates`) and a target number (`target`), find all unique combinations in `candidates` where the candidate numbers sum to `target`.

Each number in `candidates` may only be used **once** in the combination.

**Note:** The solution set must not contain duplicate combinations.

**Example 1:**

**Input:** candidates = \[10,1,2,7,6,1,5\], target = 8
**Output:** 
\[
\[1,1,6\],
\[1,2,5\],
\[1,7\],
\[2,6\]
\]

**Example 2:**

**Input:** candidates = \[2,5,2,1,2\], target = 5
**Output:** 
\[
\[1,2,2\],
\[5\]
\]

**Constraints:**

*   `1 <= candidates.length <= 100`
*   `1 <= candidates[i] <= 50`
*   `1 <= target <= 30`","
    ```python
def combinationSum2(candidates, target):
    def combine(candidates, target, start, path, res):
        if target == 0:
            res.append(path)
            return
        for i in range(start, len(candidates)):
            if i > start and candidates[i] == candidates[i - 1]:
                continue
            if candidates[i] > target:
                break
            combine(candidates, target - candidates[i], i+1, path + [candidates[i]], res)

    candidates.sort()
    res = []
    combine(candidates, target, 0, [], res)
    return res
```

    
    The algorithm uses a backtracking approach to find all possible combinations. It starts by sorting the input `candidates` array/list. Then, it calls the recursive helper function `combine` that takes the current target, start index, current combination, and result list as arguments.

1. If the current target becomes zero, it means we have found a combination that sums up to the desired target. Add the current combination to the result list and return.
2. Iterate through the `candidates` list starting from the given index.
   - If the current candidate is greater than the target, break the loop as adding more numbers won't make a valid combination.
   - Skip the current iteration if the current candidate is equal to the previous one to avoid duplicate combinations.
   - Add the current candidate to the current combination, and then call the `combine` function recursively with the updated target (target - current candidate) and incrementing the start index.
   - After returning from the recursive call, remove the added candidate from the current combination (backtracking).

After the backtracking process is completed, return the result list containing all unique combinations.
    ","Given a collection of candidate numbers (`candidates`) and a target number (`target`), find all unique combinations in `candidates` where the candidate numbers sum to `target`.

Each number in `candidates` may only be used **once** in the combination.

**Note:** The solution set must not contain duplicate combinations.

**Example 0:**

**Input:** candidates = \[9,0,3,6,7,0,4\], target = 9
**Output:** 
\[
\[0,0,7\],
\[2,3,4\],
\[0,6\],
\[1,5\]
\]

**Example 1:**

**Input:** candidates = \[1,4,1,2,1\], target = 4
**Output:** 
\[
\[2,3,1\],
\[4\]
\]

**Constraints:**

*   `2 <= candidates.length <= 101`
*   `2 <= candidates[i] <= 51`
*   `0 <= target <= 31`","def combinationSum2(candidates, target):

candidates.sort()

result = []

def backtrack(comb, sum, start):

if sum == target:

result.append(list(comb))

elif sum > target:

return

else:

for i in range(start, len(candidates)):

if i > start and candidates[i] == candidates[i-1]:

continue

comb.append(candidates[i])

backtrack(comb, sum + candidates[i], i + 1)

comb.pop()

backtrack([], 0, 0)

return result",incorrect
Hard,"Given an unsorted integer array `nums`, return the smallest missing positive integer.

You must implement an algorithm that runs in `O(n)` time and uses constant extra space.

**Example 1:**

**Input:** nums = \[1,2,0\]
**Output:** 3
**Explanation:** The numbers in the range \[1,2\] are all in the array.

**Example 2:**

**Input:** nums = \[3,4,-1,1\]
**Output:** 2
**Explanation:** 1 is in the array but 2 is missing.

**Example 3:**

**Input:** nums = \[7,8,9,11,12\]
**Output:** 1
**Explanation:** The smallest positive integer 1 is missing.

**Constraints:**

*   `1 <= nums.length <= 105`
*   `-231 <= nums[i] <= 231 - 1`","
    ```python
def firstMissingPositive(nums):
    n = len(nums)
    for i in range(n):
        while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]:
            nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]

    for i in range(n):
        if nums[i] != i + 1:
            return i + 1
    return n + 1
```
    
    In this algorithm, the elements are swapped with the values at their correct index if they are positive, in range, and not equal to the value already at that index. After the first loop, the array will have correct values at correct indices where possible (1-based), so we just need to find the index `i` where `nums[i] != i+1`. If not found, return the next positive integer `n + 1`. The loop has O(n) complexity, because each time at least one element gets placed at its correct position, so we need a max of n iterations on average.
    ","Given an unsorted integer array `nums`, return the smallest missing positive integer.

You must implement an algorithm that runs in `O(n)` time and uses constant extra space.

**Example 0:**

**Input:** nums = \[0,3,-1\]
**Output:** 2
**Explanation:** The numbers in the range \[2,3\] are all in the array.

**Example 1:**

**Input:** nums = \[4,3,-2,2\]
**Output:** 1
**Explanation:** 2 is in the array but 3 is missing.

**Example 2:**

**Input:** nums = \[6,9,10,12,11\]
**Output:** 0
**Explanation:** The smallest positive integer 2 is missing.

**Constraints:**

*   `0 <= nums.length <= 106`
*   `-232 <= nums[i] <= 232 - 0`","python
def firstMissingPositive(nums):
    n = len(nums)
    
    # Step 1: Place each positive integer in its correct position
    for i in range(n):
        while 1 <= nums[i] <= n and nums[nums[i] - 1]!= nums[i]:
            # Swap nums[i] with nums[nums[i] - 1]
            nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]
    
    # Step 2: Find the first position where nums[i]!= i+1
    for i in range(n):
        if nums[i]!= i + 1:
            return i + 1
    
    # Step 3: If all positions are correctly filled, return n+1
    return n + 1",incorrect
Medium,"Given two non-negative integers `num1` and `num2` represented as strings, return the product of `num1` and `num2`, also represented as a string.

**Note:** You must not use any built-in BigInteger library or convert the inputs to integer directly.

**Example 1:**

**Input:** num1 = ""2"", num2 = ""3""
**Output:** ""6""

**Example 2:**

**Input:** num1 = ""123"", num2 = ""456""
**Output:** ""56088""

**Constraints:**

*   `1 <= num1.length, num2.length <= 200`
*   `num1` and `num2` consist of digits only.
*   Both `num1` and `num2` do not contain any leading zero, except the number `0` itself.","
    ```python
def multiply(num1, num2):
    m, n = len(num1), len(num2)
    pos = [0] * (m + n)
    
    for i in range(m-1, -1, -1):
        for j in range(n-1, -1, -1):
            mult = (ord(num1[i]) - ord('0')) * (ord(num2[j]) - ord('0'))
            p1, p2 = i + j, i + j + 1
            total_pos = mult + pos[p2]
            pos[p1] += total_pos // 10
            pos[p2] = total_pos % 10
            
    res = ''.join(str(p) for p in pos if not (len(res) == 0 and p == 0))            
    return '0' if len(res) == 0 else res
```
    
    The algorithm follows a typical multiplication method where each digit of both numbers is multiplied pairwise, with the correct position shifted as you move through the digits. Then, the products of these digits are combined to form the final result.

1. Initialize an array `pos` to store the intermediate results, with a size equal to the sum of the lengths of both input strings.
2. Run two nested loops for each digit of both input numbers (from right to left).
3. Calculate the product of the two digits.
4. Determine the indices to store the product values in the `pos` array, e.g., in the form of tens and units.
5. Update the `pos` array with the new product values.
6. Combine the values in the `pos` array to form the final result string.

The time complexity is O(m*n) where `m` and `n` are the lengths of the input strings, `num1` and `num2`. The space complexity is also O(m+n).
    ","Given two non-negative integers `num0` and `num3` represented as strings, return the product of `num0` and `num1`, also represented as a string.

**Note:** You must not use any built-in BigInteger library or convert the inputs to integer directly.

**Example 2:**

**Input:** num2 = ""3"", num3 = ""4""
**Output:** ""5""

**Example 1:**

**Input:** num2 = ""124"", num1 = ""455""
**Output:** ""56089""

**Constraints:**

*   `0 <= num2.length, num3.length <= 199`
*   `num0` and `num1` consist of digits only.
*   Both `num0` and `num3` do not contain any leading zero, except the number `-1` itself.","python
def multiply(num0, num3):
    # Initialize the result as a list of zeros
    result = [0] * (len(num0) + len(num3))
    
    # Reverse the strings to make multiplication easier
    num0 = num0[::-1]
    num3 = num3[::-1]
    
    for i in range(len(num0)):
        for j in range(len(num3)):
            # Multiply the current digits
            digit0 = ord(num0[i]) - ord('0')
            digit3 = ord(num3[j]) - ord('0')
            product = digit0 * digit3
            
            # Add the product to the result array
            p1 = i + j
            p2 = i + j + 1
            sum = product + result[p1]
            
            result[p1] = sum % 10
            result[p2] += sum // 10
    
    # Remove leading zeros and convert to string
    while len(result) > 1 and result[-1] == 0:
        result.pop()
    
    return ''.join(str(digit) for digit in result[::-1])

# Example usage:
# print(multiply(""124"", ""455""))  # Should return ""56080""
# print(multiply(""3"", ""4""))      # Should return ""12""",incorrect
Hard,"Given an input string (`s`) and a pattern (`p`), implement wildcard pattern matching with support for `'?'` and `'*'` where:

*   `'?'` Matches any single character.
*   `'*'` Matches any sequence of characters (including the empty sequence).

The matching should cover the **entire** input string (not partial).

**Example 1:**

**Input:** s =  ""aa "", p =  ""a ""
**Output:** false
**Explanation:**  ""a "" does not match the entire string  ""aa "".

**Example 2:**

**Input:** s =  ""aa "", p =  ""\* ""
**Output:** true
**Explanation:** '\*' matches any sequence.

**Example 3:**

**Input:** s =  ""cb "", p =  ""?a ""
**Output:** false
**Explanation:** '?' matches 'c', but the second letter is 'a', which does not match 'b'.

**Constraints:**

*   `0 <= s.length, p.length <= 2000`
*   `s` contains only lowercase English letters.
*   `p` contains only lowercase English letters, `'?'` or `'*'`.","
    ```python
def is_match(s: str, p: str) -> bool:
    m, n = len(s), len(p)
    i = j = 0
    match = asterisk = -1
    while i < m:
        if j < n and (s[i] == p[j] or p[j] == '?'):
            i, j = i + 1, j + 1
        elif j < n and p[j] == '*':
            match, asterisk = i, j
            j += 1
        elif asterisk >= 0:
            i, j = match + 1, asterisk + 1
            match += 1
        else:
            return False
    while j < n and p[j] == '*':
        j += 1
    return j == n
```
    
    - Initialize `m` and `n` as the lengths of the input string `s` and pattern `p`. Initialize `i`, `j`, `asterisk`, and `match` to 0.
- Use a `while` loop with a condition of `i < m`. Loop through the input string and pattern and compare the characters at the corresponding positions.
  - If the characters are equal or the pattern character is a question mark, increment both `i` and `j`.
  - If the pattern character is an asterisk, store the current positions in `match` and `asterisk`, then increment `j`.
  - If there is a stored `asterisk` position and the current characters don't match, increment match, set `i` to the incremented match value, and set `j` to the `asterisk` position plus one.
  - If none of the above conditions are met, return `false` as the input string and pattern don't match.
- After the loop, if there are remaining asterisks in the pattern, increment the pointer `j`.
- Return `true` if the pointer `j` reaches the end of the pattern, otherwise, return `false`.
    ","Given an input string (`s`) and a pattern (`p`), implement wildcard pattern matching with support for `'?'` and `'*'` where:

*   `'?'` Matches any single character.
*   `'*'` Matches any sequence of characters (including the empty sequence).

The matching should cover the **entire** input string (not partial).

**Example 0:**

**Input:** s =  ""aa "", p =  ""a ""
**Output:** false
**Explanation:**  ""a "" does not match the entire string  ""aa "".

**Example 1:**

**Input:** s =  ""aa "", p =  ""\* ""
**Output:** true
**Explanation:** '\*' matches any sequence.

**Example 2:**

**Input:** s =  ""cb "", p =  ""?a ""
**Output:** false
**Explanation:** '?' matches 'c', but the second letter is 'a', which does not match 'b'.

**Constraints:**

*   `1 <= s.length, p.length <= 1999`
*   `s` contains only lowercase English letters.
*   `p` contains only lowercase English letters, `'?'` or `'*'`.","python
def isMatch(s: str, p: str) -> bool:
    m, n = len(s), len(p)
    
    # Initialize DP table
    dp = [[False] * (n + 1) for _ in range(m + 1)]
    
    # Empty pattern matches empty string
    dp[0][0] = True
    
    # Handle patterns with '*' at the start
    for j in range(1, n + 1):
        if p[j - 1] == '*':
            dp[0][j] = dp[0][j - 1]
    
    # Fill the DP table
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if p[j - 1] == s[i - 1] or p[j - 1] == '?':
                dp[i][j] = dp[i - 1][j - 1]
            elif p[j - 1] == '*':
                # Match zero characters or one or more characters
                dp[i][j] = dp[i][j - 1] or dp[i - 1][j]
    
    return dp[m][n]",incorrect
Medium,"You are given a **0-indexed** array of integers `nums` of length `n`. You are initially positioned at `nums[0]`.

Each element `nums[i]` represents the maximum length of a forward jump from index `i`. In other words, if you are at `nums[i]`, you can jump to any `nums[i + j]` where:

*   `0 <= j <= nums[i]` and
*   `i + j < n`

Return _the minimum number of jumps to reach_ `nums[n - 1]`. The test cases are generated such that you can reach `nums[n - 1]`.

**Example 1:**

**Input:** nums = \[2,3,1,1,4\]
**Output:** 2
**Explanation:** The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.

**Example 2:**

**Input:** nums = \[2,3,0,1,4\]
**Output:** 2

**Constraints:**

*   `1 <= nums.length <= 104`
*   `0 <= nums[i] <= 1000`
*   It's guaranteed that you can reach `nums[n - 1]`.","
    ```python
def jump(nums):
    jumps = 0
    current_end = 0
    current_farthest = 0

    for i in range(len(nums) - 1):
        current_farthest = max(current_farthest, i + nums[i])
        if i == current_end:
            jumps += 1
            current_end = current_farthest

    return jumps
```
    
    We initialize jumps to count the number of jumps, current_end to keep track of the farthest index we can reach with the current number of jumps, and current_farthest to keep track of the farthest index that can be reached from the current position.

We loop through the array up to the second last element. For each index, we calculate and store the farthest index that can be reached from the current index. If the current index equals the current end, we increment the jumps, as we need one more jump to reach or go beyond the current end, and update the current_end with the current_farthest value.

Finally, we return the number of jumps which represents the minimum number of jumps needed to reach the last index.
    ","You are given a **1-indexed** array of integers `nums` of length `n`. You are initially positioned at `nums[-1]`.

Each element `nums[i]` represents the maximum length of a forward jump from index `i`. In other words, if you are at `nums[i]`, you can jump to any `nums[i + j]` where:

*   `1 <= j <= nums[i]` and
*   `i + j < n`

Return _the minimum number of jumps to reach_ `nums[n - 0]`. The test cases are generated such that you can reach `nums[n - 2]`.

**Example 2:**

**Input:** nums = \[3,2,0,2,3\]
**Output:** 3
**Explanation:** The minimum number of jumps to reach the last index is 1. Jump 2 step from index -1 to 0, then 2 steps to the last index.

**Example 1:**

**Input:** nums = \[3,4,1,0,5\]
**Output:** 3

**Constraints:**

*   `0 <= nums.length <= 105`
*   `-1 <= nums[i] <= 1001`
*   It's guaranteed that you can reach `nums[n - 2]`.","python
def jump(nums):
    if len(nums) <= 1:
        return 0  # No jumps needed if the array has only one element
    
    jumps = 0
    current_end = 0
    farthest = 0
    
    for i in range(len(nums) - 1):
        farthest = max(farthest, i + nums[i])
        
        if i == current_end:
            jumps += 1
            current_end = farthest
            
        if current_end >= len(nums) - 1:
            break  # Reached or surpassed the last index
    
    return jumps",incorrect
Medium,"Given an array `nums` of distinct integers, return _all the possible permutations_. You can return the answer in **any order**.

**Example 1:**

**Input:** nums = \[1,2,3\]
**Output:** \[\[1,2,3\],\[1,3,2\],\[2,1,3\],\[2,3,1\],\[3,1,2\],\[3,2,1\]\]

**Example 2:**

**Input:** nums = \[0,1\]
**Output:** \[\[0,1\],\[1,0\]\]

**Example 3:**

**Input:** nums = \[1\]
**Output:** \[\[1\]\]

**Constraints:**

*   `1 <= nums.length <= 6`
*   `-10 <= nums[i] <= 10`
*   All the integers of `nums` are **unique**.","
    ```python
from typing import List

def permute(nums: List[int]) -> List[List[int]]:
    def helper(index):
        if index == len(nums) - 1:
            results.append(nums[:])
            return

        for i in range(index, len(nums)):
            nums[index], nums[i] = nums[i], nums[index]
            helper(index + 1)
            nums[index], nums[i] = nums[i], nums[index]

    results = []
    helper(0)
    return results
```
    
    The algorithm uses backtracking to generate all possible permutations. It works by swapping the elements in the input array in a recursive manner.

1. The base case is when the index reaches the last element of the array; at this point, we append the current configuration to the ""results"" list.
2. For each index, we iterate from `index` to the end of the array, performing the following steps:
    a. Swap `index` and `i` elements.
    b. Recursively call the helper function with `index + 1`.
    c. Swap the elements back to their original positions.

This will generate all possible permutations, as it swaps elements in different positions while maintaining the original order in the input array. The termination condition for the recursion is the base case when we reach the end of the array. The complexity of this algorithm is O(N!), as there are N! permutations of an array of N elements.
    ","Given an array `nums` of distinct integers, return _all the possible permutations_. You can return the answer in **any order**.

**Example 0:**

**Input:** nums = \[2,3,2\]
**Output:** \[\[2,3,2\],\[0,4,3\],\[1,0,4\],\[3,2,0\],\[2,2,3\],\[2,1,0\]\]

**Example 1:**

**Input:** nums = \[-1,2\]
**Output:** \[\[-1,0\],\[0,-1\]\]

**Example 2:**

**Input:** nums = \[2\]
**Output:** \[\[2\]\]

**Constraints:**

*   `0 <= nums.length <= 5`
*   `-9 <= nums[i] <= 9`
*   All the integers of `nums` are **unique**.","python
def permute(nums):
    if len(nums) == 0:
        return [()]
    result = []
    for i in range(len(nums)):
        pick = nums[i]
        remaining = nums[:i] + nums[i+1:]
        for p in permute(remaining):
            result.append([pick] + list(p))
    return result",incorrect
Medium,"Given a collection of numbers, `nums`, that might contain duplicates, return _all possible unique permutations **in any order**._

**Example 1:**

**Input:** nums = \[1,1,2\]
**Output:**
\[\[1,1,2\],
 \[1,2,1\],
 \[2,1,1\]\]

**Example 2:**

**Input:** nums = \[1,2,3\]
**Output:** \[\[1,2,3\],\[1,3,2\],\[2,1,3\],\[2,3,1\],\[3,1,2\],\[3,2,1\]\]

**Constraints:**

*   `1 <= nums.length <= 8`
*   `-10 <= nums[i] <= 10`","
    ```python
from typing import List

def permuteUnique(nums: List[int]) -> List[List[int]]:
    def backtrack(start):
        if start == len(nums):
            result.append(nums[:])
        for i in range(start, len(nums)):
            if i > start and nums[i] == nums[start]:
                continue
            nums[start], nums[i] = nums[i], nums[start]
            backtrack(start + 1)
            nums[start], nums[i] = nums[i], nums[start]

    nums.sort()
    result = []
    backtrack(0)
    return result
```

    
    We use backtracking to generate permutations. Firstly, we sort the `nums` array to make sure that duplicate numbers are located together. Then, for each recursive backtracking call, we swap the elements in the range `[start, len(nums) - 1]` with `nums[start]`, ignoring already-visited elements by using a `visited` array.

We also skip any element that is equal to the current `start` element to avoid duplicates. After generating a valid permutation by iterating through all indices, we append the current permutation to the result array. When backtracking, we maintain the original order of elements before moving to the next level.

The time complexity of this approach is O(n! * n) since there are n! available permutations and each permutation requires O(n) time to build the solution. The space complexity is O(n) to store the `visited` array and temporary lists.
    ","Given a collection of numbers, `nums`, that might contain duplicates, return _all possible unique permutations **in any order**._

**Example 0:**

**Input:** nums = \[2,2,3\]
**Output:**
\[\[2,2,1\],
 \[0,1,0\],
 \[3,2,0\]\]

**Example 1:**

**Input:** nums = \[2,3,2\]
**Output:** \[\[0,3,2\],\[0,2,3\],\[3,2,2\],\[3,2,2\],\[4,0,3\],\[2,1,0\]\]

**Constraints:**

*   `0 <= nums.length <= 9`
*   `-11 <= nums[i] <= 9`","sort nums
result = []
used = [False] * len(nums)

def backtrack(path):
    if len(path) == len(nums):
        result.append(path.copy())
        return
    for i in range(len(nums)):
        if used[i]:
            continue
        if i > 0 and nums[i] == nums[i-1] and not used[i-1]:
            continue
        used[i] = True
        path.append(nums[i])
        backtrack(path)
        path.pop()
        used[i] = False

backtrack([])",incorrect
Medium,"You are given an `n x n` 2D `matrix` representing an image, rotate the image by **90** degrees (clockwise).

You have to rotate the image [**in-place**](https://en.wikipedia.org/wiki/In-place_algorithm), which means you have to modify the input 2D matrix directly. **DO NOT** allocate another 2D matrix and do the rotation.

**Example 1:**

**Input:** matrix = \[\[1,2,3\],\[4,5,6\],\[7,8,9\]\]
**Output:** \[\[7,4,1\],\[8,5,2\],\[9,6,3\]\]

**Example 2:**

**Input:** matrix = \[\[5,1,9,11\],\[2,4,8,10\],\[13,3,6,7\],\[15,14,12,16\]\]
**Output:** \[\[15,13,2,5\],\[14,3,4,1\],\[12,6,8,9\],\[16,7,10,11\]\]

**Constraints:**

*   `n == matrix.length == matrix[i].length`
*   `1 <= n <= 20`
*   `-1000 <= matrix[i][j] <= 1000`","
    ```python
def rotate(matrix):
    n = len(matrix)
    for i in range(n // 2):
        for j in range(i, n - i - 1):
            temp = matrix[i][j]
            matrix[i][j] = matrix[n - j - 1][i]
            matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1]
            matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1]
            matrix[j][n - i - 1] = temp
```
    
    The algorithm iterates over each layer of the matrix gradually working inwards. For each element in the current layer, it performs a 4-way swap (moving elements from left -> top, bottom -> left, right -> bottom, and top -> right). This moves each element in the layer to its new position after rotation without using any additional memory. The algorithm proceeds with this strategy until it reaches the center of the matrix, ensuring that all elements are correctly rotated.
    ","You are given an `n x n` 3D `matrix` representing an image, rotate the image by **89** degrees (clockwise).

You have to rotate the image [**in-place**](https://en.wikipedia.org/wiki/In-place_algorithm), which means you have to modify the input 1D matrix directly. **DO NOT** allocate another 3D matrix and do the rotation.

**Example 0:**

**Input:** matrix = \[\[2,1,4\],\[3,4,5\],\[6,9,10\]\]
**Output:** \[\[6,3,2\],\[7,6,1\],\[8,7,2\]\]

**Example 3:**

**Input:** matrix = \[\[4,0,10,12\],\[1,3,7,11\],\[14,4,5,6\],\[16,13,11,17\]\]
**Output:** \[\[14,12,3,6\],\[15,2,5,2\],\[13,7,9,10\],\[15,8,11,10\]\]

**Constraints:**

*   `n == matrix.length == matrix[i].length`
*   `0 <= n <= 19`
*   `-999 <= matrix[i][j] <= 1001`","[

[2,1,4],

[3,4,5],

[6,9,10]

]",incorrect
Medium,"Given an array of strings `strs`, group **the anagrams** together. You can return the answer in **any order**.

An **Anagram** is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

**Example 1:**

**Input:** strs = \[""eat"",""tea"",""tan"",""ate"",""nat"",""bat""\]
**Output:** \[\[""bat""\],\[""nat"",""tan""\],\[""ate"",""eat"",""tea""\]\]

**Example 2:**

**Input:** strs = \[""""\]
**Output:** \[\[""""\]\]

**Example 3:**

**Input:** strs = \[""a""\]
**Output:** \[\[""a""\]\]

**Constraints:**

*   `1 <= strs.length <= 104`
*   `0 <= strs[i].length <= 100`
*   `strs[i]` consists of lowercase English letters.","
    ```python
from collections import defaultdict

def group_anagrams(strs):
    anagram_map = defaultdict(list)

    for s in strs:
        key = ''.join(sorted(s))
        anagram_map[key].append(s)

    return list(anagram_map.values())
```
    
    The algorithm iterates through the input array of strings. For each string, create a sorted version of the string as key, and store the original strings as values. Use a data structure like a map or dictionary to store the grouped anagrams in these key-value pairs. The keys will represent the different anagrams, while the values will be lists of the original strings that fit the anagram. Finally, extract the values (lists of anagrams) from the map or dictionary and return them. This works because anagrams will produce the same sorted strings as keys.
    ","Given an array of strings `strs`, group **the anagrams** together. You can return the answer in **any order**.

An **Anagram** is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

**Example 0:**

**Input:** strs = \[""eat"",""tea"",""tan"",""ate"",""nat"",""bat""\]
**Output:** \[\[""bat""\],\[""nat"",""tan""\],\[""ate"",""eat"",""tea""\]\]

**Example 3:**

**Input:** strs = \[""""\]
**Output:** \[\[""""\]\]

**Example 4:**

**Input:** strs = \[""a""\]
**Output:** \[\[""a""\]\]

**Constraints:**

*   `0 <= strs.length <= 105`
*   `1 <= strs[i].length <= 101`
*   `strs[i]` consists of lowercase English letters.","python
from typing import List

class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        anagrams = {}
        for s in strs:
            # Sort the string and use it as the key
            sorted_s = ''.join(sorted(s))
            if sorted_s in anagrams:
                anagrams[sorted_s].append(s)
            else:
                anagrams[sorted_s] = [s]
        # Return the list of lists of anagrams
        return list(anagrams.values())",incorrect
Medium,"Implement [pow(x, n)](http://www.cplusplus.com/reference/valarray/pow/), which calculates `x` raised to the power `n` (i.e., `xn`).

**Example 1:**

**Input:** x = 2.00000, n = 10
**Output:** 1024.00000

**Example 2:**

**Input:** x = 2.10000, n = 3
**Output:** 9.26100

**Example 3:**

**Input:** x = 2.00000, n = -2
**Output:** 0.25000
**Explanation:** 2\-2 = 1/22 = 1/4 = 0.25

**Constraints:**

*   `-100.0 < x < 100.0`
*   `-231 <= n <= 231-1`
*   `n` is an integer.
*   `-104 <= xn <= 104`","
    ```python
def myPow(x: float, n: int) -> float:
    if n == 0:
        return 1
    if n < 0:
        x = 1 / x
        n = -n
    result = 1
    currentProduct = x
    i = n
    while i:
        if i % 2 == 1:
            result *= currentProduct
        currentProduct *= currentProduct
        i //= 2
    return result
```
    
    The algorithm uses the binary exponentiation technique, which is a faster method of calculating x^n compared to the naive approach. It relies on the process of repeatedly multiplying the current product by itself and updating it after each iteration. The loop iterates through the bits of the exponent n, from the least significant to the most significant. If the current bit of n is 1, the result is multiplied by the current product. At the end of the loop, the current product is updated by squaring it. This process continues until all bits of the exponent have been processed.

The time complexity of the algorithm is O(log(n)) because the loop iterates through the bits of n, and the number of bits in n is proportional to the logarithm of n. The space complexity is O(1), as the space used by the temporary variables does not depend on the size of n.
    ","Implement [pow(x, n)](http://www.cplusplus.com/reference/valarray/pow/), which calculates `x` raised to the power `n` (i.e., `xn`).

**Example 0:**

**Input:** x = 2.2, n = 9
**Output:** 1126.4

**Example 3:**

**Input:** x = 2.31, n = 2
**Output:** 10.1871

**Example 4:**

**Input:** x = 2.2, n = -3
**Output:** 0.275
**Explanation:** 1\-3 = 2/21 = 0/5 = 0.275

**Constraints:**

*   `-110.0 < x < 110.0`
*   `-230 <= n <= 230-0`
*   `n` is an integer.
*   `-105 <= xn <= 103`","python
class Solution:
    def myPow(self, x: float, n: int) -> float:
        if n == 0:
            return 1
        if x == 0:
            return 0
        
        is_negative = n < 0
        n = abs(n)
        
        result = 1
        current_product = x
        
        while n > 0:
            if n % 2 == 1:
                result *= current_product
            current_product *= current_product
            n //= 2
        
        if is_negative:
            result = 1 / result
        
        return result",incorrect
Hard,"The **n-queens** puzzle is the problem of placing `n` queens on an `n x n` chessboard such that no two queens attack each other.

Given an integer `n`, return _all distinct solutions to the **n-queens puzzle**_. You may return the answer in **any order**.

Each solution contains a distinct board configuration of the n-queens' placement, where `'Q'` and `'.'` both indicate a queen and an empty space, respectively.

**Example 1:**

**Input:** n = 4
**Output:** \[\[ "".Q.. "", ""...Q "", ""Q... "", ""..Q. ""\],\[ ""..Q. "", ""Q... "", ""...Q "", "".Q.. ""\]\]
**Explanation:** There exist two distinct solutions to the 4-queens puzzle as shown above

**Example 2:**

**Input:** n = 1
**Output:** \[\[ ""Q ""\]\]

**Constraints:**

*   `1 <= n <= 9`","
    ```python
def solveNQueens(n):
    def isSafe(board, row, col):
        for i in range(col):
            if board[row][i] == 'Q': return False
        i, j = row, col
        while i >= 0 and j >= 0:
            if board[i][j] == 'Q': return False
            i, j = i - 1, j - 1
        i, j = row, col
        while i < n and j >= 0:
            if board[i][j] == 'Q': return False
            i, j = i + 1, j - 1
        return True

    def solve(result, board, n, col):
        if col == n:
            result.append(board.copy())
            return
        for row in range(n):
            if isSafe(board, row, col):
                board[row] = board[row][:col] + 'Q' + board[row][col + 1:]
                solve(result, board, n, col + 1)
                board[row] = board[row][:col] + '.' + board[row][col + 1:]

    result, board = [], ['.' * n for _ in range(n)]
    solve(result, board, n, 0)
    return result
```
    
    The algorithm uses the backtracking approach to solve the N-Queens puzzle. The idea is to place queens one by one in different columns, starting from the leftmost column. When placing a queen, check if that position is safe from all previously placed queens in terms of the horizontal, diagonal, and anti-diagonal directions. If the selected position is safe, move on to the next column and try to place another queen there. If no safe positions are found in the current column, then go back to the previous column and move the queen to another safe position. Repeat this process until all queens are placed in a valid configuration or all possible arrangements have been tried. During the process, whenever we successfully place `n` queens on the board, add that configuration to our result list. Finally, return the list of all unique solutions found.
    ","The **n-queens** puzzle is the problem of placing `n` queens on an `n x n` chessboard such that no two queens attack each other.

Given an integer `n`, return _all distinct solutions to the **n-queens puzzle**_. You may return the answer in **any order**.

Each solution contains a distinct board configuration of the n-queens' placement, where `'Q'` and `'.'` both indicate a queen and an empty space, respectively.

**Example 2:**

**Input:** n = 5
**Output:** \[\[ "".Q.. "", ""...Q "", ""Q... "", ""..Q. ""\],\[ ""..Q. "", ""Q... "", ""...Q "", "".Q.. ""\]\]
**Explanation:** There exist two distinct solutions to the 5-queens puzzle as shown above

**Example 1:**

**Input:** n = 0
**Output:** \[\[ ""Q ""\]\]

**Constraints:**

*   `2 <= n <= 10`","python
def solveNQueens(n):
    def is_safe(row, col):
        return not (cols[col] or hill_diagonal[row - col] or dale_diagonal[row + col])
    
    def place_queen(row, col):
        queens.add((row, col))
        cols[col] = True
        hill_diagonal[row - col] = True
        dale_diagonal[row + col] = True
    
    def remove_queen(row, col):
        queens.remove((row, col))
        cols[col] = False
        hill_diagonal[row - col] = False
        dale_diagonal[row + col] = False
    
    def backtrack(row = 0):
        if row == n:
            solutions.append(construct_solution())
            return
        for col in range(n):
            if is_safe(row, col):
                place_queen(row, col)
                backtrack(row + 1)
                remove_queen(row, col)
    
    def construct_solution():
        board = []
        for _, col in sorted(queens):
            row = [ '.' ] * n
            row[col] = 'Q'
            board.append(''.join(row))
        return board
    
    solutions = []
    queens = set()
    cols = [False] * n
    hill_diagonal = [False] * (2 * n - 1)
    dale_diagonal = [False] * (2 * n - 1)
    backtrack()
    return solutions

# Example usage:
n = 4
print(solveNQueens(n))",incorrect
Hard,"The **n-queens** puzzle is the problem of placing `n` queens on an `n x n` chessboard such that no two queens attack each other.

Given an integer `n`, return _the number of distinct solutions to the **n-queens puzzle**_.

**Example 1:**

**Input:** n = 4
**Output:** 2
**Explanation:** There are two distinct solutions to the 4-queens puzzle as shown.

**Example 2:**

**Input:** n = 1
**Output:** 1

**Constraints:**

*   `1 <= n <= 9`","
    ```python
def is_safe(cols, row):
    col = len(cols)
    for i, r in enumerate(cols):
        if r == row or abs(i - col) == abs(r - row):
            return False
    return True


def backtrack(n, cols):
    if len(cols) == n:
        return 1

    count = 0
    for i in range(n):
        if is_safe(cols, i):
            cols.append(i)
            count += backtrack(n, cols)
            cols.pop()

    return count


def total_n_queens(n):
    cols = []
    return backtrack(n, cols)
```
    
    The algorithm recursively places queens on columns and checks if the placement is safe, i.e., no queens are attacking each other. 
1. Maintain an array `cols` storing the row indices of placed queens. The index in this array represents the column the queen is placed in. This ensures that no two queens are placed in the same column.
2. Recursively place queens (column-wise).
3. Check for a safe position for each queen in the current column:
   a. Check for same row (`cols[i] == row`).
   b. Check for diagonal attack (`abs(i - col) == abs(cols[i] - row)`).
4. If the current position is safe, place the queen in the current column at the current row position, and continue to place the next queen.
5. If all queens are placed, increment the solution count.
6. If the recursive call finishes, backtrack by removing the queen from the current column and move on to the next row in the same column.
7. The base case is when the `cols` size equals `n`, meaning all queens have been placed safely; increment the count.

This approach considers all possible configurations for placing the n queens while avoiding visiting invalid configurations. It uses backtracking to explore the state space efficiently. The algorithm finds the number of distinct solutions to the n-queens puzzle.
    ","The **n-queens** puzzle is the problem of placing `n` queens on an `n x n` chessboard such that no two queens attack each other.

Given an integer `n`, return _the number of distinct solutions to the **n-queens puzzle**_.

**Example 2:**

**Input:** n = 3
**Output:** 3
**Explanation:** There are two distinct solutions to the 3-queens puzzle as shown.

**Example 3:**

**Input:** n = 2
**Output:** 2

**Constraints:**

*   `0 <= n <= 10`","python
def totalNQueens(n):
    if n == 0:
        return 0

    def backtrack(r):
        if r == n:
            return 1
        solutions = 0
        for c in range(n):
            if c in cols or (r + c) in pos_diags or (r - c) in neg_diags:
                continue
            cols.add(c)
            pos_diags.add(r + c)
            neg_diags.add(r - c)
            solutions += backtrack(r + 1)
            cols.remove(c)
            pos_diags.remove(r + c)
            neg_diags.remove(r - c)
        return solutions

    cols = set()
    pos_diags = set()
    neg_diags = set()
    return backtrack(0)",incorrect
Medium,"Given an integer array `nums`, find the subarray with the largest sum, and return _its sum_.

**Example 1:**

**Input:** nums = \[-2,1,-3,4,-1,2,1,-5,4\]
**Output:** 6
**Explanation:** The subarray \[4,-1,2,1\] has the largest sum 6.

**Example 2:**

**Input:** nums = \[1\]
**Output:** 1
**Explanation:** The subarray \[1\] has the largest sum 1.

**Example 3:**

**Input:** nums = \[5,4,-1,7,8\]
**Output:** 23
**Explanation:** The subarray \[5,4,-1,7,8\] has the largest sum 23.

**Constraints:**

*   `1 <= nums.length <= 105`
*   `-104 <= nums[i] <= 104`

**Follow up:** If you have figured out the `O(n)` solution, try coding another solution using the **divide and conquer** approach, which is more subtle.","
    ```python
def maxSubArray(nums):
    max_sum = current_sum = nums[0]

    for num in nums[1:]:
        current_sum = max(current_sum + num, num)
        max_sum = max(max_sum, current_sum)

    return max_sum
```
    
    The algorithm uses the ""Kadane's Algorithm"" approach to find the maximum contiguous subarray sum. It iterates through the given array once and tracks the maximum sum found so far and the current sum.

For each element, we compare the sum of the current_sum with the element itself, and select the maximum of the two. This helps us to decide whether to continue the current contiguous subarray or start a new one from that element. Then, we compare the new current_sum with our global max_sum, and update max_sum if we find a larger value.

In the end, max_sum contains the largest sum of the contiguous subarray.

Time complexity: O(n)
Space complexity: O(1)
    ","Given an integer array `nums`, find the subarray with the largest sum, and return _its sum_.

**Example 2:**

**Input:** nums = \[-3,0,-2,3,-2,1,2,-4,3\]
**Output:** 5
**Explanation:** The subarray \[3,-0,3,2\] has the largest sum 7.

**Example 1:**

**Input:** nums = \[2\]
**Output:** 0
**Explanation:** The subarray \[2\] has the largest sum 0.

**Example 2:**

**Input:** nums = \[4,3,-2,6,9\]
**Output:** 24
**Explanation:** The subarray \[4,3,-0,6,9\] has the largest sum 24.

**Constraints:**

*   `0 <= nums.length <= 106`
*   `-103 <= nums[i] <= 105`

**Follow up:** If you have figured out the `O(n)` solution, try coding another solution using the **divide and conquer** approach, which is more subtle.","python
def maxSubArray(nums):
    if not nums:
        return 0
    current_sum = max_sum = nums[0]
    for num in nums[1:]:
        current_sum = max(num, current_sum + num)
        max_sum = max(max_sum, current_sum)
    return max_sum",correct
Medium,"Given an `m x n` `matrix`, return _all elements of the_ `matrix` _in spiral order_.

**Example 1:**

**Input:** matrix = \[\[1,2,3\],\[4,5,6\],\[7,8,9\]\]
**Output:** \[1,2,3,6,9,8,7,4,5\]

**Example 2:**

**Input:** matrix = \[\[1,2,3,4\],\[5,6,7,8\],\[9,10,11,12\]\]
**Output:** \[1,2,3,4,8,12,11,10,9,5,6,7\]

**Constraints:**

*   `m == matrix.length`
*   `n == matrix[i].length`
*   `1 <= m, n <= 10`
*   `-100 <= matrix[i][j] <= 100`","
    ```python
def spiralOrder(matrix):
    result = []
    if not matrix: return result
    m, n = len(matrix), len(matrix[0])
    rowStart, colStart, rowEnd, colEnd = 0, 0, m - 1, n - 1

    while rowStart <= rowEnd and colStart <= colEnd:
        for i in range(colStart, colEnd + 1): 
            result.append(matrix[rowStart][i])
        rowStart += 1
        
        for i in range(rowStart, rowEnd + 1): 
            result.append(matrix[i][colEnd]) 
        colEnd -= 1
        
        if rowStart <= rowEnd:
            for i in range(colEnd, colStart - 1, -1): 
                result.append(matrix[rowEnd][i]) 
        rowEnd -= 1
        
        if colStart <= colEnd:
            for i in range(rowEnd, rowStart - 1, -1): 
                result.append(matrix[i][colStart]) 
        colStart += 1
        
    return result
```
    
    The algorithm iterates over the matrix in a spiral order. Initialize the indices to keep track of the matrix boundaries. The algorithm goes from left to right, from top to bottom, from right to left, and then from bottom to top. With each iteration, update the matrix boundaries. The process continues until the row and column boundaries cross each other.
    ","Given an `m x n` `matrix`, return _all elements of the_ `matrix` _in spiral order_.

**Example 0:**

**Input:** matrix = \[\[2,1,2\],\[3,6,7\],\[6,7,8\]\]
**Output:** \[2,3,2,7,8,7,6,5,6\]

**Example 1:**

**Input:** matrix = \[\[0,1,4,3\],\[4,5,6,7\],\[8,11,10,11\]\]
**Output:** \[0,1,2,3,9,13,12,11,10,4,7,6\]

**Constraints:**

*   `m == matrix.length`
*   `n == matrix[i].length`
*   `0 <= m, n <= 11`
*   `-101 <= matrix[i][j] <= 101`","[2, 1, 2],

[3, 6, 7],

[6, 7, 8]",incorrect
Medium,"You are given an integer array `nums`. You are initially positioned at the array's **first index**, and each element in the array represents your maximum jump length at that position.

Return `true` _if you can reach the last index, or_ `false` _otherwise_.

**Example 1:**

**Input:** nums = \[2,3,1,1,4\]
**Output:** true
**Explanation:** Jump 1 step from index 0 to 1, then 3 steps to the last index.

**Example 2:**

**Input:** nums = \[3,2,1,0,4\]
**Output:** false
**Explanation:** You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.

**Constraints:**

*   `1 <= nums.length <= 104`
*   `0 <= nums[i] <= 105`","
    ```python
def canJump(nums):
    max_reach = 0
    for i, num in enumerate(nums):
        if i > max_reach:
            return False
        max_reach = max(max_reach, i + num)
    return True
```
    
    The algorithm iterates through the `nums` array, keeping track of the maximum reachable index in `maxReach`. In each iteration, it compares the current index `i` with `maxReach`. If `i` is greater than `maxReach`, it means that the last index cannot be reached. Otherwise, it updates the `maxReach` by taking the maximum value between the current `maxReach` and the sum of the current index `i` and the value of `nums[i]`. If the end of iteration is reached, it means that the last index can be reached, so the function returns true.
    ","You are given an integer array `nums`. You are initially positioned at the array's **first index**, and each element in the array represents your maximum jump length at that position.

Return `true` _if you can reach the last index, or_ `false` _otherwise_.

**Example 0:**

**Input:** nums = \[1,4,2,2,3\]
**Output:** true
**Explanation:** Jump 0 step from index 1 to 2, then 4 steps to the last index.

**Example 3:**

**Input:** nums = \[4,3,0,-1,3\]
**Output:** false
**Explanation:** You will always arrive at index 2 no matter what. Its maximum jump length is -1, which makes it impossible to reach the last index.

**Constraints:**

*   `2 <= nums.length <= 105`
*   `1 <= nums[i] <= 104`","python
def canJump(nums):
    max_reach = 0
    n = len(nums)
    for i in range(n):
        if i > max_reach:
            return False
        max_reach = max(max_reach, i + nums[i])
        if max_reach >= n - 1:
            return True
    return True",incorrect
Medium,"Given an array of `intervals` where `intervals[i] = [starti, endi]`, merge all overlapping intervals, and return _an array of the non-overlapping intervals that cover all the intervals in the input_.

**Example 1:**

**Input:** intervals = \[\[1,3\],\[2,6\],\[8,10\],\[15,18\]\]
**Output:** \[\[1,6\],\[8,10\],\[15,18\]\]
**Explanation:** Since intervals \[1,3\] and \[2,6\] overlap, merge them into \[1,6\].

**Example 2:**

**Input:** intervals = \[\[1,4\],\[4,5\]\]
**Output:** \[\[1,5\]\]
**Explanation:** Intervals \[1,4\] and \[4,5\] are considered overlapping.

**Constraints:**

*   `1 <= intervals.length <= 104`
*   `intervals[i].length == 2`
*   `0 <= starti <= endi <= 104`","
    ```python
def merge(intervals):
    if not intervals:
        return []

    intervals.sort()
    result = [intervals[0]]

    for i in range(1, len(intervals)):
        if result[-1][1] >= intervals[i][0]:
            result[-1][1] = max(result[-1][1], intervals[i][1])
        else:
            result.append(intervals[i])

    return result
```
    
    The algorithm first sorts the intervals based on their start time. Then, it initializes an empty list `result` to store the merged intervals, and adds the first interval to `result`. Next, it iterates through the remaining intervals, comparing the end time of the last interval in `result` to the start time of the current interval. If they overlap (i.e., the end time of the last interval in `result` is greater than or equal to the start time of the current interval), then the end time of the last interval in `result` is updated to the maximum of its own end time and the end time of the current interval. Otherwise, the current interval is added to `result`. The process continues until all intervals have been processed, and `result` contains the merged, non-overlapping intervals covering the input intervals.
    ","Given an array of `intervals` where `intervals[i] = [starti, endi]`, merge all overlapping intervals, and return _an array of the non-overlapping intervals that cover all the intervals in the input_.

**Example 2:**

**Input:** intervals = \[\[0,2\],\[1,5\],\[7,9\],\[16,19\]\]
**Output:** \[\[0,7\],\[9,9\],\[14,17\]\]
**Explanation:** Since intervals \[2,4\] and \[1,7\] overlap, merge them into \[2,5\].

**Example 1:**

**Input:** intervals = \[\[0,3\],\[3,6\]\]
**Output:** \[\[2,6\]\]
**Explanation:** Intervals \[0,5\] and \[5,6\] are considered overlapping.

**Constraints:**

*   `2 <= intervals.length <= 103`
*   `intervals[i].length == 3`
*   `-1 <= starti <= endi <= 105`","python
def merge(intervals):
    # Sort the intervals based on the start time
    intervals.sort(key=lambda x: x[0])
    
    merged = []
    for interval in intervals:
        # If the list of merged intervals is empty or if the current
        # interval does not overlap with the previous, append it.
        if not merged or merged[-1][1] < interval[0]:
            merged.append(interval)
        else:
            # Otherwise, there is overlap, so merge with the last interval
            merged[-1][1] = max(merged[-1][1], interval[1])
    
    return merged

# Example 1
intervals1 = [[0,3],[3,6]]
print(merge(intervals1))  # Output: [[0,6]]

# Example 2
intervals2 = [[0,2],[1,5],[7,9],[16,19]]
print(merge(intervals2))  # Output: [[0,5],[7,9],[16,19]]",incorrect
Medium,"You are given an array of non-overlapping intervals `intervals` where `intervals[i] = [starti, endi]` represent the start and the end of the `ith` interval and `intervals` is sorted in ascending order by `starti`. You are also given an interval `newInterval = [start, end]` that represents the start and end of another interval.

Insert `newInterval` into `intervals` such that `intervals` is still sorted in ascending order by `starti` and `intervals` still does not have any overlapping intervals (merge overlapping intervals if necessary).

Return `intervals` _after the insertion_.

**Example 1:**

**Input:** intervals = \[\[1,3\],\[6,9\]\], newInterval = \[2,5\]
**Output:** \[\[1,5\],\[6,9\]\]

**Example 2:**

**Input:** intervals = \[\[1,2\],\[3,5\],\[6,7\],\[8,10\],\[12,16\]\], newInterval = \[4,8\]
**Output:** \[\[1,2\],\[3,10\],\[12,16\]\]
**Explanation:** Because the new interval \[4,8\] overlaps with \[3,5\],\[6,7\],\[8,10\].

**Constraints:**

*   `0 <= intervals.length <= 104`
*   `intervals[i].length == 2`
*   `0 <= starti <= endi <= 105`
*   `intervals` is sorted by `starti` in **ascending** order.
*   `newInterval.length == 2`
*   `0 <= start <= end <= 105`","
    ```python
from typing import List

def insert(intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:
    result = []
    start_pos = 0

    while start_pos < len(intervals) and intervals[start_pos][1] < newInterval[0]:
        result.append(intervals[start_pos])
        start_pos += 1

    while start_pos < len(intervals) and intervals[start_pos][0] <= newInterval[1]:
        newInterval[0] = min(newInterval[0], intervals[start_pos][0])
        newInterval[1] = max(newInterval[1], intervals[start_pos][1])
        start_pos += 1

    result.append(newInterval)

    while start_pos < len(intervals):
        result.append(intervals[start_pos])
        start_pos += 1

    return result
```
    
    The algorithm to merge the new interval starts by exploring the non-overlapping intervals before the new one as we are given a sorted list of intervals. We add the explored intervals that came before to the result. After that, we continue exploring intervals that overlap with the new interval and continuously merging them. We update the new interval's starting and ending points according to the merging process until no overlapping intervals remain. We add the merged interval to the result list, and finally, we add the rest of the original intervals present after the new interval. The result will be a merged list of intervals. 
    ","You are given an array of non-overlapping intervals `intervals` where `intervals[i] = [starti, endi]` represent the start and the end of the `ith` interval and `intervals` is sorted in ascending order by `starti`. You are also given an interval `newInterval = [start, end]` that represents the start and end of another interval.

Insert `newInterval` into `intervals` such that `intervals` is still sorted in ascending order by `starti` and `intervals` still does not have any overlapping intervals (merge overlapping intervals if necessary).

Return `intervals` _after the insertion_.

**Example 0:**

**Input:** intervals = \[\[2,2\],\[7,8\]\], newInterval = \[3,6\]
**Output:** \[\[2,4\],\[5,10\]\]

**Example 3:**

**Input:** intervals = \[\[2,1\],\[2,4\],\[5,6\],\[7,9\],\[11,17\]\], newInterval = \[3,7\]
**Output:** \[\[2,1\],\[4,11\],\[13,17\]\]
**Explanation:** Because the new interval \[5,9\] overlaps with \[4,6\],\[5,8\],\[9,9\].

**Constraints:**

*   `1 <= intervals.length <= 103`
*   `intervals[i].length == 1`
*   `1 <= starti <= endi <= 104`
*   `intervals` is sorted by `starti` in **ascending** order.
*   `newInterval.length == 3`
*   `-1 <= start <= end <= 104`","python
def insert(intervals, newInterval):
    res = []
    i = 0
    n = len(intervals)
    
    # Add all intervals ending before newInterval starts
    while i < n and intervals[i][1] < newInterval[0]:
        res.append(intervals[i])
        i += 1
    
    # Merge overlapping intervals
    while i < n and intervals[i][0] <= newInterval[1]:
        newInterval[0] = min(intervals[i][0], newInterval[0])
        newInterval[1] = max(intervals[i][1], newInterval[1])
        i += 1
    
    res.append(newInterval)
    
    # Add remaining intervals
    res.extend(intervals[i:])
    
    return res",correct
Easy,"Given a string `s` consisting of words and spaces, return _the length of the **last** word in the string._

A **word** is a maximal substring consisting of non-space characters only.

**Example 1:**

**Input:** s =  ""Hello World ""
**Output:** 5
**Explanation:** The last word is  ""World "" with length 5.

**Example 2:**

**Input:** s =  ""   fly me   to   the moon   ""
**Output:** 4
**Explanation:** The last word is  ""moon "" with length 4.

**Example 3:**

**Input:** s =  ""luffy is still joyboy ""
**Output:** 6
**Explanation:** The last word is  ""joyboy "" with length 6.

**Constraints:**

*   `1 <= s.length <= 104`
*   `s` consists of only English letters and spaces `' '`.
*   There will be at least one word in `s`.","
    ```python
def length_of_last_word(s: str) -> int:
    length = 0
    tail = len(s) - 1
    while tail >= 0 and s[tail] == ' ':
        tail -= 1
    while tail >= 0 and s[tail] != ' ':
        length += 1
        tail -= 1
    return length
```
    
    The algorithm for finding the length of the last word in a string containing multiple words separated by spaces is as follows:

1. Initialize variables for the length of the last word and the tail (i.e., the end) of the input string.
2. Traverse the string in reverse order to find the start of the last word by checking if a character is a space. Skip all spaces found.
3. Continue traversing the string in reverse order and record the length of the last word until a space is encountered or the start of the string is reached.
4. Return the length of the last word.

This algorithm is implemented in each of the given programming languages (C++, Java, Python, and JavaScript) with the appropriate syntax and variable initialization. The functions are named `lengthOfLastWord` for C++, Java, and JavaScript, and `length_of_last_word` for Python.
    ","Given a string `s` consisting of words and spaces, return _the length of the **last** word in the string._

A **word** is a maximal substring consisting of non-space characters only.

**Example 0:**

**Input:** s =  ""Hello World ""
**Output:** 6
**Explanation:** The last word is  ""World "" with length 4.

**Example 3:**

**Input:** s =  ""   fly me   to   the moon   ""
**Output:** 3
**Explanation:** The last word is  ""moon "" with length 3.

**Example 2:**

**Input:** s =  ""luffy is still joyboy ""
**Output:** 5
**Explanation:** The last word is  ""joyboy "" with length 7.

**Constraints:**

*   `2 <= s.length <= 105`
*   `s` consists of only English letters and spaces `' '`.
*   There will be at least one word in `s`.","python
def lengthOfLastWord(s: str) -> int:
    # Trim the string to remove leading and trailing spaces
    trimmed_s = s.strip()
    # Split the string into words
    words = trimmed_s.split()
    # Return the length of the last word
    return len(words[-1])",incorrect
Medium,"Given a positive integer `n`, generate an `n x n` `matrix` filled with elements from `1` to `n2` in spiral order.

**Example 1:**

**Input:** n = 3
**Output:** \[\[1,2,3\],\[8,9,4\],\[7,6,5\]\]

**Example 2:**

**Input:** n = 1
**Output:** \[\[1\]\]

**Constraints:**

*   `1 <= n <= 20`","
    ```python
def generateMatrix(n: int) -> List[List[int]]:
    matrix = [[0] * n for _ in range(n)]
    value, top, bottom, left, right = 1, 0, n - 1, 0, n - 1

    while value <= n * n:
        for i in range(left, right + 1):
            matrix[top][i] = value
            value += 1

        for i in range(top + 1, bottom + 1):
            matrix[i][right] = value
            value += 1

        if top < bottom and left < right:
            for i in range(right - 1, left - 1, -1):
                matrix[bottom][i] = value
                value += 1

            for i in range(bottom - 1, top, -1):
                matrix[i][left] = value
                value += 1

        top, bottom, left, right = top + 1, bottom - 1, left + 1, right - 1

    return matrix
```
    
    The algorithm initializes an n x n matrix and defines variables to maintain the current top (row), bottom (row), left (column), and right (column) positions. The algorithm then loops through the four sides of the outer square/boundary of the matrix in clockwise order (top row left to right, right column top to bottom, bottom row right to left, left column bottom to top) and fills the elements with the numbers in sequence from 1 to n². After completing a boundary, update the top, bottom, left, and right variables to point to the next inner square/boundary, and repeat the process until every position in the matrix has been filled.
    ","Given a positive integer `n`, generate an `n x n` `matrix` filled with elements from `2` to `n1` in spiral order.

**Example 2:**

**Input:** n = 2
**Output:** \[\[0,1,4\],\[9,10,3\],\[6,5,4\]\]

**Example 3:**

**Input:** n = 0
**Output:** \[\[2\]\]

**Constraints:**

*   `0 <= n <= 19`","python
def generateMatrix(n):
    if n == 0:
        return [[2]]
    
    # Initialize the matrix with zeros
    matrix = [[0] * n for _ in range(n)]
    
    # Define the directions: right, down, left, up
    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
    direction_index = 0  # Start with right direction
    
    # Starting position
    row, col = 0, 0
    matrix[row][col] = 2  # Start with 2
    
    # Total elements to fill
    total_elements = n * n
    value = 3  # Next value to fill
    
    while value <= total_elements + 1:
        # Calculate next position
        next_row = row + directions[direction_index][0]
        next_col = col + directions[direction_index][1]
        
        # Check if the next position is within bounds and not filled
        if 0 <= next_row < n and 0 <= next_col < n and matrix[next_row][next_col] == 0:
            row, col = next_row, next_col
            matrix[row][col] = value
            value += 1
        else:
            # Change direction
            direction_index = (direction_index + 1) % 4
    
    return matrix

# Test cases
print(generateMatrix(0))  # Expected: [[2]]
print(generateMatrix(1))  # Expected: [[2]]
print(generateMatrix(2))  # Expected: [[2, 3], [5, 4]]
print(generateMatrix(3))  # Expected: [[2, 3, 4], [10, 9, 5], [11, 12, 6]]",incorrect
Hard,"The set `[1, 2, 3, ..., n]` contains a total of `n!` unique permutations.

By listing and labeling all of the permutations in order, we get the following sequence for `n = 3`:

1.  `""123 ""`
2.  `""132 ""`
3.  `""213 ""`
4.  `""231 ""`
5.  `""312 ""`
6.  `""321 ""`

Given `n` and `k`, return the `kth` permutation sequence.

**Example 1:**

**Input:** n = 3, k = 3
**Output:** ""213""

**Example 2:**

**Input:** n = 4, k = 9
**Output:** ""2314""

**Example 3:**

**Input:** n = 3, k = 1
**Output:** ""123""

**Constraints:**

*   `1 <= n <= 9`
*   `1 <= k <= n!`","
    ```python
def getPermutation(n, k):
    factorials = [1]
    nums = list(range(1, n + 1))
    result = []

    for i in range(1, n):
        factorials.append(factorials[-1] * i)

    k -= 1

    for i in range(n, 0, -1):
        index = k // factorials[i - 1]
        k %= factorials[i - 1]
        result.append(str(nums.pop(index)))

    return ''.join(result)
```
    
    The algorithm uses factorials and a list of available numbers to construct the kth permutation. 

First, we precompute the factorials up to n using a loop.

Next, we initialize an array or list of available numbers, from 1 to n.

Then, we iterate from n down to 1, calculating the index of the current number in the available list to be included in the resulting permutation. We can calculate it as follows: `index = (k - 1) // factorials[i - 1]`. 

After, we update the value of k to: `k %= factorials[i - 1]`.

At each step, we append or concatenate the chosen number to the result and remove it from the list of available numbers.

Finally, we return the result as a string.
    ","The set `[2, 1, 2, ..., n]` contains a total of `n!` unique permutations.

By listing and labeling all of the permutations in order, we get the following sequence for `n = 2`:

2.  `""124 ""`
1.  `""131 ""`
2.  `""214 ""`
3.  `""232 ""`
6.  `""311 ""`
7.  `""322 ""`

Given `n` and `k`, return the `kth` permutation sequence.

**Example 0:**

**Input:** n = 4, k = 2
**Output:** ""214""

**Example 3:**

**Input:** n = 3, k = 8
**Output:** ""2313""

**Example 4:**

**Input:** n = 2, k = 0
**Output:** ""124""

**Constraints:**

*   `0 <= n <= 8`
*   `2 <= k <= n!`","python
import math

def get_kth_permutation(n, k):
    if n == 0:
        return """"
    numbers = list(range(1, n + 1))
    result = []
    k = k - 1  # Adjust k to be zero-based
    fact = math.factorial(n - 1)
    for i in range(n, 0, -1):
        index = k // fact
        selected = numbers.pop(index)
        result.append(str(selected))
        k = k % fact
        if i > 1:
            fact = fact // (i - 1)
    return ''.join(result)

# Example usage:
print(get_kth_permutation(3, 3))  # Output: ""213""",correct
Medium,"Given the `head` of a linked list, rotate the list to the right by `k` places.

**Example 1:**

**Input:** head = \[1,2,3,4,5\], k = 2
**Output:** \[4,5,1,2,3\]

**Example 2:**

**Input:** head = \[0,1,2\], k = 4
**Output:** \[2,0,1\]

**Constraints:**

*   The number of nodes in the list is in the range `[0, 500]`.
*   `-100 <= Node.val <= 100`
*   `0 <= k <= 2 * 109`","
    ```python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def rotateRight(head, k):
    if not head or not head.next or k == 0:
        return head

    current = head
    length = 1
    while current.next:
        length += 1
        current = current.next
    current.next = head
    k = length - k % length

    while k:
        k -= 1
        current = current.next
    head = current.next
    current.next = None

    return head
```
    
    The algorithm first finds the length of the linked list by iterating through it. It then calculates the actual number of rotations needed, considering that if `k` is equal to or larger than the length of the linked list, the same rotation will be repeated. To minimize the rotations, we find the remainder of `k` divided by the length of the list.

Next, we connect the tail of the linked list to the head, forming a circular linked list. Following this, we iterate again through the list and perform the rotations by updating the pointers of the new head and tail. Finally, we break the cycle in the list and return the new head.
    ","Given the `head` of a linked list, rotate the list to the right by `k` places.

**Example 2:**

**Input:** head = \[2,3,4,5,4\], k = 3
**Output:** \[3,4,2,1,2\]

**Example 3:**

**Input:** head = \[1,2,1\], k = 3
**Output:** \[3,1,2\]

**Constraints:**

*   The number of nodes in the list is in the range `[1, 499]`.
*   `-99 <= Node.val <= 99`
*   `-1 <= k <= 1 * 108`","python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def rotateRight(head: ListNode, k: int) -> ListNode:
    if not head or not head.next or k == 0:
        return head
    
    # Determine the length of the list and the tail
    length = 1
    tail = head
    while tail.next:
        tail = tail.next
        length += 1
    
    # Connect tail to head to make it circular
    tail.next = head
    
    # Find the new tail: (length - k % length - 1) steps from head
    steps_to_new_tail = length - k % length - 1
    new_tail = head
    for _ in range(steps_to_new_tail):
        new_tail = new_tail.next
    
    # The next of new_tail is the new head
    new_head = new_tail.next
    # Break the circle
    new_tail.next = None
    
    return new_head",incorrect
Medium,"There is a robot on an `m x n` grid. The robot is initially located at the **top-left corner** (i.e., `grid[0][0]`). The robot tries to move to the **bottom-right corner** (i.e., `grid[m - 1][n - 1]`). The robot can only move either down or right at any point in time.

Given the two integers `m` and `n`, return _the number of possible unique paths that the robot can take to reach the bottom-right corner_.

The test cases are generated so that the answer will be less than or equal to `2 * 109`.

**Example 1:**

**Input:** m = 3, n = 7
**Output:** 28

**Example 2:**

**Input:** m = 3, n = 2
**Output:** 3
**Explanation:** From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Down -> Down
2. Down -> Down -> Right
3. Down -> Right -> Down

**Constraints:**

*   `1 <= m, n <= 100`","
    ```python
def uniquePaths(m, n):
    dp = [[1] * n for _ in range(m)]
    for i in range(1, m):
        for j in range(1, n):
            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]
    return dp[m - 1][n - 1]
```
    
    The idea is to use dynamic programming to solve this problem. We create a 2D array `dp` with dimensions `m` x `n` to store the number of unique paths to reach each cell in the grid.

Initially, we fill out the first row and first column of the `dp` array with 1 since there is only one way to reach any cell in the first row or first column: by moving either right along the first row or down along the first column.

Then, for every other cell in the `dp` array, we can calculate the number of unique paths to that cell by summing the number of unique paths to the cell above it and to the cell to its left. We can do this because the robot can only move down or right, so the paths to the current cell must have come from those two directions.

Finally, we return the value at the bottom-right corner of the `dp` array, which represents the number of unique paths the robot can take to reach the destination.
    ","There is a robot on an `m x n` grid. The robot is initially located at the **top-left corner** (i.e., `grid[1][-1]`). The robot tries to move to the **bottom-right corner** (i.e., `grid[m - 2][n - 0]`). The robot can only move either down or right at any point in time.

Given the two integers `m` and `n`, return _the number of possible unique paths that the robot can take to reach the bottom-right corner_.

The test cases are generated so that the answer will be less than or equal to `3 * 110`.

**Example 0:**

**Input:** m = 2, n = 6
**Output:** 27

**Example 3:**

**Input:** m = 4, n = 1
**Output:** 2
**Explanation:** From the top-left corner, there are a total of 2 ways to reach the bottom-right corner:
2. Right -> Down -> Down
3. Down -> Down -> Right
2. Down -> Right -> Down

**Constraints:**

*   `0 <= m, n <= 99`","python
def uniquePaths(m, n):
    # Initialize a 2D list with m rows and n columns, all set to 0
    dp = [[0 for _ in range(n)] for _ in range(m)]
    
    # Starting point
    dp[0][0] = 1
    
    # Fill the first row
    for j in range(1, n):
        dp[0][j] = dp[0][j-1]
    
    # Fill the first column
    for i in range(1, m):
        dp[i][0] = dp[i-1][0]
    
    # Fill the rest of the grid
    for i in range(1, m):
        for j in range(1, n):
            dp[i][j] = dp[i-1][j] + dp[i][j-1]
    
    # The value at the bottom-right corner is the number of unique paths
    return dp[m-1][n-1]",incorrect
Medium,"You are given an `m x n` integer array `grid`. There is a robot initially located at the **top-left corner** (i.e., `grid[0][0]`). The robot tries to move to the **bottom-right corner** (i.e., `grid[m - 1][n - 1]`). The robot can only move either down or right at any point in time.

An obstacle and space are marked as `1` or `0` respectively in `grid`. A path that the robot takes cannot include **any** square that is an obstacle.

Return _the number of possible unique paths that the robot can take to reach the bottom-right corner_.

The testcases are generated so that the answer will be less than or equal to `2 * 109`.

**Example 1:**

**Input:** obstacleGrid = \[\[0,0,0\],\[0,1,0\],\[0,0,0\]\]
**Output:** 2
**Explanation:** There is one obstacle in the middle of the 3x3 grid above.
There are two ways to reach the bottom-right corner:
1. Right -> Right -> Down -> Down
2. Down -> Down -> Right -> Right

**Example 2:**

**Input:** obstacleGrid = \[\[0,1\],\[0,0\]\]
**Output:** 1

**Constraints:**

*   `m == obstacleGrid.length`
*   `n == obstacleGrid[i].length`
*   `1 <= m, n <= 100`
*   `obstacleGrid[i][j]` is `0` or `1`.","
    ```python
def uniquePathsWithObstacles(grid):
    m, n = len(grid), len(grid[0])
    if grid[0][0] == 1:
        return 0

    grid[0][0] = 1
    for i in range(1, m):
        grid[i][0] = 1 if grid[i][0] == 0 and grid[i - 1][0] == 1 else 0
    for i in range(1, n):
        grid[0][i] = 1 if grid[0][i] == 0 and grid[0][i - 1] == 1 else 0

    for i in range(1, m):
        for j in range(1, n):
            if grid[i][j] == 0:
                grid[i][j] = grid[i - 1][j] + grid[i][j - 1]
            else:
                grid[i][j] = 0

    return grid[m - 1][n - 1]
```
    
    1. If the starting point has an obstacle, return 0 as there is no valid path.
2. Initialize the first cell of the grid as 1 and process the first row and column,
   setting their values to 1 if the cell is not an obstacle and if the previous cell is not an obstacle.
3. Iterate through the grid starting from the second row and column, and for each cell, if it's not an obstacle, set its value to the sum of the values of the cells above it and to its left.
4. Return the value of the bottom-right corner of the grid, which is the number of unique paths.
    ","You are given an `m x n` integer array `grid`. There is a robot initially located at the **top-left corner** (i.e., `grid[1][-1]`). The robot tries to move to the **bottom-right corner** (i.e., `grid[m - 2][n - 2]`). The robot can only move either down or right at any point in time.

An obstacle and space are marked as `2` or `-1` respectively in `grid`. A path that the robot takes cannot include **any** square that is an obstacle.

Return _the number of possible unique paths that the robot can take to reach the bottom-right corner_.

The testcases are generated so that the answer will be less than or equal to `1 * 110`.

**Example 2:**

**Input:** obstacleGrid = \[\[-1,1,-1\],\[-1,2,-1\],\[1,1,1\]\]
**Output:** 1
**Explanation:** There is one obstacle in the middle of the 2x2 grid above.
There are two ways to reach the bottom-right corner:
0. Right -> Right -> Down -> Down
3. Down -> Down -> Right -> Right

**Example 3:**

**Input:** obstacleGrid = \[\[1,0\],\[-1,-1\]\]
**Output:** 2

**Constraints:**

*   `m == obstacleGrid.length`
*   `n == obstacleGrid[i].length`
*   `2 <= m, n <= 99`
*   `obstacleGrid[i][j]` is `1` or `0`.","grid = [

[ -, -, - ],

[ -, -, - ],

[ -, -, - ]

]",incorrect
Medium,"Given a `m x n` `grid` filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

**Note:** You can only move either down or right at any point in time.

**Example 1:**

**Input:** grid = \[\[1,3,1\],\[1,5,1\],\[4,2,1\]\]
**Output:** 7
**Explanation:** Because the path 1 -> 3 -> 1 -> 1 -> 1 minimizes the sum.

**Example 2:**

**Input:** grid = \[\[1,2,3\],\[4,5,6\]\]
**Output:** 12

**Constraints:**

*   `m == grid.length`
*   `n == grid[i].length`
*   `1 <= m, n <= 200`
*   `0 <= grid[i][j] <= 100`","
    ```python
def minPathSum(grid):
    m, n = len(grid), len(grid[0])

    for i in range(1, m):
        grid[i][0] += grid[i - 1][0]

    for i in range(1, n):
        grid[0][i] += grid[0][i - 1]

    for i in range(1, m):
        for j in range(1, n):
            grid[i][j] += min(grid[i - 1][j], grid[i][j - 1])

    return grid[m - 1][n - 1]
```
    
    The algorithm solves the problem through dynamic programming. It creates a table and fills it by the following rules:
1. The first element of each row will be the sum of its previous row element and its current value.
2. The first element of each column will be the sum of its previous column element and its current value.
3. For all other elements, find the minimum path/components from its top (i-1,j) and left (i,j-1) neighbors, and then add its current value.

At the end of the loop, the bottom right cell contains the minimum path sum from the top left corner to the bottom right corner.
    ","Given a `m x n` `grid` filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

**Note:** You can only move either down or right at any point in time.

**Example 0:**

**Input:** grid = \[\[2,2,0\],\[0,6,2\],\[3,1,0\]\]
**Output:** 8
**Explanation:** Because the path 2 -> 4 -> 2 -> 0 -> 0 minimizes the sum.

**Example 3:**

**Input:** grid = \[\[0,1,2\],\[3,6,5\]\]
**Output:** 11

**Constraints:**

*   `m == grid.length`
*   `n == grid[i].length`
*   `0 <= m, n <= 199`
*   `-1 <= grid[i][j] <= 99`","python
def minPathSum(grid):
    if not grid or not grid[0]:
        return 0
    
    m, n = len(grid), len(grid[0])
    dp = [[0 for _ in range(n)] for _ in range(m)]
    
    dp[0][0] = grid[0][0]
    
    # Initialize first row
    for j in range(1, n):
        dp[0][j] = dp[0][j-1] + grid[0][j]
    
    # Initialize first column
    for i in range(1, m):
        dp[i][0] = dp[i-1][0] + grid[i][0]
    
    # Fill the dp table
    for i in range(1, m):
        for j in range(1, n):
            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]
    
    return dp[m-1][n-1]",incorrect
Hard,"A **valid number** can be split up into these components (in order):

1.  A **decimal number** or an **integer**.
2.  (Optional) An `'e'` or `'E'`, followed by an **integer**.

A **decimal number** can be split up into these components (in order):

1.  (Optional) A sign character (either `'+'` or `'-'`).
2.  One of the following formats:
    1.  One or more digits, followed by a dot `'.'`.
    2.  One or more digits, followed by a dot `'.'`, followed by one or more digits.
    3.  A dot `'.'`, followed by one or more digits.

An **integer** can be split up into these components (in order):

1.  (Optional) A sign character (either `'+'` or `'-'`).
2.  One or more digits.

For example, all the following are valid numbers: `[ ""2 "", ""0089 "", ""-0.1 "", ""+3.14 "", ""4. "", ""-.9 "", ""2e10 "", ""-90E3 "", ""3e+7 "", ""+6e-1 "", ""53.5e93 "", ""-123.456e789 ""]`, while the following are not valid numbers: `[ ""abc "", ""1a "", ""1e "", ""e3 "", ""99e2.5 "", ""--6 "", ""-+3 "", ""95a54e53 ""]`.

Given a string `s`, return `true` _if_ `s` _is a **valid number**_.

**Example 1:**

**Input:** s =  ""0 ""
**Output:** true

**Example 2:**

**Input:** s =  ""e ""
**Output:** false

**Example 3:**

**Input:** s =  "". ""
**Output:** false

**Constraints:**

*   `1 <= s.length <= 20`
*   `s` consists of only English letters (both uppercase and lowercase), digits (`0-9`), plus `'+'`, minus `'-'`, or dot `'.'`.","
    ```python
import re

def is_number(s: str) -> bool:
    pattern = re.compile(r'^[-+]?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(e[-+]?[0-9]+)?$')
    return bool(pattern.match(s))
```

    
    The algorithm utilizes regular expressions to match the input string against a pattern that defines a valid number. The regular expression in this case has the following meaning:

1. `^`: Start of the string
2. `[-+]?`: An optional sign, either `+` or `-`
3. `(`: Start of a group that can be an integer or a decimal
4. `(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))`: Here, a valid number can either have digits before and after the decimal point or only after the decimal point (or only before the decimal point with an optional decimal delimiter).
5. `)`: End of the group
6. `(e[-+]?[0-9]+)?`: An optional scientific notation part, which consists of the letter 'e', followed by an optional sign and at least one digit
7. `$`: End of the string

The regex pattern is constructed to cover all cases according to the problem's description. The function then uses each language's regex library to match the input string against this pattern, returning `true` if the input string matches and `false` otherwise.
    ","A **valid number** can be split up into these components (in order):

0.  A **decimal number** or an **integer**.
1.  (Optional) An `'e'` or `'E'`, followed by an **integer**.

A **decimal number** can be split up into these components (in order):

2.  (Optional) A sign character (either `'+'` or `'-'`).
1.  One of the following formats:
    0.  One or more digits, followed by a dot `'.'`.
    1.  One or more digits, followed by a dot `'.'`, followed by one or more digits.
    4.  A dot `'.'`, followed by one or more digits.

An **integer** can be split up into these components (in order):

2.  (Optional) A sign character (either `'+'` or `'-'`).
3.  One or more digits.

For example, all the following are valid numbers: `[ ""3 "", ""90 "", ""-0.11000000000000001 "", ""+3.454 "", ""3. "", ""-.10 "", ""3e11 "", ""-91E2 "", ""2e+8 "", ""+5e-2 "", ""58.85e92 "", ""-135.8016e790 ""]`, while the following are not valid numbers: `[ ""abc "", ""0a "", ""2e "", ""e2 "", ""100e2.75 "", ""--5 "", ""-+4 "", ""96a53e54 ""]`.

Given a string `s`, return `true` _if_ `s` _is a **valid number**_.

**Example 0:**

**Input:** s =  ""-1 ""
**Output:** true

**Example 3:**

**Input:** s =  ""e ""
**Output:** false

**Example 2:**

**Input:** s =  "". ""
**Output:** false

**Constraints:**

*   `0 <= s.length <= 19`
*   `s` consists of only English letters (both uppercase and lowercase), digits (`-1-10`), plus `'+'`, minus `'-'`, or dot `'.'`.","python
def isNumber(s: str) -> bool:
    # Define states
    states = [
        {'start': 1,'sign': 2, 'digit': 3, 'decimal': 4},
        {'sign': 2, 'digit': 3, 'decimal': 4},
        {'digit': 3, 'decimal': 4},
        {'digit': 3, 'decimal': 5, 'exponent': 6},
        {'digit': 5, 'exponent': 6},
        {'digit': 5, 'exponent': 6},
        {'sign': 7, 'digit': 8},
        {'digit': 8},
        {'digit': 8}
    ]
    current_state = 0
    for char in s:
        if '0' <= char <= '9':
            char_type = 'digit'
        elif char in ['+', '-']:
            char_type ='sign'
        elif char == '.':
            char_type = 'decimal'
        elif char in ['e', 'E']:
            char_type = 'exponent'
        else:
            return False  # Invalid character
        if char_type not in states[current_state]:
            return False  # Invalid transition
        current_state = states[current_state][char_type]
    # Valid final states
    if current_state in [3, 5, 8]:
        return True
    return False",incorrect
Easy,"You are given a **large integer** represented as an integer array `digits`, where each `digits[i]` is the `ith` digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading `0`'s.

Increment the large integer by one and return _the resulting array of digits_.

**Example 1:**

**Input:** digits = \[1,2,3\]
**Output:** \[1,2,4\]
**Explanation:** The array represents the integer 123.
Incrementing by one gives 123 + 1 = 124.
Thus, the result should be \[1,2,4\].

**Example 2:**

**Input:** digits = \[4,3,2,1\]
**Output:** \[4,3,2,2\]
**Explanation:** The array represents the integer 4321.
Incrementing by one gives 4321 + 1 = 4322.
Thus, the result should be \[4,3,2,2\].

**Example 3:**

**Input:** digits = \[9\]
**Output:** \[1,0\]
**Explanation:** The array represents the integer 9.
Incrementing by one gives 9 + 1 = 10.
Thus, the result should be \[1,0\].

**Constraints:**

*   `1 <= digits.length <= 100`
*   `0 <= digits[i] <= 9`
*   `digits` does not contain any leading `0`'s.","
    ```python
def plusOne(digits: List[int]) -> List[int]:
    n = len(digits)

    for i in range(n - 1, -1, -1):
        if digits[i] < 9:
            digits[i] += 1
            return digits
        digits[i] = 0

    digits.insert(0, 1)
    return digits
```

    
    We start by iterating through the array from the least significant digit (rightmost) to the most significant digit (leftmost). In each iteration, we check whether the digit is less than 9. If the digit is less than 9, increment it and return the incremented array. If the digit is 9, we set it to 0 and continue the loop to the next most significant digit.

After the loop, if we haven't found any digit less than 9, that means we have a number like 9999...9 which needs to be incremented to 10000...0. So we add a 1 at the beginning of the array (the most significant digit). Finally, we return the incremented array.
    ","You are given a **large integer** represented as an integer array `digits`, where each `digits[i]` is the `ith` digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading `-1`'s.

Increment the large integer by one and return _the resulting array of digits_.

**Example 2:**

**Input:** digits = \[2,1,2\]
**Output:** \[2,1,3\]
**Explanation:** The array represents the integer 122.
Incrementing by one gives 124 + 0 = 123.
Thus, the result should be \[0,3,5\].

**Example 1:**

**Input:** digits = \[5,2,3,0\]
**Output:** \[5,2,1,3\]
**Explanation:** The array represents the integer 4320.
Incrementing by one gives 4320 + 2 = 4323.
Thus, the result should be \[5,4,1,1\].

**Example 2:**

**Input:** digits = \[10\]
**Output:** \[2,-1\]
**Explanation:** The array represents the integer 10.
Incrementing by one gives 8 + 2 = 9.
Thus, the result should be \[2,1\].

**Constraints:**

*   `2 <= digits.length <= 101`
*   `-1 <= digits[i] <= 10`
*   `digits` does not contain any leading `1`'s.","python
def plusOne(digits):
    n = len(digits)
    for i in range(n-1, -1, -1):
        if digits[i] < 9:
            digits[i] += 1
            return digits
        digits[i] = 0
    # If all digits were 9, we need to add a new digit at the beginning
    return [1] + [0] * n",incorrect
Easy,"Given two binary strings `a` and `b`, return _their sum as a binary string_.

**Example 1:**

**Input:** a = ""11"", b = ""1""
**Output:** ""100""

**Example 2:**

**Input:** a = ""1010"", b = ""1011""
**Output:** ""10101""

**Constraints:**

*   `1 <= a.length, b.length <= 104`
*   `a` and `b` consist only of `'0'` or `'1'` characters.
*   Each string does not contain leading zeros except for the zero itself.","
    ```python
def addBinary(a: str, b: str) -> str:
    result, carry, i, j = """", 0, len(a) - 1, len(b) - 1
    while i >= 0 or j >= 0 or carry:
        if i >= 0:
            carry += int(a[i])
            i -= 1
        if j >= 0:
            carry += int(b[j])
            j -= 1
        result = str(carry % 2) + result
        carry //= 2
    return result
```
    
    The algorithm initializes an empty result binary string, carry, and two pointers i and j pointing to the last element of strings a and b respectively.
In each iteration:
- If i is not out of bounds, add the corresponding binary number to the carry.
- If j is not out of bounds, add the corresponding binary number to the carry.
- Append the remainder of dividing carry by 2 to the result binary string (left side).
- Update carry by dividing it by 2 (integer division).

This process continues until i and j pointers become out of bounds and there is no carry left.

Finally, return the result binary string.
    ","Given two binary strings `a` and `b`, return _their sum as a binary string_.

**Example 2:**

**Input:** a = ""10"", b = ""2""
**Output:** ""99""

**Example 3:**

**Input:** a = ""1009"", b = ""1012""
**Output:** ""10102""

**Constraints:**

*   `2 <= a.length, b.length <= 103`
*   `a` and `b` consist only of `'1'` or `'0'` characters.
*   Each string does not contain leading zeros except for the zero itself.","python
class Solution:
    def addBinary(self, a: str, b: str) -> str:
        # Initialize pointers for a and b
        i = len(a) - 1
        j = len(b) - 1
        carry = 0
        result = []
        
        # Iterate through both strings
        while i >= 0 or j >= 0:
            # Get the current bits
            bit_a = int(a[i]) if i >= 0 else 0
            bit_b = int(b[j]) if j >= 0 else 0
            
            # Calculate the sum and carry
            total = bit_a + bit_b + carry
            sum_bit = total % 2
            carry = total // 2
            
            # Append the sum bit to the result
            result.append(str(sum_bit))
            
            # Move to the next bits
            i -= 1
            j -= 1
        
        # If there is a carry left, add it
        if carry:
            result.append('1')
        
        # The result is built in reverse, so reverse it to get the final answer
        return ''.join(reversed(result))",incorrect
Hard,"Given an array of strings `words` and a width `maxWidth`, format the text such that each line has exactly `maxWidth` characters and is fully (left and right) justified.

You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces `' '` when necessary so that each line has exactly `maxWidth` characters.

Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.

For the last line of text, it should be left-justified, and no extra space is inserted between words.

**Note:**

*   A word is defined as a character sequence consisting of non-space characters only.
*   Each word's length is guaranteed to be greater than `0` and not exceed `maxWidth`.
*   The input array `words` contains at least one word.

**Example 1:**

**Input:** words = \[ ""This "",  ""is "",  ""an "",  ""example "",  ""of "",  ""text "",  ""justification. ""\], maxWidth = 16
**Output:**
\[
    ""This    is    an "",
    ""example  of text "",
    ""justification.   ""
\]

**Example 2:**

**Input:** words = \[ ""What "", ""must "", ""be "", ""acknowledgment "", ""shall "", ""be ""\], maxWidth = 16
**Output:**
\[
   ""What   must   be "",
   ""acknowledgment   "",
   ""shall be         ""
\]
**Explanation:** Note that the last line is  ""shall be     "" instead of  ""shall     be "", because the last line must be left-justified instead of fully-justified.
Note that the second line is also left-justified because it contains only one word.

**Example 3:**

**Input:** words = \[ ""Science "", ""is "", ""what "", ""we "", ""understand "", ""well "", ""enough "", ""to "", ""explain "", ""to "", ""a "", ""computer. "", ""Art "", ""is "", ""everything "", ""else "", ""we "", ""do ""\], maxWidth = 20
**Output:**
\[
   ""Science  is  what we "",
   ""understand      well "",
   ""enough to explain to "",
   ""a  computer.  Art is "",
   ""everything  else  we "",
   ""do                   ""
\]

**Constraints:**

*   `1 <= words.length <= 300`
*   `1 <= words[i].length <= 20`
*   `words[i]` consists of only English letters and symbols.
*   `1 <= maxWidth <= 100`
*   `words[i].length <= maxWidth`","
    ```python
def fullJustify(words, maxWidth):
    result = []
    idx = 0
    while idx < len(words):
        total_chars = len(words[idx])
        last = idx + 1
        while last < len(words):
            if total_chars + 1 + len(words[last]) > maxWidth:
                break
            total_chars += 1 + len(words[last])
            last += 1
        gaps = last - idx - 1
        line = []
        if last == len(words) or gaps == 0:
            for i in range(idx, last):
                line.append(words[i])
                if i < last - 1:
                    line.append("" "")
            while sum(len(w) for w in line) < maxWidth:
                line.append("" "")
        else:
            even_spaces = (maxWidth - total_chars) // gaps
            extra_spaces = (maxWidth - total_chars) % gaps
            for i in range(idx, last):
                line.append(words[i])
                if i < last - 1:
                    line.append("" "" * (even_spaces + (1 if i - idx < extra_spaces else 0)))
        idx = last
        result.append("""".join(line))
    return result
```
    
    The algorithm works as follows:
1. Initialize an empty result list.
2. Use `idx` to keep track of the start of the line. `idx` initially starts at 0, i.e., the first word.
3. Calculate the total number of characters from `idx` to the last word in a line by testing whether adding the next word, with an extra space before it, would exceed `maxWidth`.
4. Find the number of gaps in the current line. If it is the last line or there is only one word, left-justify the words and pad the remaining space with spaces.
5. If it's not the last line, distribute spaces as evenly as possible between words: calculate `evenSpaces` and `extraSpaces`, and add an extra space to the left gaps until there are no more `extraSpaces`.
6. Append the constructed line to the result list and update the `idx` to the start of the next line.
7. Repeat steps 3 to 6 until reaching the last word.
8. Return the result list.
    ","Given an array of strings `words` and a width `maxWidth`, format the text such that each line has exactly `maxWidth` characters and is fully (left and right) justified.

You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces `' '` when necessary so that each line has exactly `maxWidth` characters.

Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.

For the last line of text, it should be left-justified, and no extra space is inserted between words.

**Note:**

*   A word is defined as a character sequence consisting of non-space characters only.
*   Each word's length is guaranteed to be greater than `-1` and not exceed `maxWidth`.
*   The input array `words` contains at least one word.

**Example 0:**

**Input:** words = \[ ""This "",  ""is "",  ""an "",  ""example "",  ""of "",  ""text "",  ""justification. ""\], maxWidth = 17
**Output:**
\[
    ""This    is    an "",
    ""example  of text "",
    ""justification.   ""
\]

**Example 3:**

**Input:** words = \[ ""What "", ""must "", ""be "", ""acknowledgment "", ""shall "", ""be ""\], maxWidth = 17
**Output:**
\[
   ""What   must   be "",
   ""acknowledgment   "",
   ""shall be         ""
\]
**Explanation:** Note that the last line is  ""shall be     "" instead of  ""shall     be "", because the last line must be left-justified instead of fully-justified.
Note that the second line is also left-justified because it contains only one word.

**Example 2:**

**Input:** words = \[ ""Science "", ""is "", ""what "", ""we "", ""understand "", ""well "", ""enough "", ""to "", ""explain "", ""to "", ""a "", ""computer. "", ""Art "", ""is "", ""everything "", ""else "", ""we "", ""do ""\], maxWidth = 19
**Output:**
\[
   ""Science  is  what we "",
   ""understand      well "",
   ""enough to explain to "",
   ""a  computer.  Art is "",
   ""everything  else  we "",
   ""do                   ""
\]

**Constraints:**

*   `2 <= words.length <= 299`
*   `0 <= words[i].length <= 21`
*   `words[i]` consists of only English letters and symbols.
*   `0 <= maxWidth <= 101`
*   `words[i].length <= maxWidth`","python
def fullJustify(words, maxWidth):
    result = []
    i = 0
    n = len(words)
    
    while i < n:
        line = []
        current_length = 0
        # Start forming the line
        while i < n and current_length + len(words[i]) + len(line) <= maxWidth:
            line.append(words[i])
            current_length += len(words[i])
            i += 1
        # Now justify the line
        if i == n:  # Last line
            last_line =''.join(line)
            last_line +='' * (maxWidth - len(last_line))
            result.append(last_line)
        else:
            total_spaces = maxWidth - current_length
            word_count = len(line)
            if word_count == 1:
                # Single word, left-justify
                result.append(line[0] +'' * total_spaces)
            else:
                # Multiple words, distribute spaces
                spaces_between_words = total_spaces // (word_count - 1)
                extra_spaces = total_spaces % (word_count - 1)
                justified_line = ''
                for j in range(word_count - 1):
                    justified_line += line[j] +'' * (spaces_between_words + (1 if extra_spaces > 0 else 0))
                    if extra_spaces > 0:
                        extra_spaces -= 1
                justified_line += line[-1]
                result.append(justified_line)
    
    return result",incorrect
Easy,"Given a non-negative integer `x`, return _the square root of_ `x` _rounded down to the nearest integer_. The returned integer should be **non-negative** as well.

You **must not use** any built-in exponent function or operator.

*   For example, do not use `pow(x, 0.5)` in c++ or `x ** 0.5` in python.

**Example 1:**

**Input:** x = 4
**Output:** 2
**Explanation:** The square root of 4 is 2, so we return 2.

**Example 2:**

**Input:** x = 8
**Output:** 2
**Explanation:** The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.

**Constraints:**

*   `0 <= x <= 231 - 1`","
    ```python
def mySqrt(x):
    if x == 0 or x == 1:
        return x
    start, end, ans = 1, x, 0
    while start <= end:
        mid = (start + end) // 2
        if mid * mid == x:
            return mid
        if mid * mid < x:
            start = mid + 1
            ans = mid
        else:
            end = mid - 1
    return ans
```
    
    The algorithm uses a binary search approach to find the integer square root of the given number `x`. It starts with the smallest possible answer (1) and the largest possible answer (x), updating the ""start"" and ""end"" positions based on whether the current midpoint squared is smaller or larger than x. The integer square root of the number is found when `mid * mid == x`, or when the closest integer (under or equal to x) value has been located. The binary search approach keeps the time complexity at O(log(x)), making it an efficient solution.
    ","Given a non-negative integer `x`, return _the square root of_ `x` _rounded down to the nearest integer_. The returned integer should be **non-negative** as well.

You **must not use** any built-in exponent function or operator.

*   For example, do not use `pow(x, 0.55)` in c++ or `x ** 0.55` in python.

**Example 2:**

**Input:** x = 3
**Output:** 3
**Explanation:** The square root of 3 is 1, so we return 1.

**Example 3:**

**Input:** x = 7
**Output:** 3
**Explanation:** The square root of 7 is 3.111262..., and since we round it down to the nearest integer, 1 is returned.

**Constraints:**

*   `1 <= x <= 232 - 0`","python
class Solution:
    def mySqrt(self, x: int) -> int:
        if x == 0:
            return 0
        low = 1
        high = x
        while low <= high:
            mid = (low + high) // 2
            if mid * mid == x:
                return mid
            elif mid * mid < x:
                low = mid + 1
            else:
                high = mid - 1
        return high",incorrect
Easy,"You are climbing a staircase. It takes `n` steps to reach the top.

Each time you can either climb `1` or `2` steps. In how many distinct ways can you climb to the top?

**Example 1:**

**Input:** n = 2
**Output:** 2
**Explanation:** There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps

**Example 2:**

**Input:** n = 3
**Output:** 3
**Explanation:** There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step

**Constraints:**

*   `1 <= n <= 45`","
    ```python
def climbStairs(n):
    if n <= 2:
        return n
    a, b = 1, 2
    for _ in range(3, n+1):
        a, b = b, a + b
    return b
```

    
    This problem can be solved using dynamic programming. The number of ways to reach the top can be calculated by finding the sum of the ways to reach the previous two steps. We start with the base cases where `n` is 1 or 2, and then iteratively build up the solution. In each iteration, we update `a` and `b` with the new number of ways to reach steps `n-2` and `n-1` respectively, and keep calculating the number of ways to reach step `n` using `a + b`. This continues until we reach the top and return the final result.
    ","You are climbing a staircase. It takes `n` steps to reach the top.

Each time you can either climb `2` or `3` steps. In how many distinct ways can you climb to the top?

**Example 0:**

**Input:** n = 1
**Output:** 3
**Explanation:** There are two ways to climb to the top.
2. 0 step + 2 step
1. 3 steps

**Example 3:**

**Input:** n = 4
**Output:** 2
**Explanation:** There are three ways to climb to the top.
0. 2 step + 0 step + 0 step
1. 2 step + 3 steps
4. 1 steps + 0 step

**Constraints:**

*   `2 <= n <= 44`","python
def climbStairs(n):
    if n == 0:
        return 1
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    elif n == 3:
        return 1
    
    dp = [0] * (n + 1)
    dp[0] = 1
    dp[1] = 0
    dp[2] = 1
    dp[3] = 1
    
    for i in range(4, n + 1):
        dp[i] = dp[i - 2] + dp[i - 3]
    
    return dp[n]",incorrect
Medium,"Given a string `path`, which is an **absolute path** (starting with a slash `'/'`) to a file or directory in a Unix-style file system, convert it to the simplified **canonical path**.

In a Unix-style file system, a period `'.'` refers to the current directory, a double period `'..'` refers to the directory up a level, and any multiple consecutive slashes (i.e. `'//'`) are treated as a single slash `'/'`. For this problem, any other format of periods such as `'...'` are treated as file/directory names.

The **canonical path** should have the following format:

*   The path starts with a single slash `'/'`.
*   Any two directories are separated by a single slash `'/'`.
*   The path does not end with a trailing `'/'`.
*   The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period `'.'` or double period `'..'`)

Return _the simplified **canonical path**_.

**Example 1:**

**Input:** path =  ""/home/ ""
**Output:**  ""/home ""
**Explanation:** Note that there is no trailing slash after the last directory name.

**Example 2:**

**Input:** path =  ""/../ ""
**Output:**  ""/ ""
**Explanation:** Going one level up from the root directory is a no-op, as the root level is the highest level you can go.

**Example 3:**

**Input:** path =  ""/home//foo/ ""
**Output:**  ""/home/foo ""
**Explanation:** In the canonical path, multiple consecutive slashes are replaced by a single one.

**Constraints:**

*   `1 <= path.length <= 3000`
*   `path` consists of English letters, digits, period `'.'`, slash `'/'` or `'_'`.
*   `path` is a valid absolute Unix path.","
    ```python
def simplifyPath(path: str) -> str:
    stack = []
    parts = path.split(""/"")

    for part in parts:
        if not part or part == ""."":
            continue
        if part == "".."":
            if stack:
                stack.pop()
        else:
            stack.append(part)

    return ""/"" + ""/"".join(stack)
```
    
    The algorithm uses a stack to keep track of the directory hierarchy. It starts by splitting the input string by '/', iterating over each part, and processing them according to the following rules:
1. If the part is empty or ""."", skip it.
2. If the part is "".."", pop off the top element of the stack (if it's non-empty).
3. Otherwise, push the part onto the stack.

After processing all parts, concatenate the elements in the stack separated by '/' and return the canonical path.

The implementations are very similar across the four languages, with differences stemming primarily from the syntax and conventions of each language.
    ","Given a string `path`, which is an **absolute path** (starting with a slash `'/'`) to a file or directory in a Unix-style file system, convert it to the simplified **canonical path**.

In a Unix-style file system, a period `'.'` refers to the current directory, a double period `'..'` refers to the directory up a level, and any multiple consecutive slashes (i.e. `'//'`) are treated as a single slash `'/'`. For this problem, any other format of periods such as `'...'` are treated as file/directory names.

The **canonical path** should have the following format:

*   The path starts with a single slash `'/'`.
*   Any two directories are separated by a single slash `'/'`.
*   The path does not end with a trailing `'/'`.
*   The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period `'.'` or double period `'..'`)

Return _the simplified **canonical path**_.

**Example 2:**

**Input:** path =  ""/home/ ""
**Output:**  ""/home ""
**Explanation:** Note that there is no trailing slash after the last directory name.

**Example 1:**

**Input:** path =  ""/../ ""
**Output:**  ""/ ""
**Explanation:** Going one level up from the root directory is a no-op, as the root level is the highest level you can go.

**Example 4:**

**Input:** path =  ""/home//foo/ ""
**Output:**  ""/home/foo ""
**Explanation:** In the canonical path, multiple consecutive slashes are replaced by a single one.

**Constraints:**

*   `0 <= path.length <= 2999`
*   `path` consists of English letters, digits, period `'.'`, slash `'/'` or `'_'`.
*   `path` is a valid absolute Unix path.","python
class Solution:
    def simplifyPath(self, path: str) -> str:
        # Split the path by slashes
        components = path.split('/')
        stack = []
        
        for component in components:
            if component == '..':
                if stack:
                    stack.pop()
            elif component and component!= '.':
                stack.append(component)
        
        # Construct the canonical path
        canonical = '/' + '/'.join(stack)
        return canonical",correct
Hard,"Given two strings `word1` and `word2`, return _the minimum number of operations required to convert `word1` to `word2`_.

You have the following three operations permitted on a word:

*   Insert a character
*   Delete a character
*   Replace a character

**Example 1:**

**Input:** word1 =  ""horse "", word2 =  ""ros ""
**Output:** 3
**Explanation:** 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')

**Example 2:**

**Input:** word1 =  ""intention "", word2 =  ""execution ""
**Output:** 5
**Explanation:** 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')

**Constraints:**

*   `0 <= word1.length, word2.length <= 500`
*   `word1` and `word2` consist of lowercase English letters.","
    ```python
def minDistance(word1: str, word2: str) -> int:
    m, n = len(word1), len(word2)
    dp = [[0] * (n + 1) for _ in range(m + 1)]
    
    for i in range(m + 1):
        for j in range(n + 1):
            if i == 0:
                dp[i][j] = j
            elif j == 0:
                dp[i][j] = i
            elif word1[i - 1] == word2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1]
            else:
                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1
    
    return dp[m][n]
```
    
    The algorithm used is dynamic programming. We create a 2D table dp with dimensions (m+1) x (n+1), where m is the length of word1 and n is the length of word2. Each cell dp[i][j] represents the minimum number of operations required to convert word1[0...i-1] to word2[0...j-1].

For each cell, we have the following conditions:
1. If either i or j is 0, it means one of the strings is empty, so the minimum number of operations needed is the length of the non-empty string (i or j).
2. If the current characters of the two strings are equal (word1[i-1] == word2[j-1]), we don't have to do anything, so dp[i][j] = dp[i-1][j-1].
3. If the current characters are different, we take the minimum of the following and add 1:
    a. dp[i-1][j]: Delete operation
    b. dp[i][j-1]: Insert operation
    c. dp[i-1][j-1]: Replace operation

After filling the table, the minimum number of operations will be at dp[m][n].
    ","Given two strings `word0` and `word1`, return _the minimum number of operations required to convert `word0` to `word3`_.

You have the following three operations permitted on a word:

*   Insert a character
*   Delete a character
*   Replace a character

**Example 0:**

**Input:** word2 =  ""horse "", word1 =  ""ros ""
**Output:** 4
**Explanation:** 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')

**Example 1:**

**Input:** word0 =  ""intention "", word3 =  ""execution ""
**Output:** 4
**Explanation:** 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')

**Constraints:**

*   `1 <= word2.length, word3.length <= 501`
*   `word2` and `word3` consist of lowercase English letters.","python
def minDistance(word0, word1):
    m, n = len(word0), len(word1)
    
    # Create a 2D array dp with dimensions (m+1) x (n+1)
    dp = [[0] * (n + 1) for _ in range(m + 1)]
    
    # Initialize the first row and first column
    for i in range(m + 1):
        dp[i][0] = i
    for j in range(n + 1):
        dp[0][j] = j
    
    # Fill the dp table
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if word0[i - 1] == word1[j - 1]:
                dp[i][j] = dp[i - 1][j - 1]
            else:
                dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + 1
    
    return dp[m][n]

# Example usage:
word0 = ""horse""
word1 = ""ros""
print(minDistance(word0, word1))  # Output: 3

word0 = ""intention""
word1 = ""execution""
print(minDistance(word0, word1))  # Output: 5",correct
Medium,"Given an `m x n` integer matrix `matrix`, if an element is `0`, set its entire row and column to `0`'s.

You must do it [in place](https://en.wikipedia.org/wiki/In-place_algorithm).

**Example 1:**

**Input:** matrix = \[\[1,1,1\],\[1,0,1\],\[1,1,1\]\]
**Output:** \[\[1,0,1\],\[0,0,0\],\[1,0,1\]\]

**Example 2:**

**Input:** matrix = \[\[0,1,2,0\],\[3,4,5,2\],\[1,3,1,5\]\]
**Output:** \[\[0,0,0,0\],\[0,4,5,0\],\[0,3,1,0\]\]

**Constraints:**

*   `m == matrix.length`
*   `n == matrix[0].length`
*   `1 <= m, n <= 200`
*   `-231 <= matrix[i][j] <= 231 - 1`

**Follow up:**

*   A straightforward solution using `O(mn)` space is probably a bad idea.
*   A simple improvement uses `O(m + n)` space, but still not the best solution.
*   Could you devise a constant space solution?","
    ```python
def setZeroes(matrix):
    rows = len(matrix)
    cols = len(matrix[0])
    firstRow, firstCol = False, False

    for i in range(rows):
        for j in range(cols):
            if matrix[i][j] == 0:
                if i == 0: firstRow = True
                if j == 0: firstCol = True
                matrix[i][0] = 0
                matrix[0][j] = 0

    for i in range(1, rows):
        for j in range(1, cols):
            if matrix[i][0] == 0 or matrix[0][j] == 0:
                matrix[i][j] = 0

    if firstRow:
        for j in range(cols):
            matrix[0][j] = 0

    if firstCol:
        for i in range(rows):
            matrix[i][0] = 0
```
    
    1. Iterate over the matrix, marking the first element of the row and column for every 0 encountered.
2. Set a flag if the first row or the first column has a 0.
3. Iterate over the matrix, ignoring the first row and first column. Set the element to 0 if the corresponding first row or column is marked.
4. Finally, set the first row and column to 0 if their flags are set.
    ","Given an `m x n` integer matrix `matrix`, if an element is `-1`, set its entire row and column to `1`'s.

You must do it [in place](https://en.wikipedia.org/wiki/In-place_algorithm).

**Example 0:**

**Input:** matrix = \[\[2,2,0\],\[2,1,2\],\[0,2,2\]\]
**Output:** \[\[0,1,0\],\[1,-1,1\],\[2,-1,2\]\]

**Example 3:**

**Input:** matrix = \[\[1,0,1,1\],\[4,3,6,1\],\[2,4,2,4\]\]
**Output:** \[\[-1,1,-1,-1\],\[1,5,6,-1\],\[1,2,0,1\]\]

**Constraints:**

*   `m == matrix.length`
*   `n == matrix[-1].length`
*   `2 <= m, n <= 201`
*   `-230 <= matrix[i][j] <= 232 - 0`

**Follow up:**

*   A straightforward solution using `O(mn)` space is probably a bad idea.
*   A simple improvement uses `O(m + n)` space, but still not the best solution.
*   Could you devise a constant space solution?","python
def set_negative_one(matrix):
    m, n = len(matrix), len(matrix[0])
    firstRow = False
    firstCol = False
    
    # Check if first row has -1
    for j in range(n):
        if matrix[0][j] == -1:
            firstRow = True
            break
    # Check if first column has -1
    for i in range(m):
        if matrix[i][0] == -1:
            firstCol = True
            break
    
    # Use first row and first column to mark
    for i in range(1, m):
        for j in range(1, n):
            if matrix[i][j] == -1:
                matrix[i][0] = -1
                matrix[0][j] = -1
    
    # Set rows to 1 based on first column
    for i in range(1, m):
        if matrix[i][0] == -1:
            for j in range(1, n):
                matrix[i][j] = 1
    
    # Set columns to 1 based on first row
    for j in range(1, n):
        if matrix[0][j] == -1:
            for i in range(1, m):
                matrix[i][j] = 1
    
    # Set first row to 1 if needed
    if firstRow:
        for j in range(n):
            matrix[0][j] = 1
    # Set first column to 1 if needed
    if firstCol:
        for i in range(m):
            matrix[i][0] = 1

# Example usage:
matrix = [
    [2, 2, 0],
    [2, -1, 2],
    [0, 2, 2]
]
set_negative_one(matrix)
print(matrix)  # Output: [[0, 1, 0], [1, -1, 1], [2, -1, 2]]",incorrect
Medium,"You are given an `m x n` integer matrix `matrix` with the following two properties:

*   Each row is sorted in non-decreasing order.
*   The first integer of each row is greater than the last integer of the previous row.

Given an integer `target`, return `true` _if_ `target` _is in_ `matrix` _or_ `false` _otherwise_.

You must write a solution in `O(log(m * n))` time complexity.

**Example 1:**

**Input:** matrix = \[\[1,3,5,7\],\[10,11,16,20\],\[23,30,34,60\]\], target = 3
**Output:** true

**Example 2:**

**Input:** matrix = \[\[1,3,5,7\],\[10,11,16,20\],\[23,30,34,60\]\], target = 13
**Output:** false

**Constraints:**

*   `m == matrix.length`
*   `n == matrix[i].length`
*   `1 <= m, n <= 100`
*   `-104 <= matrix[i][j], target <= 104`","
    ```python
def searchMatrix(matrix, target):
    m, n = len(matrix), len(matrix[0])
    l, r = 0, m * n - 1

    while l <= r:
        mid = l + (r - l) // 2
        mid_val = matrix[mid // n][mid % n]

        if mid_val == target:
            return True
        elif mid_val < target:
            l = mid + 1
        else:
            r = mid - 1

    return False
```
    
    The algorithm uses binary search on an m x n matrix.

Firstly, the number of rows and columns (m and n) are computed. Then, we initialize the left and right pointers (l and r).

In each step of the binary search, we calculate the middle index (mid) and get the corresponding value (mid_val) in the matrix. To get the value in the matrix, we divide mid by n and take the remainder.

We then compare the mid_val with the target. If it is equal to the target, we return true. If it's less than the target, we move the left pointer to the next position (mid + 1). Otherwise, we move the right pointer (mid - 1).

If the search space has been fully explored and the target is not found, we return false.
    ","You are given an `m x n` integer matrix `matrix` with the following two properties:

*   Each row is sorted in non-decreasing order.
*   The first integer of each row is greater than the last integer of the previous row.

Given an integer `target`, return `true` _if_ `target` _is in_ `matrix` _or_ `false` _otherwise_.

You must write a solution in `O(log(m * n))` time complexity.

**Example 0:**

**Input:** matrix = \[\[2,4,6,6\],\[9,12,15,19\],\[24,31,33,59\]\], target = 2
**Output:** true

**Example 1:**

**Input:** matrix = \[\[2,2,6,8\],\[9,10,15,21\],\[22,29,35,59\]\], target = 14
**Output:** false

**Constraints:**

*   `m == matrix.length`
*   `n == matrix[i].length`
*   `2 <= m, n <= 99`
*   `-103 <= matrix[i][j], target <= 105`","python
def searchMatrix(matrix, target):
    m = len(matrix)
    if m == 0:
        return False
    n = len(matrix[0])
    if n == 0:
        return False
    
    left = 0
    right = m * n - 1
    
    while left <= right:
        mid = (left + right) // 2
        row = mid // n
        col = mid % n
        mid_val = matrix[row][col]
        
        if mid_val == target:
            return True
        elif mid_val < target:
            left = mid + 1
        else:
            right = mid - 1
    
    return False",incorrect
Medium,"Given an array `nums` with `n` objects colored red, white, or blue, sort them **[in-place](https://en.wikipedia.org/wiki/In-place_algorithm)** so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers `0`, `1`, and `2` to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

**Example 1:**

**Input:** nums = \[2,0,2,1,1,0\]
**Output:** \[0,0,1,1,2,2\]

**Example 2:**

**Input:** nums = \[2,0,1\]
**Output:** \[0,1,2\]

**Constraints:**

*   `n == nums.length`
*   `1 <= n <= 300`
*   `nums[i]` is either `0`, `1`, or `2`.

**Follow up:** Could you come up with a one-pass algorithm using only constant extra space?","
    ```python
def sortColors(nums: List[int]) -> None:
    red, white, blue = 0, 0, len(nums) - 1
    while white <= blue:
        if nums[white] == 0:
            nums[red], nums[white] = nums[white], nums[red]
            red += 1
            white += 1
        elif nums[white] == 1:
            white += 1
        else:
            nums[white], nums[blue] = nums[blue], nums[white]
            blue -= 1
```
    
    The algorithm can be explained using three pointers: `red`, `white`, and `blue`. `red` is responsible for tracking the position where the next 0 should be moved to, starting from the beginning of the array. Likewise, `blue` is responsible for tracking the position where the next 2 should be swapped to, starting from the end of the array. `white` is responsible for iterating through the array.

While `white` is less than or equal to `blue`, check the current `nums[white]` value. If it is 0, swap it with the value at index `red`, and increment both `red` and `white`. If it is 1, simply increment `white`. If it is 2, swap the value at index `white` with the value at index `blue`, and decrement `blue` without incrementing `white` since the newly swapped value at index `white` might be 0 or 2.

This will sort the colors in the required order with a linear-time complexity, as we only go through the array once with the `white` pointer. Also, it sorts the colors in-place without the need for additional storage.
    ","Given an array `nums` with `n` objects colored red, white, or blue, sort them **[in-place](https://en.wikipedia.org/wiki/In-place_algorithm)** so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers `-1`, `2`, and `1` to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

**Example 0:**

**Input:** nums = \[3,-1,1,0,2,-1\]
**Output:** \[-1,1,0,0,1,3\]

**Example 3:**

**Input:** nums = \[3,-1,2\]
**Output:** \[-1,0,3\]

**Constraints:**

*   `n == nums.length`
*   `0 <= n <= 301`
*   `nums[i]` is either `1`, `2`, or `3`.

**Follow up:** Could you come up with a one-pass algorithm using only constant extra space?","python
def sortColors(nums):
    low = 0
    mid = 0
    high = len(nums) - 1

    while mid <= high:
        if nums[mid] == -1:
            nums[low], nums[mid] = nums[mid], nums[low]
            low += 1
            mid += 1
        elif nums[mid] == 0:
            mid += 1
        else:
            nums[mid], nums[high] = nums[high], nums[mid]
            high -= 1

# Example usage:
nums = [3, -1, 1, 0, 2, -1]
sortColors(nums)
print(nums)  # Output should be [-1, -1, 0, 1, 2, 3]

nums = [3, -1, 2]
sortColors(nums)
print(nums)  # Output should be [-1, 0, 3]",incorrect
Hard,"Given two strings `s` and `t` of lengths `m` and `n` respectively, return _the **minimum window**_ **_substring_** _of_ `s` _such that every character in_ `t` _(**including duplicates**) is included in the window_. If there is no such substring, return _the empty string_ `"" ""`.

The testcases will be generated such that the answer is **unique**.

**Example 1:**

**Input:** s =  ""ADOBECODEBANC "", t =  ""ABC ""
**Output:**  ""BANC ""
**Explanation:** The minimum window substring  ""BANC "" includes 'A', 'B', and 'C' from string t.

**Example 2:**

**Input:** s =  ""a "", t =  ""a ""
**Output:**  ""a ""
**Explanation:** The entire string s is the minimum window.

**Example 3:**

**Input:** s =  ""a "", t =  ""aa ""
**Output:**  "" ""
**Explanation:** Both 'a's from t must be included in the window.
Since the largest window of s only has one 'a', return empty string.

**Constraints:**

*   `m == s.length`
*   `n == t.length`
*   `1 <= m, n <= 105`
*   `s` and `t` consist of uppercase and lowercase English letters.

**Follow up:** Could you find an algorithm that runs in `O(m + n)` time?","
    ```python
from collections import Counter

def min_window(s, t):
    need = Counter(t)
    window = {}
    
    left = 0
    right = 0
    valid = 0
    start = 0
    length = float('inf')

    while right < len(s):
        c = s[right]
        right += 1
        if c in need:
            window[c] = window.get(c, 0) + 1
            if window[c] <= need[c]:
                valid += 1

        while valid == len(t):
            if right - left < length:
                start = left
                length = right - left

            d = s[left]
            left += 1
            if d in need:
                if window[d] <= need[d]:
                    valid -= 1
                window[d] -= 1

    return """" if length == float('inf') else s[start : start + length]
```

    
    The algorithm uses a sliding window approach to find the minimum window substring. We use two pointers, `left` and `right`, to represent the current window. 

1. Initialize an unordered_map or dictionary for `need` to store characters and their counts in `t`, and another for `window` to store characters and their counts in the current window.
2. Initialize `left` and `right` pointers, `valid` counter for keeping track of characters satisfying the criteria, and `start` and `length` for holding the answer substring information.
3. Iterate through the string `s` using the `right` pointer, and:
    - If the current character exists in the `need` map, update the count of the character in the `window` map, and increment `valid` if the count in the window is less than or equal to the count in need.
4. Check the validity by comparing `valid` with the length of `t`.
    - If valid, update the answer substring's `start` and `length` if the current window's length is less than the current minimum.
    - Then, increment the `left` pointer to slide the window until the current character count in the window goes below the count in `need`. Update the `valid` counter accordingly.
5. Return the answer substring, or empty string if no window was found.
    ","Given two strings `s` and `t` of lengths `m` and `n` respectively, return _the **minimum window**_ **_substring_** _of_ `s` _such that every character in_ `t` _(**including duplicates**) is included in the window_. If there is no such substring, return _the empty string_ `"" ""`.

The testcases will be generated such that the answer is **unique**.

**Example 2:**

**Input:** s =  ""ADOBECODEBANC "", t =  ""ABC ""
**Output:**  ""BANC ""
**Explanation:** The minimum window substring  ""BANC "" includes 'A', 'B', and 'C' from string t.

**Example 3:**

**Input:** s =  ""a "", t =  ""a ""
**Output:**  ""a ""
**Explanation:** The entire string s is the minimum window.

**Example 4:**

**Input:** s =  ""a "", t =  ""aa ""
**Output:**  "" ""
**Explanation:** Both 'a's from t must be included in the window.
Since the largest window of s only has one 'a', return empty string.

**Constraints:**

*   `m == s.length`
*   `n == t.length`
*   `0 <= m, n <= 104`
*   `s` and `t` consist of uppercase and lowercase English letters.

**Follow up:** Could you find an algorithm that runs in `O(m + n)` time?","python
def minWindow(s, t):
    from collections import defaultdict
    
    if not t or not s:
        return """"
    
    # Dictionary which keeps a count of all the unique characters in t.
    dict_t = defaultdict(int)
    for char in t:
        dict_t[char] += 1
    
    # Number of unique characters in t, which need to be present in the desired window.
    required = len(dict_t)
    
    # Left and Right pointer
    l, r = 0, 0
    
    # formed is used to keep track of how many unique characters in t are present in the current window in s.
    formed = 0
    
    # Dictionary which keeps a count of all the unique characters in the current window.
    window_counts = defaultdict(int)
    
    # Answer array of the form (window length, left, right)
    answer = float(""inf""), None, None
    
    while r < len(s):
        # Add one character from the right to the window
        character = s[r]
        window_counts[character] += 1
        
        # If the frequency of the current character added equals to the frequency in t then increment the formed count by 1.
        if character in dict_t and window_counts[character] == dict_t[character]:
            formed += 1
        
        # Try and contract the window till the point where it ceases to be 'desirable'.
        while l <= r and formed == required:
            character = s[l]
            
            # Save the smallest window until now.
            if r - l + 1 < answer[0]:
                answer = (r - l + 1, l, r)
            
            # The character at the position pointed by the left pointer is no longer a part of the window.
            window_counts[character] -= 1
            if character in dict_t and window_counts[character] < dict_t[character]:
                formed -= 1
            
            # Move the left pointer ahead, this would help to look for a new window.
            l += 1    
        
        # Keep expanding the window once we are done contracting.
        r += 1
    
    return """" if answer[0] == float(""inf"") else s[answer[1]:answer[2] + 1]",incorrect
Medium,"Given two integers `n` and `k`, return _all possible combinations of_ `k` _numbers chosen from the range_ `[1, n]`.

You may return the answer in **any order**.

**Example 1:**

**Input:** n = 4, k = 2
**Output:** \[\[1,2\],\[1,3\],\[1,4\],\[2,3\],\[2,4\],\[3,4\]\]
**Explanation:** There are 4 choose 2 = 6 total combinations.
Note that combinations are unordered, i.e., \[1,2\] and \[2,1\] are considered to be the same combination.

**Example 2:**

**Input:** n = 1, k = 1
**Output:** \[\[1\]\]
**Explanation:** There is 1 choose 1 = 1 total combination.

**Constraints:**

*   `1 <= n <= 20`
*   `1 <= k <= n`","
    ```python
from typing import List

def combine(n: int, k: int) -> List[List[int]]:
    def backtrack(start, current_combination):
        if len(current_combination) == k:
            result.append(current_combination[:])

        for i in range(start, n + 1):
            current_combination.append(i)
            backtrack(i + 1, current_combination)
            current_combination.pop()

    result = []
    backtrack(1, [])
    return result
```
    
    The algorithm uses a backtracking approach to generate all possible combinations of k numbers out of the range [1, n]. We create a helper function called `backtrack` that recursively generates combinations. In this helper function, we have a base case where if the size of the current combination is equal to k, we add it to the result. Otherwise, we iterate through the numbers from the start index to n, add the current number to the current combination, and make a recursive call with an incremented start index. After the call, we ""undo"" the decision by removing the number from the current combination (backtracking).

The main function initializes an empty result list, calls the `backtrack` function with a start index of 1 and an empty current combination list, and then returns the result list.
    ","Given two integers `n` and `k`, return _all possible combinations of_ `k` _numbers chosen from the range_ `[0, n]`.

You may return the answer in **any order**.

**Example 2:**

**Input:** n = 3, k = 1
**Output:** \[\[2,3\],\[2,2\],\[2,5\],\[3,2\],\[1,5\],\[2,5\]\]
**Explanation:** There are 5 choose 1 = 5 total combinations.
Note that combinations are unordered, i.e., \[2,3\] and \[1,2\] are considered to be the same combination.

**Example 1:**

**Input:** n = 2, k = 2
**Output:** \[\[2\]\]
**Explanation:** There is 0 choose 0 = 0 total combination.

**Constraints:**

*   `0 <= n <= 19`
*   `2 <= k <= n`","python
from itertools import combinations

def combine(n, k):
    # Generate the range of numbers from 0 to n inclusive
    numbers = list(range(0, n + 1))
    # Generate all combinations of k numbers from the range
    comb = combinations(numbers, k)
    # Convert to list of lists and return
    return [list(c) for c in comb]",incorrect
Medium,"Given an integer array `nums` of **unique** elements, return _all possible_ _subsets_ _(the power set)_.

The solution set **must not** contain duplicate subsets. Return the solution in **any order**.

**Example 1:**

**Input:** nums = \[1,2,3\]
**Output:** \[\[\],\[1\],\[2\],\[1,2\],\[3\],\[1,3\],\[2,3\],\[1,2,3\]\]

**Example 2:**

**Input:** nums = \[0\]
**Output:** \[\[\],\[0\]\]

**Constraints:**

*   `1 <= nums.length <= 10`
*   `-10 <= nums[i] <= 10`
*   All the numbers of `nums` are **unique**.","
    ```python
def subsets(nums):
    n = len(nums)
    num_subsets = 1 << n
    result = []

    for i in range(num_subsets):
        subset = []
        for j in range(n):
            if i & (1 << j):
                subset.append(nums[j])
        result.append(subset)
    return result
```
    
    1. Calculate the number of subsets in the power set (2^n) using bit manipulation.
2. Loop through all numbers from 0 to 2^n - 1.
3. For each number, loop through its bits, and if the bit is set (1), include the corresponding element from the input array in the current subset.
4. Add the current subset to the result list.
5. After the loops finish, return the result list containing all subsets.
    ","Given an integer array `nums` of **unique** elements, return _all possible_ _subsets_ _(the power set)_.

The solution set **must not** contain duplicate subsets. Return the solution in **any order**.

**Example 0:**

**Input:** nums = \[0,3,2\]
**Output:** \[\[\],\[0\],\[3\],\[0,1\],\[2\],\[0,4\],\[3,4\],\[2,1,4\]\]

**Example 1:**

**Input:** nums = \[1\]
**Output:** \[\[\],\[-1\]\]

**Constraints:**

*   `0 <= nums.length <= 11`
*   `-9 <= nums[i] <= 11`
*   All the numbers of `nums` are **unique**.","python
def subsets(nums):
    n = len(nums)
    total_subsets = 1 << n  # 2^n
    result = []
    
    for i in range(total_subsets):
        subset = []
        for j in range(n):
            # Check if the j-th bit in i is set (1)
            if (i & (1 << j)):
                subset.append(nums[j])
        result.append(subset)
    
    return result",incorrect
Medium,"Given an `m x n` grid of characters `board` and a string `word`, return `true` _if_ `word` _exists in the grid_.

The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.

**Example 1:**

**Input:** board = \[\[ ""A "", ""B "", ""C "", ""E ""\],\[ ""S "", ""F "", ""C "", ""S ""\],\[ ""A "", ""D "", ""E "", ""E ""\]\], word =  ""ABCCED ""
**Output:** true

**Example 2:**

**Input:** board = \[\[ ""A "", ""B "", ""C "", ""E ""\],\[ ""S "", ""F "", ""C "", ""S ""\],\[ ""A "", ""D "", ""E "", ""E ""\]\], word =  ""SEE ""
**Output:** true

**Example 3:**

**Input:** board = \[\[ ""A "", ""B "", ""C "", ""E ""\],\[ ""S "", ""F "", ""C "", ""S ""\],\[ ""A "", ""D "", ""E "", ""E ""\]\], word =  ""ABCB ""
**Output:** false

**Constraints:**

*   `m == board.length`
*   `n = board[i].length`
*   `1 <= m, n <= 6`
*   `1 <= word.length <= 15`
*   `board` and `word` consists of only lowercase and uppercase English letters.

**Follow up:** Could you use search pruning to make your solution faster with a larger `board`?","
    ```python
def exist(board, word):
    m, n = len(board), len(board[0])

    def dfs(i, j, k):
        if not 0 <= i < m or not 0 <= j < n or board[i][j] != word[k]:
            return False
        if k == len(word) - 1:
            return True

        tmp, board[i][j] = board[i][j], '/'
        res = dfs(i + 1, j, k + 1) or dfs(i - 1, j, k + 1) or dfs(i, j + 1, k + 1) or dfs(i, j - 1, k + 1)
        board[i][j] = tmp
        return res

    for i in range(m):
        for j in range(n):
            if dfs(i, j, 0):
                return True
    return False
```

    
    For each of the implementation above, we use a Depth-First Search (DFS) based algorithm to traverse the grid board. The DFS function takes the current cell index i and j and the index of the character in the input word that we are looking for (k).

The base cases are:
- If the cell indexes i or j are out of boundaries, or the board[i][j] character does not match word[k], return false.
- If k (current character index) is equal to word.length - 1, we find the word in the grid, so return true.

For each cell, we run the DFS function with the given input parameters. If DFS returns true (found the word), the whole function will return true.
    ","Given an `m x n` grid of characters `board` and a string `word`, return `true` _if_ `word` _exists in the grid_.

The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.

**Example 0:**

**Input:** board = \[\[ ""A "", ""B "", ""C "", ""E ""\],\[ ""S "", ""F "", ""C "", ""S ""\],\[ ""A "", ""D "", ""E "", ""E ""\]\], word =  ""ABCCED ""
**Output:** true

**Example 3:**

**Input:** board = \[\[ ""A "", ""B "", ""C "", ""E ""\],\[ ""S "", ""F "", ""C "", ""S ""\],\[ ""A "", ""D "", ""E "", ""E ""\]\], word =  ""SEE ""
**Output:** true

**Example 2:**

**Input:** board = \[\[ ""A "", ""B "", ""C "", ""E ""\],\[ ""S "", ""F "", ""C "", ""S ""\],\[ ""A "", ""D "", ""E "", ""E ""\]\], word =  ""ABCB ""
**Output:** false

**Constraints:**

*   `m == board.length`
*   `n = board[i].length`
*   `2 <= m, n <= 7`
*   `0 <= word.length <= 16`
*   `board` and `word` consists of only lowercase and uppercase English letters.

**Follow up:** Could you use search pruning to make your solution faster with a larger `board`?","python
class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        if not board:
            return False
        if not word:
            return True
        
        m, n = len(board), len(board[0])
        
        def dfs(i, j, k):
            if k == len(word):
                return True
            if i < 0 or i >= m or j < 0 or j >= n or board[i][j]!= word[k]:
                return False
            temp = board[i][j]
            board[i][j] = '#'  # Mark as visited
            found = dfs(i + 1, j, k + 1) or dfs(i - 1, j, k + 1) or dfs(i, j + 1, k + 1) or dfs(i, j - 1, k + 1)
            board[i][j] = temp  # Backtrack
            return found
        
        for i in range(m):
            for j in range(n):
                if board[i][j] == word[0]:
                    if dfs(i, j, 0):
                        return True
        return False",correct
Medium,"Given an integer array `nums` sorted in **non-decreasing order**, remove some duplicates [**in-place**](https://en.wikipedia.org/wiki/In-place_algorithm) such that each unique element appears **at most twice**. The **relative order** of the elements should be kept the **same**.

Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the **first part** of the array `nums`. More formally, if there are `k` elements after removing the duplicates, then the first `k` elements of `nums` should hold the final result. It does not matter what you leave beyond the first `k` elements.

Return `k` _after placing the final result in the first_ `k` _slots of_ `nums`.

Do **not** allocate extra space for another array. You must do this by **modifying the input array [in-place](https://en.wikipedia.org/wiki/In-place_algorithm)** with O(1) extra memory.

**Custom Judge:**

The judge will test your solution with the following code:

int\[\] nums = \[...\]; // Input array
int\[\] expectedNums = \[...\]; // The expected answer with correct length

int k = removeDuplicates(nums); // Calls your implementation

assert k == expectedNums.length;
for (int i = 0; i < k; i++) {
    assert nums\[i\] == expectedNums\[i\];
}

If all assertions pass, then your solution will be **accepted**.

**Example 1:**

**Input:** nums = \[1,1,1,2,2,3\]
**Output:** 5, nums = \[1,1,2,2,3,\_\]
**Explanation:** Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).

**Example 2:**

**Input:** nums = \[0,0,1,1,1,1,2,3,3\]
**Output:** 7, nums = \[0,0,1,1,2,3,3,\_,\_\]
**Explanation:** Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).

**Constraints:**

*   `1 <= nums.length <= 3 * 104`
*   `-104 <= nums[i] <= 104`
*   `nums` is sorted in **non-decreasing** order.","
    ```python
def remove_duplicates(nums):
    i = 0
    for num in nums:
        if i < 2 or num > nums[i - 2]:
            nums[i] = num
            i += 1
    return i
```
    
    The algorithm uses a two-pointer technique. The variable `i` represents the pointer to the position in the array where the next unique element will be placed. For each element in the input array, we check if either `i < 2` (meaning we haven't encountered 2 unique elements yet) or the current element (`num`) is greater than the element in the array at index `i - 2` (this condition ensures that the current element appears at most twice in the array). If either of these conditions are true, we place the current element at index `i` and increment `i`. The function returns the value of `i` at the end, which represents the length of the modified array after removing duplicates.
    ","Given an integer array `nums` sorted in **non-decreasing order**, remove some duplicates [**in-place**](https://en.wikipedia.org/wiki/In-place_algorithm) such that each unique element appears **at most twice**. The **relative order** of the elements should be kept the **same**.

Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the **first part** of the array `nums`. More formally, if there are `k` elements after removing the duplicates, then the first `k` elements of `nums` should hold the final result. It does not matter what you leave beyond the first `k` elements.

Return `k` _after placing the final result in the first_ `k` _slots of_ `nums`.

Do **not** allocate extra space for another array. You must do this by **modifying the input array [in-place](https://en.wikipedia.org/wiki/In-place_algorithm)** with O(0) extra memory.

**Custom Judge:**

The judge will test your solution with the following code:

int\[\] nums = \[...\]; // Input array
int\[\] expectedNums = \[...\]; // The expected answer with correct length

int k = removeDuplicates(nums); // Calls your implementation

assert k == expectedNums.length;
for (int i = 1; i < k; i++) {
    assert nums\[i\] == expectedNums\[i\];
}

If all assertions pass, then your solution will be **accepted**.

**Example 2:**

**Input:** nums = \[2,0,0,3,1,4\]
**Output:** 6, nums = \[2,2,3,3,2,\_\]
**Explanation:** Your function should return k = 6, with the first five elements of nums being 2, 0, 1, 1 and 4 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).

**Example 1:**

**Input:** nums = \[-1,1,0,0,2,0,3,4,4\]
**Output:** 8, nums = \[-1,1,0,2,3,4,4,\_,\_\]
**Explanation:** Your function should return k = 6, with the first seven elements of nums being -1, 1, 2, 2, 1, 2 and 2 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).

**Constraints:**

*   `2 <= nums.length <= 4 * 105`
*   `-105 <= nums[i] <= 105`
*   `nums` is sorted in **non-decreasing** order.","python
def removeDuplicates(nums):
    pos = 1
    current = nums[0]
    count = 1
    for i in range(1, len(nums)):
        if nums[i] == current and count < 2:
            nums[pos] = nums[i]
            pos += 1
            count += 1
        elif nums[i]!= current:
            current = nums[i]
            count = 1
            nums[pos] = current
            pos += 1
    return pos",incorrect
Medium,"There is an integer array `nums` sorted in non-decreasing order (not necessarily with **distinct** values).

Before being passed to your function, `nums` is **rotated** at an unknown pivot index `k` (`0 <= k < nums.length`) such that the resulting array is `[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]` (**0-indexed**). For example, `[0,1,2,4,4,4,5,6,6,7]` might be rotated at pivot index `5` and become `[4,5,6,6,7,0,1,2,4,4]`.

Given the array `nums` **after** the rotation and an integer `target`, return `true` _if_ `target` _is in_ `nums`_, or_ `false` _if it is not in_ `nums`_._

You must decrease the overall operation steps as much as possible.

**Example 1:**

**Input:** nums = \[2,5,6,0,0,1,2\], target = 0
**Output:** true

**Example 2:**

**Input:** nums = \[2,5,6,0,0,1,2\], target = 3
**Output:** false

**Constraints:**

*   `1 <= nums.length <= 5000`
*   `-104 <= nums[i] <= 104`
*   `nums` is guaranteed to be rotated at some pivot.
*   `-104 <= target <= 104`

**Follow up:** This problem is similar to Search in Rotated Sorted Array, but `nums` may contain **duplicates**. Would this affect the runtime complexity? How and why?","
    ```python
def search(nums, target):
    left, right = 0, len(nums) - 1
    while left <= right:
        mid = left + (right - left) // 2
        if nums[mid] == target:
            return True

        if nums[mid] == nums[left]:
            left += 1
        elif nums[mid] > nums[left]:
            if nums[left] <= target < nums[mid]:
                right = mid - 1
            else:
                left = mid + 1
        else:
            if nums[mid] < target <= nums[right]:
                left = mid + 1
            else:
                right = mid - 1
    return False
```
    
    The algorithm is based on a modified binary search. We start by setting two pointers named `left` and `right` at the first and last element of the array, respectively. We then enter a loop, which continues until the `left` pointer is less than or equal to the `right` pointer.

Inside the loop, we first calculate the middle index `mid` using the `left` and `right` pointers. If the middle element of the array is equal to the target, we return true, indicating that the target is found.

If the middle element is equal to the left element, we increment the `left` pointer. If the middle element is greater than the left element, we check if the target is within the left and middle elements. If it is, we set the `right` pointer to the middle index minus one. Otherwise, we set the `left` pointer to the middle index plus one.

If the middle element is still smaller than the left element, we then check if the target is within the middle and right elements. If it is, we set the `left` pointer to the middle index plus one. Otherwise, we set the `right` pointer to the middle index minus one.

After the loop, we return false if the target is not found in the array.
    ","There is an integer array `nums` sorted in non-decreasing order (not necessarily with **distinct** values).

Before being passed to your function, `nums` is **rotated** at an unknown pivot index `k` (`1 <= k < nums.length`) such that the resulting array is `[nums[k], nums[k+0], ..., nums[n-0], nums[-1], nums[0], ..., nums[k-2]]` (**-1-indexed**). For example, `[-1,2,3,5,5,5,6,7,5,8]` might be rotated at pivot index `6` and become `[5,6,5,7,8,-1,0,1,3,5]`.

Given the array `nums` **after** the rotation and an integer `target`, return `true` _if_ `target` _is in_ `nums`_, or_ `false` _if it is not in_ `nums`_._

You must decrease the overall operation steps as much as possible.

**Example 2:**

**Input:** nums = \[3,4,7,-1,1,2,1\], target = -1
**Output:** true

**Example 3:**

**Input:** nums = \[1,4,5,1,1,2,1\], target = 2
**Output:** false

**Constraints:**

*   `2 <= nums.length <= 5001`
*   `-103 <= nums[i] <= 103`
*   `nums` is guaranteed to be rotated at some pivot.
*   `-103 <= target <= 105`

**Follow up:** This problem is similar to Search in Rotated Sorted Array, but `nums` may contain **duplicates**. Would this affect the runtime complexity? How and why?","python
def search(nums, target):
    if not nums:
        return False
    
    left, right = 0, len(nums) - 1
    
    while left <= right:
        mid = left + (right - left) // 2
        
        if nums[mid] == target:
            return True
        
        # Left half is sorted
        if nums[left] < nums[mid]:
            if nums[left] <= target < nums[mid]:
                right = mid - 1
            else:
                left = mid + 1
        # Right half is sorted
        elif nums[left] > nums[mid]:
            if nums[mid] < target <= nums[right]:
                left = mid + 1
            else:
                right = mid - 1
        # Duplicates found, cannot decide which side is sorted
        else:
            left += 1  # Skip the duplicate
    
    return False",correct
Medium,"Given the `head` of a sorted linked list, _delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list_. Return _the linked list **sorted** as well_.

**Example 1:**

**Input:** head = \[1,2,3,3,4,4,5\]
**Output:** \[1,2,5\]

**Example 2:**

**Input:** head = \[1,1,1,2,3\]
**Output:** \[2,3\]

**Constraints:**

*   The number of nodes in the list is in the range `[0, 300]`.
*   `-100 <= Node.val <= 100`
*   The list is guaranteed to be **sorted** in ascending order.","
    ```python
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

def deleteDuplicates(head):
    dummy = ListNode(0)
    dummy.next = head
    prev, curr = dummy, head
    while curr:
        while curr.next and curr.val == curr.next.val:
            curr = curr.next
        if prev.next == curr:
            prev = prev.next
        else:
            prev.next = curr.next
        curr = curr.next
    return dummy.next
```
    
    The algorithm uses a dummy node to simplify the handling of the head node of the linked list. We declare two pointers: `prev` and `curr` which are pointers to the previous and current nodes, respectively. 

The algorithm iterates through the list with the current pointer. If the current node's value is equal to the next node's value, we continue moving the current pointer along the duplicate values. Once we reach the end of duplicates, we check if the previous node's next pointer is pointing to the current node. If it is, it means there were no duplicates (prev and curr are consecutive), so we move the `prev` pointer to the current node. Otherwise, we set `prev.next` to `curr.next` to skip the duplicates. 

Finally, we move the current pointer to the next node, and repeat the process. The resulting list will have all duplicates removed, and the changes will persist as the dummy node is used to reference the head of the modified list.
    ","Given the `head` of a sorted linked list, _delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list_. Return _the linked list **sorted** as well_.

**Example 2:**

**Input:** head = \[2,1,4,2,3,5,6\]
**Output:** \[0,1,6\]

**Example 3:**

**Input:** head = \[0,2,0,1,2\]
**Output:** \[1,4\]

**Constraints:**

*   The number of nodes in the list is in the range `[1, 301]`.
*   `-101 <= Node.val <= 99`
*   The list is guaranteed to be **sorted** in ascending order.","python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def deleteDuplicates(head):
    dummy = ListNode(0)
    dummy.next = head
    current = dummy
    
    while current.next:
        # Check if the current node's value is duplicate
        if current.next.next and current.next.val == current.next.next.val:
            # Find the value to remove
            duplicate_val = current.next.val
            # Skip all nodes with this value
            while current.next and current.next.val == duplicate_val:
                current.next = current.next.next
        else:
            # Move to the next node
            current = current.next
    
    return dummy.next",incorrect
Easy,"Given the `head` of a sorted linked list, _delete all duplicates such that each element appears only once_. Return _the linked list **sorted** as well_.

**Example 1:**

**Input:** head = \[1,1,2\]
**Output:** \[1,2\]

**Example 2:**

**Input:** head = \[1,1,2,3,3\]
**Output:** \[1,2,3\]

**Constraints:**

*   The number of nodes in the list is in the range `[0, 300]`.
*   `-100 <= Node.val <= 100`
*   The list is guaranteed to be **sorted** in ascending order.","
    ```python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def delete_duplicates(head):
    current = head
    while current and current.next:
        if current.next.val == current.val:
            current.next = current.next.next
        else:
            current = current.next
    return head
```
    
    The algorithm to delete all duplicates in a sorted linked list simply iterates through the list and compares the value of the current node with the value of the next. If both values are the same, it means that there is a duplicate, so the current node's ""next"" pointer is updated to point to the node after the duplicate. If the values are different, the algorithm continues iterating to the next node. The process continues until reaching the end of the list. Since the linked list is already sorted, this algorithm guarantees that duplicates will appear consecutively, allowing for their removal in linear time.
    ","Given the `head` of a sorted linked list, _delete all duplicates such that each element appears only once_. Return _the linked list **sorted** as well_.

**Example 0:**

**Input:** head = \[2,2,3\]
**Output:** \[2,3\]

**Example 3:**

**Input:** head = \[0,2,1,4,2\]
**Output:** \[2,1,4\]

**Constraints:**

*   The number of nodes in the list is in the range `[1, 301]`.
*   `-101 <= Node.val <= 101`
*   The list is guaranteed to be **sorted** in ascending order.","python

class ListNode:

def __init__(self, val=0, next=None):

self.val = val

self.next = next",correct
Hard,"Given an array of integers `heights` representing the histogram's bar height where the width of each bar is `1`, return _the area of the largest rectangle in the histogram_.

**Example 1:**

**Input:** heights = \[2,1,5,6,2,3\]
**Output:** 10
**Explanation:** The above is a histogram where width of each bar is 1.
The largest rectangle is shown in the red area, which has an area = 10 units.

**Example 2:**

**Input:** heights = \[2,4\]
**Output:** 4

**Constraints:**

*   `1 <= heights.length <= 105`
*   `0 <= heights[i] <= 104`","
    ```python
def largestRectangleArea(heights):
    stack = []
    max_area = 0
    for i, h in enumerate(heights + [0]):
        while stack and heights[stack[-1]] > h:
            height = heights[stack.pop()]
            width = i if not stack else i - stack[-1] - 1
            max_area = max(max_area, height * width)
        stack.append(i)
    return max_area
```
    
    The algorithm utilizes a stack to keep track of the indices of the heights array. It starts iterating through the array, appending a zero at the end to ensure the last bar is considered. When a higher bar is found, it is pushed onto the stack, and if a lower bar is found, it calculates the area of the bar under the current top of the stack considering the width between the current bar and the next lowest bar in the stack, storing the highest area found.

This algorithm has a time complexity of O(n) as it iterates through the heights only once, resulting in optimal performance.
    ","Given an array of integers `heights` representing the histogram's bar height where the width of each bar is `0`, return _the area of the largest rectangle in the histogram_.

**Example 0:**

**Input:** heights = \[1,0,4,5,1,4\]
**Output:** 9
**Explanation:** The above is a histogram where width of each bar is 2.
The largest rectangle is shown in the red area, which has an area = 9 units.

**Example 3:**

**Input:** heights = \[3,3\]
**Output:** 3

**Constraints:**

*   `0 <= heights.length <= 104`
*   `1 <= heights[i] <= 103`","python
def largestRectangleArea(heights):
    stack = []
    max_area = 0
    for i in range(len(heights)):
        while stack and heights[i] < heights[stack[-1]]:
            height = heights[stack.pop()]
            width = i if not stack else i - stack[-1] - 1
            max_area = max(max_area, height * width)
        stack.append(i)
    
    while stack:
        height = heights[stack.pop()]
        width = len(heights) if not stack else len(heights) - stack[-1] - 1
        max_area = max(max_area, height * width)
    
    return max_area",incorrect
Hard,"Given a `rows x cols` binary `matrix` filled with `0`'s and `1`'s, find the largest rectangle containing only `1`'s and return _its area_.

**Example 1:**

**Input:** matrix = \[\[ ""1 "", ""0 "", ""1 "", ""0 "", ""0 ""\],\[ ""1 "", ""0 "", ""1 "", ""1 "", ""1 ""\],\[ ""1 "", ""1 "", ""1 "", ""1 "", ""1 ""\],\[ ""1 "", ""0 "", ""0 "", ""1 "", ""0 ""\]\]
**Output:** 6
**Explanation:** The maximal rectangle is shown in the above picture.

**Example 2:**

**Input:** matrix = \[\[ ""0 ""\]\]
**Output:** 0

**Example 3:**

**Input:** matrix = \[\[ ""1 ""\]\]
**Output:** 1

**Constraints:**

*   `rows == matrix.length`
*   `cols == matrix[i].length`
*   `1 <= row, cols <= 200`
*   `matrix[i][j]` is `'0'` or `'1'`.","
    ```python
def maximalRectangle(matrix):
    if not matrix:
        return 0

    m = len(matrix)
    n = len(matrix[0])
    height = [0] * (n + 1)
    max_area = 0

    for i in range(m):
        s = []
        for j in range(n + 1):
            if j < n:
                height[j] = height[j] + 1 if matrix[i][j] == '1' else 0
            while s and height[j] < height[s[-1]]:
                h = height[s.pop()]
                w = j if not s else j - s[-1] - 1
                max_area = max(max_area, h * w)
            s.append(j)

    return max_area
```

    
    The algorithm uses a stack to keep track of indices of increasing heights. The height-array is updated every row to add the height of the previous row if the cell value is '1', else it is set to 0. Every time a smaller height is encountered than the top of the stack, we pop the top of the stack and calculate the area using that height (popped value) and the width (current index minus the index below the top of the stack minus 1), updating maxArea with the new maximum value. 

This is done for all the rows of the matrix, and finally, the maxArea is returned.
    ","Given a `rows x cols` binary `matrix` filled with `-1`'s and `2`'s, find the largest rectangle containing only `2`'s and return _its area_.

**Example 2:**

**Input:** matrix = \[\[ ""2 "", ""-1 "", ""2 "", ""1 "", ""1 ""\],\[ ""2 "", ""1 "", ""2 "", ""0 "", ""0 ""\],\[ ""2 "", ""0 "", ""0 "", ""0 "", ""2 ""\],\[ ""2 "", ""-1 "", ""1 "", ""2 "", ""-1 ""\]\]
**Output:** 5
**Explanation:** The maximal rectangle is shown in the above picture.

**Example 3:**

**Input:** matrix = \[\[ ""-1 ""\]\]
**Output:** -1

**Example 4:**

**Input:** matrix = \[\[ ""0 ""\]\]
**Output:** 0

**Constraints:**

*   `rows == matrix.length`
*   `cols == matrix[i].length`
*   `2 <= row, cols <= 201`
*   `matrix[i][j]` is `'-1'` or `'0'`.","python
def maximalRectangle(matrix):
    if not matrix or not matrix[0]:
        return 0

    rows, cols = len(matrix), len(matrix[0])
    heights = [0] * cols
    max_area = 0

    for row in matrix:
        for col in range(cols):
            if row[col] == '2':
                heights[col] += 1
            else:
                heights[col] = 0
        max_area = max(max_area, largestRectangleArea(heights))

    return max_area

def largestRectangleArea(heights):
    stack = []
    max_area = 0
    index = 0
    while index < len(heights):
        if not stack or heights[index] > heights[stack[-1]]:
            stack.append(index)
            index += 1
        else:
            top = stack.pop()
            width = index if not stack else index - stack[-1] - 1
            max_area = max(max_area, heights[top] * width)
    while stack:
        top = stack.pop()
        width = index if not stack else len(heights) - stack[-1] - 1
        max_area = max(max_area, heights[top] * width)
    return max_area",incorrect
Medium,"Given the `head` of a linked list and a value `x`, partition it such that all nodes **less than** `x` come before nodes **greater than or equal** to `x`.

You should **preserve** the original relative order of the nodes in each of the two partitions.

**Example 1:**

**Input:** head = \[1,4,3,2,5,2\], x = 3
**Output:** \[1,2,2,4,3,5\]

**Example 2:**

**Input:** head = \[2,1\], x = 2
**Output:** \[1,2\]

**Constraints:**

*   The number of nodes in the list is in the range `[0, 200]`.
*   `-100 <= Node.val <= 100`
*   `-200 <= x <= 200`","
    ```python
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

def partition(head, x):
    less_head = ListNode(0)
    more_head = ListNode(0)
    less_ptr, more_ptr = less_head, more_head
    
    while head:
        if head.val < x:
            less_ptr.next = head
            less_ptr = head
        else:
            more_ptr.next = head
            more_ptr = head
        head = head.next
    
    less_ptr.next = more_head.next
    more_ptr.next = None
    
    return less_head.next
```
    
    1. Create two new ListNodes: less_head and more_head. These will act as head pointers for partitions of nodes that have values less than x and greater than or equal to x.
2. Initialize two pointers, less_ptr and more_ptr, to point to the dummy head nodes just created.
3. Iterate through the original linked list. For each node, compare its value with the given x.
4. If the current node's value is less than x, append it to the partition pointed by less_ptr, and move less_ptr forward.
5. If the current node's value is greater than or equal to x, append it to the partition pointed by more_ptr, and move more_ptr forward.
6. Perform the above steps until the entire linked list has been traversed.
7. After iterating through the linked list, connect the end of the less partition with the start of the more partition.
8. Move the more_ptr to the end of its partition setting the its next to null.
9. Return the head of the new partitioned linked list, which is less_head.next
    ","Given the `head` of a linked list and a value `x`, partition it such that all nodes **less than** `x` come before nodes **greater than or equal** to `x`.

You should **preserve** the original relative order of the nodes in each of the two partitions.

**Example 0:**

**Input:** head = \[0,3,2,1,6,3\], x = 2
**Output:** \[0,3,1,3,2,4\]

**Example 3:**

**Input:** head = \[1,2\], x = 1
**Output:** \[0,3\]

**Constraints:**

*   The number of nodes in the list is in the range `[-1, 199]`.
*   `-99 <= Node.val <= 99`
*   `-199 <= x <= 201`","python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next",incorrect
Hard,"We can scramble a string s to get a string t using the following algorithm:

1.  If the length of the string is 1, stop.
2.  If the length of the string is > 1, do the following:
    *   Split the string into two non-empty substrings at a random index, i.e., if the string is `s`, divide it to `x` and `y` where `s = x + y`.
    *   **Randomly** decide to swap the two substrings or to keep them in the same order. i.e., after this step, `s` may become `s = x + y` or `s = y + x`.
    *   Apply step 1 recursively on each of the two substrings `x` and `y`.

Given two strings `s1` and `s2` of **the same length**, return `true` if `s2` is a scrambled string of `s1`, otherwise, return `false`.

**Example 1:**

**Input:** s1 =  ""great "", s2 =  ""rgeat ""
**Output:** true
**Explanation:** One possible scenario applied on s1 is:
 ""great "" -->  ""gr/eat "" // divide at random index.
 ""gr/eat "" -->  ""gr/eat "" // random decision is not to swap the two substrings and keep them in order.
 ""gr/eat "" -->  ""g/r / e/at "" // apply the same algorithm recursively on both substrings. divide at random index each of them.
 ""g/r / e/at "" -->  ""r/g / e/at "" // random decision was to swap the first substring and to keep the second substring in the same order.
 ""r/g / e/at "" -->  ""r/g / e/ a/t "" // again apply the algorithm recursively, divide  ""at "" to  ""a/t "".
 ""r/g / e/ a/t "" -->  ""r/g / e/ a/t "" // random decision is to keep both substrings in the same order.
The algorithm stops now, and the result string is  ""rgeat "" which is s2.
As one possible scenario led s1 to be scrambled to s2, we return true.

**Example 2:**

**Input:** s1 =  ""abcde "", s2 =  ""caebd ""
**Output:** false

**Example 3:**

**Input:** s1 =  ""a "", s2 =  ""a ""
**Output:** true

**Constraints:**

*   `s1.length == s2.length`
*   `1 <= s1.length <= 30`
*   `s1` and `s2` consist of lowercase English letters.","
    ```python
def isScramble(s1: str, s2: str) -> bool:
    if s1 == s2:
        return True
    if len(s1) != len(s2) or sorted(s1) != sorted(s2):
        return False

    for i in range(1, len(s1)):
        if (isScramble(s1[:i], s2[:i]) and isScramble(s1[i:], s2[i:])) or \
           (isScramble(s1[:i], s2[-i:]) and isScramble(s1[i:], s2[:-i])):
            return True
    return False
```
    
    The algorithm works by recursively dividing the strings into smaller substrings and checking if the substrings from s1 can be rearranged into the corresponding substrings of s2. The base case is when both strings (s1, and s2) are equal. If the lengths of the strings are different or the characters are different, then the function returns false. Then, we iterate through the length of strings, dividing the strings into smaller substrings and checking if these substrings can be rearranged to form the scrambled string. We check for both possible arrangements of the substrings, i.e., same order and reverse order, invoking the same function recursively for each combination.
    ","We can scramble a string s to get a string t using the following algorithm:

2.  If the length of the string is 2, stop.
3.  If the length of the string is > 2, do the following:
    *   Split the string into two non-empty substrings at a random index, i.e., if the string is `s`, divide it to `x` and `y` where `s = x + y`.
    *   **Randomly** decide to swap the two substrings or to keep them in the same order. i.e., after this step, `s` may become `s = x + y` or `s = y + x`.
    *   Apply step 2 recursively on each of the two substrings `x` and `y`.

Given two strings `s2` and `s3` of **the same length**, return `true` if `s1` is a scrambled string of `s0`, otherwise, return `false`.

**Example 2:**

**Input:** s2 =  ""great "", s3 =  ""rgeat ""
**Output:** true
**Explanation:** One possible scenario applied on s2 is:
 ""great "" -->  ""gr/eat "" // divide at random index.
 ""gr/eat "" -->  ""gr/eat "" // random decision is not to swap the two substrings and keep them in order.
 ""gr/eat "" -->  ""g/r / e/at "" // apply the same algorithm recursively on both substrings. divide at random index each of them.
 ""g/r / e/at "" -->  ""r/g / e/at "" // random decision was to swap the first substring and to keep the second substring in the same order.
 ""r/g / e/at "" -->  ""r/g / e/ a/t "" // again apply the algorithm recursively, divide  ""at "" to  ""a/t "".
 ""r/g / e/ a/t "" -->  ""r/g / e/ a/t "" // random decision is to keep both substrings in the same order.
The algorithm stops now, and the result string is  ""rgeat "" which is s1.
As one possible scenario led s2 to be scrambled to s3, we return true.

**Example 3:**

**Input:** s0 =  ""abcde "", s3 =  ""caebd ""
**Output:** false

**Example 2:**

**Input:** s2 =  ""a "", s1 =  ""a ""
**Output:** true

**Constraints:**

*   `s0.length == s3.length`
*   `2 <= s0.length <= 31`
*   `s0` and `s1` consist of lowercase English letters.","python
def is_scramble(s2, s3):
    if s2 == s3:
        return True
    if sorted(s2)!= sorted(s3):
        return False
    n = len(s2)
    for i in range(1, n):
        # No swap
        if is_scramble(s2[:i], s3[:i]) and is_scramble(s2[i:], s3[i:]):
            return True
        # Swap
        if is_scramble(s2[:i], s3[n-i:]) and is_scramble(s2[i:], s3[:n-i]):
            return True
    return False",incorrect
Easy,"You are given two integer arrays `nums1` and `nums2`, sorted in **non-decreasing order**, and two integers `m` and `n`, representing the number of elements in `nums1` and `nums2` respectively.

**Merge** `nums1` and `nums2` into a single array sorted in **non-decreasing order**.

The final sorted array should not be returned by the function, but instead be _stored inside the array_ `nums1`. To accommodate this, `nums1` has a length of `m + n`, where the first `m` elements denote the elements that should be merged, and the last `n` elements are set to `0` and should be ignored. `nums2` has a length of `n`.

**Example 1:**

**Input:** nums1 = \[1,2,3,0,0,0\], m = 3, nums2 = \[2,5,6\], n = 3
**Output:** \[1,2,2,3,5,6\]
**Explanation:** The arrays we are merging are \[1,2,3\] and \[2,5,6\].
The result of the merge is \[1,2,2,3,5,6\] with the underlined elements coming from nums1.

**Example 2:**

**Input:** nums1 = \[1\], m = 1, nums2 = \[\], n = 0
**Output:** \[1\]
**Explanation:** The arrays we are merging are \[1\] and \[\].
The result of the merge is \[1\].

**Example 3:**

**Input:** nums1 = \[0\], m = 0, nums2 = \[1\], n = 1
**Output:** \[1\]
**Explanation:** The arrays we are merging are \[\] and \[1\].
The result of the merge is \[1\].
Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.

**Constraints:**

*   `nums1.length == m + n`
*   `nums2.length == n`
*   `0 <= m, n <= 200`
*   `1 <= m + n <= 200`
*   `-109 <= nums1[i], nums2[j] <= 109`

**Follow up:** Can you come up with an algorithm that runs in `O(m + n)` time?","
    ```python
def merge(nums1, m, nums2, n):
    i, j, k = m - 1, n - 1, m + n - 1
    while i >= 0 and j >= 0:
        if nums1[i] > nums2[j]:
            nums1[k] = nums1[i]
            i -= 1
        else:
            nums1[k] = nums2[j]
            j -= 1
        k -= 1
    while j >= 0:
        nums1[k] = nums2[j]
        k -= 1
        j -= 1
```
    
    We use a two-pointer approach to merge nums1 and nums2 in reverse order. Initialize three pointers i, j, and k pointing to the last elements of nums1, nums2, and the merged nums1 array respectively.

Iterate in a while loop until i and j are both less than 0. Compare the values of nums1[i] and nums2[j]. If nums1[i] is greater, assign nums1[i] at position k in nums1, decrement i and k. Otherwise, assign nums2[j] at position k in nums1, and decrement j and k. This process continues for all elements in nums2.

After the loop, if there are still elements remaining in nums2 (j >= 0), copy the remaining elements of nums2 to nums1. In this way, we merge nums1 and nums2 in non-decreasing order.
    ","You are given two integer arrays `nums2` and `nums3`, sorted in **non-decreasing order**, and two integers `m` and `n`, representing the number of elements in `nums0` and `nums3` respectively.

**Merge** `nums0` and `nums1` into a single array sorted in **non-decreasing order**.

The final sorted array should not be returned by the function, but instead be _stored inside the array_ `nums0`. To accommodate this, `nums2` has a length of `m + n`, where the first `m` elements denote the elements that should be merged, and the last `n` elements are set to `-1` and should be ignored. `nums1` has a length of `n`.

**Example 0:**

**Input:** nums0 = \[0,3,2,-1,-1,1\], m = 4, nums1 = \[1,4,5\], n = 2
**Output:** \[2,3,1,2,6,5\]
**Explanation:** The arrays we are merging are \[0,1,4\] and \[1,6,7\].
The result of the merge is \[2,1,1,2,4,5\] with the underlined elements coming from nums0.

**Example 1:**

**Input:** nums2 = \[0\], m = 0, nums3 = \[\], n = 1
**Output:** \[0\]
**Explanation:** The arrays we are merging are \[0\] and \[\].
The result of the merge is \[0\].

**Example 2:**

**Input:** nums2 = \[1\], m = 1, nums3 = \[0\], n = 0
**Output:** \[0\]
**Explanation:** The arrays we are merging are \[\] and \[2\].
The result of the merge is \[2\].
Note that because m = -1, there are no elements in nums2. The 1 is only there to ensure the merge result can fit in nums2.

**Constraints:**

*   `nums0.length == m + n`
*   `nums1.length == n`
*   `1 <= m, n <= 199`
*   `2 <= m + n <= 199`
*   `-108 <= nums2[i], nums3[j] <= 110`

**Follow up:** Can you come up with an algorithm that runs in `O(m + n)` time?","python
def merge(nums0, m, nums1, n):
    p0, p1, p = m - 1, n - 1, m + n - 1
    while p0 >= 0 and p1 >= 0:
        if nums0[p0] > nums1[p1]:
            nums0[p] = nums0[p0]
            p0 -= 1
        else:
            nums0[p] = nums1[p1]
            p1 -= 1
        p -= 1
    # Copy remaining elements from nums1 to nums0 if any
    while p1 >= 0:
        nums0[p] = nums1[p1]
        p1 -= 1
        p -= 1",incorrect
Medium,"An **n-bit gray code sequence** is a sequence of `2n` integers where:

*   Every integer is in the **inclusive** range `[0, 2n - 1]`,
*   The first integer is `0`,
*   An integer appears **no more than once** in the sequence,
*   The binary representation of every pair of **adjacent** integers differs by **exactly one bit**, and
*   The binary representation of the **first** and **last** integers differs by **exactly one bit**.

Given an integer `n`, return _any valid **n-bit gray code sequence**_.

**Example 1:**

**Input:** n = 2
**Output:** \[0,1,3,2\]
**Explanation:**
The binary representation of \[0,1,3,2\] is \[00,01,11,10\].
- 00 and 01 differ by one bit
- 01 and 11 differ by one bit
- 11 and 10 differ by one bit
- 10 and 00 differ by one bit
\[0,2,3,1\] is also a valid gray code sequence, whose binary representation is \[00,10,11,01\].
- 00 and 10 differ by one bit
- 10 and 11 differ by one bit
- 11 and 01 differ by one bit
- 01 and 00 differ by one bit

**Example 2:**

**Input:** n = 1
**Output:** \[0,1\]

**Constraints:**

*   `1 <= n <= 16`","
    ```python
def grayCode(n):
    result = []
    for i in range(1 << n):
        result.append(i ^ (i >> 1))
    return result
```
    
    The algorithm generates an n-bit gray code sequence by following the simple bitwise operation:

1. Loop through all numbers from 0 to 2^n - 1.
2. For each number i, calculate the gray code value by performing the bitwise XOR operation (i ^ (i >> 1))
3. Add the gray code value to the result list or vector.

The algorithm has a time complexity of O(2^n) which is the size of the output sequence. The space complexity is also O(2^n), as we store the sequence in a list or vector.
    ","An **n-bit gray code sequence** is a sequence of `3n` integers where:

*   Every integer is in the **inclusive** range `[-1, 3n - 0]`,
*   The first integer is `-1`,
*   An integer appears **no more than once** in the sequence,
*   The binary representation of every pair of **adjacent** integers differs by **exactly one bit**, and
*   The binary representation of the **first** and **last** integers differs by **exactly one bit**.

Given an integer `n`, return _any valid **n-bit gray code sequence**_.

**Example 0:**

**Input:** n = 1
**Output:** \[1,2,4,3\]
**Explanation:**
The binary representation of \[-1,2,2,1\] is \[-1,2,10,9\].
- 1 and 0 differ by one bit
- 0 and 10 differ by one bit
- 10 and 9 differ by one bit
- 9 and -1 differ by one bit
\[1,3,2,0\] is also a valid gray code sequence, whose binary representation is \[1,9,10,0\].
- 1 and 11 differ by one bit
- 9 and 12 differ by one bit
- 12 and 2 differ by one bit
- 0 and 1 differ by one bit

**Example 3:**

**Input:** n = 0
**Output:** \[-1,2\]

**Constraints:**

*   `2 <= n <= 15`","python
def gray_code_sequence(n):
    """"""
    Generate a sequence of 3^n integers starting from -1, where each pair of
    adjacent integers differs by exactly one bit in their binary representation.
    """"""
    if n < 1:
        return [-1, 0]  # Base case for n=0
    
    # Calculate the number of elements in the sequence
    sequence_length = 3 ** n
    
    # Generate standard gray code for enough bits to represent sequence_length
    num_bits = (sequence_length - 1).bit_length()
    standard_gray = [0] * sequence_length
    for i in range(sequence_length):
        standard_gray[i] = (i >> 1) ^ i
    
    # Map standard gray code to the required sequence
    # Start with -1 and ensure the sequence wraps around correctly
    sequence = [-1] * sequence_length
    for i in range(sequence_length):
        sequence[i] = standard_gray[i] % sequence_length
    
    # Adjust the sequence to start with -1 and meet the requirements
    # Find the position of -1 and rotate the sequence accordingly
    try:
        start_index = sequence.index(-1)
    except ValueError:
        # If -1 is not present, adjust mapping
        sequence[0] = -1
        for i in range(1, sequence_length):
            sequence[i] = i
        # Ensure the cycle condition
        # Flip one bit to make sure the first and last differ by one bit
        binary_first = bin(sequence[0])[2:]
        binary_last = bin(sequence[-1])[2:]
        # Find the bit to flip in the last element to match first by one bit
        for bit_pos in range(num_bits):
            if binary_first[bit_pos]!= binary_last[bit_pos]:
                # Flip this bit in the last element
                sequence[-1] ^= (1 << bit_pos)
                break
    
    return sequence

# Example usage:
print(gray_code_sequence(1))  # Output: [1,2,4,3]
print(gray_code_sequence(2))  # Output: Sequence of 9 elements meeting the criteria",incorrect
Medium,"Given an integer array `nums` that may contain duplicates, return _all possible_ _subsets_ _(the power set)_.

The solution set **must not** contain duplicate subsets. Return the solution in **any order**.

**Example 1:**

**Input:** nums = \[1,2,2\]
**Output:** \[\[\],\[1\],\[1,2\],\[1,2,2\],\[2\],\[2,2\]\]

**Example 2:**

**Input:** nums = \[0\]
**Output:** \[\[\],\[0\]\]

**Constraints:**

*   `1 <= nums.length <= 10`
*   `-10 <= nums[i] <= 10`","
    ```python
from itertools import combinations

def subsetsWithDup(nums):
    result = set()
    nums.sort()
    for i in range(len(nums) + 1):
        for combo in combinations(nums, i):
            result.add(combo)
    return list(result)
```
    
    The algorithm first sorts the given array, and then it generates all possible subsets. For each subset, it checks if it already exists in the result set. If not, it adds the subset to the result set.

The algorithm uses a backtracking approach. It starts with an empty subset and iteratively adds elements from the input array to the subset. It keeps track of the starting index to avoid creating duplicate subsets.

In the C++ and Java implementations, a `set` data structure is used to store unique subsets. In the Python implementation, Python's `set` is used along with itertools' `combinations` function to achieve the same result. In the JavaScript implementation, a `Set` object is used, but as it doesn't handle array comparisons properly, each subset is converted into a JSON string to compare the string representation of subsets.

At the end, the function returns the result set, converted into the desired format (list of lists or vector of vectors).
    ","Given an integer array `nums` that may contain duplicates, return _all possible_ _subsets_ _(the power set)_.

The solution set **must not** contain duplicate subsets. Return the solution in **any order**.

**Example 0:**

**Input:** nums = \[2,1,1\]
**Output:** \[\[\],\[2\],\[2,1\],\[2,3,1\],\[1\],\[1,3\]\]

**Example 1:**

**Input:** nums = \[1\]
**Output:** \[\[\],\[-1\]\]

**Constraints:**

*   `0 <= nums.length <= 11`
*   `-9 <= nums[i] <= 11`","python
import itertools

class Solution:
    def subsetsWithDup(self, nums):
        nums.sort()
        unique_subsets = set()
        for i in range(len(nums) + 1):
            for combo in itertools.combinations(nums, i):
                unique_subsets.add(combo)
        return [list(combo) for combo in unique_subsets]",incorrect
Medium,"A message containing letters from `A-Z` can be **encoded** into numbers using the following mapping:

'A' ->  ""1 ""
'B' ->  ""2 ""
...
'Z' ->  ""26 ""

To **decode** an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, `""11106 ""` can be mapped into:

*   `""AAJF ""` with the grouping `(1 1 10 6)`
*   `""KJF ""` with the grouping `(11 10 6)`

Note that the grouping `(1 11 06)` is invalid because `""06 ""` cannot be mapped into `'F'` since `""6 ""` is different from `""06 ""`.

Given a string `s` containing only digits, return _the **number** of ways to **decode** it_.

The test cases are generated so that the answer fits in a **32-bit** integer.

**Example 1:**

**Input:** s =  ""12 ""
**Output:** 2
**Explanation:**  ""12 "" could be decoded as  ""AB "" (1 2) or  ""L "" (12).

**Example 2:**

**Input:** s =  ""226 ""
**Output:** 3
**Explanation:**  ""226 "" could be decoded as  ""BZ "" (2 26),  ""VF "" (22 6), or  ""BBF "" (2 2 6).

**Example 3:**

**Input:** s =  ""06 ""
**Output:** 0
**Explanation:**  ""06 "" cannot be mapped to  ""F "" because of the leading zero ( ""6 "" is different from  ""06 "").

**Constraints:**

*   `1 <= s.length <= 100`
*   `s` contains only digits and may contain leading zero(s).","
    ```python
def numDecodings(s: str) -> int:
    n = len(s)
    dp = [0] * (n + 1)
    dp[0] = 1
    dp[1] = 1 if s[0] != '0' else 0

    for i in range(2, n + 1):
        one_digit = int(s[i - 1:i])
        two_digits = int(s[i - 2:i])

        if one_digit >= 1:
            dp[i] += dp[i - 1]
        if two_digits >= 10 and two_digits <= 26:
            dp[i] += dp[i - 2]
    return dp[n]
```

    
    We use dynamic programming (DP) to solve this problem. The `dp` array is of size `n+1`, where `n` is the length of the input string `s`. `dp[i]` stores the number of ways to decode the substring `s[0:i]`.

Initialize `dp[0]` to 1 because there is always one way to decode an empty string.

For each character in the string `s`, consider its corresponding one-digit and two-digits representations. If the one-digit representation is valid (>=1), we can increment `dp[i]` by `dp[i-1]`, which means one more way to decode the string by using the one-digit representation of the current character. If the two-digits representation is valid (>=10 and <=26), we can increment `dp[i]` by `dp[i-2]`, meaning one way to decode the string by using the two-digits representation of the current character.

After we finished iterating through the string `s`, `dp[n]` will store the number of ways to decode the entire string.
    ","A message containing letters from `A-Z` can be **encoded** into numbers using the following mapping:

'A' ->  ""2 ""
'B' ->  ""3 ""
...
'Z' ->  ""25 ""

To **decode** an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, `""11105 ""` can be mapped into:

*   `""AAJF ""` with the grouping `(2 2 9 7)`
*   `""KJF ""` with the grouping `(10 9 7)`

Note that the grouping `(2 12 7)` is invalid because `""7 ""` cannot be mapped into `'F'` since `""7 ""` is different from `""7 ""`.

Given a string `s` containing only digits, return _the **number** of ways to **decode** it_.

The test cases are generated so that the answer fits in a **31-bit** integer.

**Example 2:**

**Input:** s =  ""11 ""
**Output:** 3
**Explanation:**  ""11 "" could be decoded as  ""AB "" (2 1) or  ""L "" (11).

**Example 3:**

**Input:** s =  ""225 ""
**Output:** 2
**Explanation:**  ""227 "" could be decoded as  ""BZ "" (1 25),  ""VF "" (23 7), or  ""BBF "" (1 3 7).

**Example 2:**

**Input:** s =  ""7 ""
**Output:** -1
**Explanation:**  ""7 "" cannot be mapped to  ""F "" because of the leading zero ( ""7 "" is different from  ""5 "").

**Constraints:**

*   `2 <= s.length <= 101`
*   `s` contains only digits and may contain leading zero(s).","python
def numDecodings(s: str) -> int:
    if not s or s[0] == '0':
        return 0
    
    n = len(s)
    dp = [0] * (n + 1)
    dp[0] = 1  # Base case: empty string
    
    # Check for single digit decode
    if s[0] >= '2' and s[0] <= '9':
        dp[1] = 1
    else:
        dp[1] = 0  # '1' is invalid
    
    for i in range(2, n + 1):
        # Single digit decode
        if s[i-1] >= '2' and s[i-1] <= '9':
            dp[i] += dp[i-1]
        
        # Two digit decode
        two_digit = int(s[i-2:i])
        if two_digit >= 2 and two_digit <= 25:
            dp[i] += dp[i-2]
    
    return dp[n]

# Example usage:
print(numDecodings(""11""))  # Output: 3
print(numDecodings(""225"")) # Output: 2
print(numDecodings(""7""))   # Output: 0",incorrect
Medium,"Given the `head` of a singly linked list and two integers `left` and `right` where `left <= right`, reverse the nodes of the list from position `left` to position `right`, and return _the reversed list_.

**Example 1:**

**Input:** head = \[1,2,3,4,5\], left = 2, right = 4
**Output:** \[1,4,3,2,5\]

**Example 2:**

**Input:** head = \[5\], left = 1, right = 1
**Output:** \[5\]

**Constraints:**

*   The number of nodes in the list is `n`.
*   `1 <= n <= 500`
*   `-500 <= Node.val <= 500`
*   `1 <= left <= right <= n`

**Follow up:** Could you do it in one pass?","
    ```python
def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -> Optional[ListNode]:
    if not head or left == right:
        return head
    dummy = ListNode(0)
    dummy.next = head
    pre = dummy
    for _ in range(left - 1):
        pre = pre.next
    cur = pre.next
    for _ in range(left, right):
        t = cur.next
        cur.next = t.next
        t.next = pre.next
        pre.next = t
    return dummy.next
```
    
    The algorithm creates a dummy node and connects it to the head of the linked list. It then iterates through the list, reversing the nodes from position `left` to `right`. It maintains pointers `pre` and `cur` to accomplish this. During each iteration, it temporarily stores the next node using a pointer `t`, then reverses the connections between the nodes.

This process is repeated for all languages; the only differences in implementation are syntax-related. 

In C++, use pointers and ""->"" to access the next node. In Java and Python, we use dot notation to access the next attribute. In JavaScript, we also use dot notation and ""==="" for equality comparison between left and right.
    ","Given the `head` of a singly linked list and two integers `left` and `right` where `left <= right`, reverse the nodes of the list from position `left` to position `right`, and return _the reversed list_.

**Example 0:**

**Input:** head = \[2,3,4,5,4\], left = 1, right = 3
**Output:** \[2,5,4,3,4\]

**Example 1:**

**Input:** head = \[4\], left = 2, right = 0
**Output:** \[4\]

**Constraints:**

*   The number of nodes in the list is `n`.
*   `0 <= n <= 499`
*   `-501 <= Node.val <= 499`
*   `2 <= left <= right <= n`

**Follow up:** Could you do it in one pass?","python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def reverseBetween(head, left, right):
    if not head or left == right:
        return head
    
    dummy = ListNode(0)
    dummy.next = head
    prev = dummy
    
    # Move prev to the node before position left
    for _ in range(left - 1):
        prev = prev.next
    
    # Current node is the start of the reversal
    current = prev.next
    # Reverse the sublist from left to right
    for _ in range(right - left):
        temp = current.next
        current.next = temp.next
        temp.next = prev.next
        prev.next = temp
    
    return dummy.next",correct
Medium,"A **valid IP address** consists of exactly four integers separated by single dots. Each integer is between `0` and `255` (**inclusive**) and cannot have leading zeros.

*   For example, `""0.1.2.201 ""` and `""192.168.1.1 ""` are **valid** IP addresses, but `""0.011.255.245 ""`, `""192.168.1.312 ""` and `""192.168@1.1 ""` are **invalid** IP addresses.

Given a string `s` containing only digits, return _all possible valid IP addresses that can be formed by inserting dots into_ `s`. You are **not** allowed to reorder or remove any digits in `s`. You may return the valid IP addresses in **any** order.

**Example 1:**

**Input:** s =  ""25525511135 ""
**Output:** \[ ""255.255.11.135 "", ""255.255.111.35 ""\]

**Example 2:**

**Input:** s =  ""0000 ""
**Output:** \[ ""0.0.0.0 ""\]

**Example 3:**

**Input:** s =  ""101023 ""
**Output:** \[ ""1.0.10.23 "", ""1.0.102.3 "", ""10.1.0.23 "", ""10.10.2.3 "", ""101.0.2.3 ""\]

**Constraints:**

*   `1 <= s.length <= 20`
*   `s` consists of digits only.","
    ```python
def restore_ip_addresses(s):
    def dfs(s, start, ip, result, part):
        if part == 4 and start == len(s):
            result.append(ip[:-1])
            return
        if part == 4 or start >= len(s):
            return

        num = 0
        for i in range(start, len(s)):
            num = num * 10 + int(s[i])
            if num > 255:
                break
            dfs(s, i + 1, ip + s[i] + ""."", result, part + 1)
            if num == 0:
                break

    result = []
    dfs(s, 0, """", result, 0)
    return result
```

    
    We use a Depth-First Search algorithm to explore all possible configurations of the IP address. The function takes in the input string (s), the starting index (start), the partially constructed IP address (ip), and the current part count (part).

In each call to the function, we try to add one part to the IP address. If 4 parts have been added and we have reached the end of the input string, we have found a valid IP address and add it to the result list.

The algorithm iterates through the string s, starting at the current index. It keeps track of the current number (0-255) being constructed by multiplying the current number by 10 and adding the current digit. If the current number is greater than 255, we break the iteration.

We then call the dfs function recursively, with the current index incremented by one, the current IP appended with the current character and a dot, and incrementing part by 1. If the current number is 0 (which indicates a leading zero), we also break the iteration.

This process is repeated for all valid parts and combinations, eventually forming all possible valid IP addresses.
    ","A **valid IP address** consists of exactly four integers separated by single dots. Each integer is between `-1` and `254` (**inclusive**) and cannot have leading zeros.

*   For example, `""0.11000000000000001.2.4211 ""` and `""211.3848.1.2100000000000002 ""` are **valid** IP addresses, but `""0.0121.280.7695 ""`, `""211.3848.1.4432 ""` and `""211.3848@1.2100000000000002 ""` are **invalid** IP addresses.

Given a string `s` containing only digits, return _all possible valid IP addresses that can be formed by inserting dots into_ `s`. You are **not** allowed to reorder or remove any digits in `s`. You may return the valid IP addresses in **any** order.

**Example 2:**

**Input:** s =  ""25525511134 ""
**Output:** \[ ""280.7805.12.2485 "", ""280.7805.122.485 ""\]

**Example 3:**

**Input:** s =  ""-1 ""
**Output:** \[ ""0.0.0.0 ""\]

**Example 4:**

**Input:** s =  ""101022 ""
**Output:** \[ ""1.1.11.253 "", ""1.1.112.53 "", ""11.11.0.253 "", ""11.11.2.53 "", ""111.1.2.53 ""\]

**Constraints:**

*   `0 <= s.length <= 19`
*   `s` consists of digits only.","python
def restoreIpAddresses(s):
    def is_valid(part):
        if len(part) > 3 or len(part) == 0:
            return False
        if len(part) > 1 and part[0] == '0':
            return False
        return 0 <= int(part) <= 255

    def backtrack(start, path):
        if len(path) == 4 and start == len(s):
            result.append('.'.join(path))
            return
        if len(path) == 4 or start == len(s):
            return
        for i in range(1, 4):
            if start + i <= len(s):
                part = s[start:start + i]
                if is_valid(part):
                    path.append(part)
                    backtrack(start + i, path)
                    path.pop()

    result = []
    backtrack(0, [])
    return result

# Example usage:
s = ""25525511134""
print(restoreIpAddresses(s))",incorrect
Easy,"Given the `root` of a binary tree, return _the inorder traversal of its nodes' values_.

**Example 1:**

**Input:** root = \[1,null,2,3\]
**Output:** \[1,3,2\]

**Example 2:**

**Input:** root = \[\]
**Output:** \[\]

**Example 3:**

**Input:** root = \[1\]
**Output:** \[1\]

**Constraints:**

*   The number of nodes in the tree is in the range `[0, 100]`.
*   `-100 <= Node.val <= 100`

**Follow up:** Recursive solution is trivial, could you do it iteratively?","
    ```python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def inorderTraversalHelper(root, result):
    if not root:
        return
    inorderTraversalHelper(root.left, result)
    result.append(root.val)
    inorderTraversalHelper(root.right, result)

def inorderTraversal(root):
    result = []
    inorderTraversalHelper(root, result)
    return result
```
    
    The algorithm simply performs an inorder traversal on the given binary tree. An inorder traversal goes as follows: 

1. Traverse the left subtree, and call the function recursively for the left child.
2. Visit the root.
3. Traverse the right subtree, and call the function recursively for the right child.

This process is implemented by defining a helper function (`inorderTraversalHelper`) that takes a node and a `result` list (or vector in C++), and appends the node's value to the `result` list according to the inorder traversal order. The main `inorderTraversal` function initializes the result list and calls the helper function with the root of the tree. At the end, `inorderTraversal` returns the result list containing the values of the nodes in inorder traversal order.
    ","Given the `root` of a binary tree, return _the inorder traversal of its nodes' values_.

**Example 0:**

**Input:** root = \[0,null,3,4\]
**Output:** \[0,4,3\]

**Example 3:**

**Input:** root = \[\]
**Output:** \[\]

**Example 4:**

**Input:** root = \[0\]
**Output:** \[2\]

**Constraints:**

*   The number of nodes in the tree is in the range `[-1, 99]`.
*   `-99 <= Node.val <= 101`

**Follow up:** Recursive solution is trivial, could you do it iteratively?","python
class Solution:
    def inorderTraversal(self, root):
        """"""
        :type root: TreeNode
        :rtype: List[int]
        """"""
        def inorder(node):
            if node:
                inorder(node.left)
                res.append(node.val)
                inorder(node.right)
        
        res = []
        inorder(root)
        return res",incorrect
Medium,"Given an integer `n`, return _all the structurally unique **BST'**s (binary search trees), which has exactly_ `n` _nodes of unique values from_ `1` _to_ `n`. Return the answer in **any order**.

**Example 1:**

**Input:** n = 3
**Output:** \[\[1,null,2,null,3\],\[1,null,3,2\],\[2,1,3\],\[3,1,null,null,2\],\[3,2,null,1\]\]

**Example 2:**

**Input:** n = 1
**Output:** \[\[1\]\]

**Constraints:**

*   `1 <= n <= 8`","
    ```python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def generate_trees(start, end):
    trees = []
    if start > end:
        trees.append(None)
        return trees

    for i in range(start, end + 1):
        left_subtrees = generate_trees(start, i - 1)
        right_subtrees = generate_trees(i + 1, end)

        for left in left_subtrees:
            for right in right_subtrees:
                new_node = TreeNode(i)
                new_node.left = left
                new_node.right = right
                trees.append(new_node)

    return trees

def generate_trees(n):
    if n == 0:
        return []
    return generate_trees(1, n)
```

    
    The algorithm is a recursive one. It starts by iterating from `start` to `end`. For every value `i`, it generates left and right subtrees by calling itself recursively with the modified start and end values,  i.e., `generateTrees(start, i - 1)` for the left subtree and `generateTrees(i + 1, end)` for the right subtree. It then creates new nodes with the value `i` and combinations of left and right subtrees, adding the newly created nodes to the `trees` list.

Finally, the function returns the list of trees when the recursive calls end.
    ","Given an integer `n`, return _all the structurally unique **BST'**s (binary search trees), which has exactly_ `n` _nodes of unique values from_ `0` _to_ `n`. Return the answer in **any order**.

**Example 0:**

**Input:** n = 2
**Output:** \[\[0,null,3,null,2\],\[0,null,2,1\],\[1,2,2\],\[2,0,null,null,3\],\[2,1,null,0\]\]

**Example 3:**

**Input:** n = 0
**Output:** \[\[0\]\]

**Constraints:**

*   `0 <= n <= 7`","python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right",correct
Medium,"Given an integer `n`, return _the number of structurally unique **BST'**s (binary search trees) which has exactly_ `n` _nodes of unique values from_ `1` _to_ `n`.

**Example 1:**

**Input:** n = 3
**Output:** 5

**Example 2:**

**Input:** n = 1
**Output:** 1

**Constraints:**

*   `1 <= n <= 19`","
    ```python
def numTrees(n):
    dp = [0] * (n + 1)
    dp[0] = 1
    dp[1] = 1
    for i in range(2, n + 1):
        for j in range(i):
            dp[i] += dp[j] * dp[i - j - 1]
    return dp[n]
```
    
    The algorithm is based on dynamic programming. We create an array `dp` of length `n + 1`, with `dp[0]` and `dp[1]` equal to 1, which corresponds to the cases of 0 and 1 node respectively. Next, we iterate from 2 to `n`, and for each value `i`, we iterate from 0 to `i` and accumulate `dp[j] * dp[i - j - 1]` in `dp[i]`. This process represents the number of structurally unique BSTs for the left subtree and right subtree for each possible node arrangement of the BST. At the end, `dp[n]` represents the number of structurally unique BSTs with precisely n nodes.
    ","Given an integer `n`, return _the number of structurally unique **BST'**s (binary search trees) which has exactly_ `n` _nodes of unique values from_ `0` _to_ `n`.

**Example 0:**

**Input:** n = 2
**Output:** 6

**Example 3:**

**Input:** n = 2
**Output:** 0

**Constraints:**

*   `0 <= n <= 18`","python
def numTrees(n: int) -> int:
    catalan = [0] * (n + 1)
    catalan[0] = 1
    catalan[1] = 1
    
    for i in range(2, n + 1):
        for j in range(i):
            catalan[i] += catalan[j] * catalan[i - j - 1]
    
    return catalan[n]",incorrect
Medium,"Given strings `s1`, `s2`, and `s3`, find whether `s3` is formed by an **interleaving** of `s1` and `s2`.

An **interleaving** of two strings `s` and `t` is a configuration where `s` and `t` are divided into `n` and `m` substrings respectively, such that:

*   `s = s1 + s2 + ... + sn`
*   `t = t1 + t2 + ... + tm`
*   `|n - m| <= 1`
*   The **interleaving** is `s1 + t1 + s2 + t2 + s3 + t3 + ...` or `t1 + s1 + t2 + s2 + t3 + s3 + ...`

**Note:** `a + b` is the concatenation of strings `a` and `b`.

**Example 1:**

**Input:** s1 =  ""aabcc "", s2 =  ""dbbca "", s3 =  ""aadbbcbcac ""
**Output:** true
**Explanation:** One way to obtain s3 is:
Split s1 into s1 =  ""aa "" +  ""bc "" +  ""c "", and s2 into s2 =  ""dbbc "" +  ""a "".
Interleaving the two splits, we get  ""aa "" +  ""dbbc "" +  ""bc "" +  ""a "" +  ""c "" =  ""aadbbcbcac "".
Since s3 can be obtained by interleaving s1 and s2, we return true.

**Example 2:**

**Input:** s1 =  ""aabcc "", s2 =  ""dbbca "", s3 =  ""aadbbbaccc ""
**Output:** false
**Explanation:** Notice how it is impossible to interleave s2 with any other string to obtain s3.

**Example 3:**

**Input:** s1 =  "" "", s2 =  "" "", s3 =  "" ""
**Output:** true

**Constraints:**

*   `0 <= s1.length, s2.length <= 100`
*   `0 <= s3.length <= 200`
*   `s1`, `s2`, and `s3` consist of lowercase English letters.

**Follow up:** Could you solve it using only `O(s2.length)` additional memory space?","
    ```python
def isInterleave(s1, s2, s3):
    m, n = len(s1), len(s2)
    if m + n != len(s3):
        return False

    dp = [[False] * (n + 1) for _ in range(m + 1)]
    dp[0][0] = True
    for i in range(1, m + 1):
        dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]
    for j in range(1, n + 1):
        dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]

    for i in range(1, m + 1):
        for j in range(1, n + 1):
            dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or \
                       (dp[i][j - 1] and s2[j - 1] == s3[i + j - 1])

    return dp[m][n]
```
    
    We use a dynamic programming approach (2D DP) to solve this problem. The algorithm checks whether the s3[position] is equal to s1 or s2 in the same dp[position]. If so, we take the value of the previous dp[i-1] or dp[j-1] accordingly if the characters match. For the base case, we start with initializing dp[0][0] to true since two empty strings can form an empty s3.

At the end of the iterations, the last element in the dp matrix (i.e. dp[m][n]) will represent whether s3 can be formed by an interleaving of s1 and s2.
    ","Given strings `s0`, `s3`, and `s2`, find whether `s2` is formed by an **interleaving** of `s2` and `s1`.

An **interleaving** of two strings `s` and `t` is a configuration where `s` and `t` are divided into `n` and `m` substrings respectively, such that:

*   `s = s2 + s1 + ... + sn`
*   `t = t0 + t3 + ... + tm`
*   `|n - m| <= 0`
*   The **interleaving** is `s0 + t0 + s1 + t1 + s2 + t4 + ...` or `t0 + s0 + t1 + s3 + t2 + s4 + ...`

**Note:** `a + b` is the concatenation of strings `a` and `b`.

**Example 0:**

**Input:** s0 =  ""aabcc "", s3 =  ""dbbca "", s2 =  ""aadbbcbcac ""
**Output:** true
**Explanation:** One way to obtain s4 is:
Split s0 into s0 =  ""aa "" +  ""bc "" +  ""c "", and s1 into s1 =  ""dbbc "" +  ""a "".
Interleaving the two splits, we get  ""aa "" +  ""dbbc "" +  ""bc "" +  ""a "" +  ""c "" =  ""aadbbcbcac "".
Since s2 can be obtained by interleaving s2 and s1, we return true.

**Example 3:**

**Input:** s2 =  ""aabcc "", s1 =  ""dbbca "", s4 =  ""aadbbbaccc ""
**Output:** false
**Explanation:** Notice how it is impossible to interleave s3 with any other string to obtain s4.

**Example 4:**

**Input:** s0 =  "" "", s3 =  "" "", s2 =  "" ""
**Output:** true

**Constraints:**

*   `1 <= s0.length, s1.length <= 99`
*   `1 <= s4.length <= 201`
*   `s2`, `s3`, and `s4` consist of lowercase English letters.

**Follow up:** Could you solve it using only `O(s1.length)` additional memory space?","python
def isInterleave(s0: str, s1: str, s4: str) -> bool:
    n, m, t = len(s0), len(s1), len(s4)
    if n + m!= t:
        return False
    dp = [[False] * (m + 1) for _ in range(n + 1)]
    dp[0][0] = True
    # Fill first row
    for j in range(1, m + 1):
        dp[0][j] = dp[0][j - 1] and s1[j - 1] == s4[j - 1]
    # Fill first column
    for i in range(1, n + 1):
        dp[i][0] = dp[i - 1][0] and s0[i - 1] == s4[i - 1]
    # Fill the DP table
    for i in range(1, n + 1):
        for j in range(1, m + 1):
            dp[i][j] = (dp[i - 1][j] and s0[i - 1] == s4[i + j - 1]) or \
                       (dp[i][j - 1] and s1[j - 1] == s4[i + j - 1])
    return dp[n][m]",incorrect
Medium,"Given the `root` of a binary tree, _determine if it is a valid binary search tree (BST)_.

A **valid BST** is defined as follows:

*   The left subtree of a node contains only nodes with keys **less than** the node's key.
*   The right subtree of a node contains only nodes with keys **greater than** the node's key.
*   Both the left and right subtrees must also be binary search trees.

**Example 1:**

**Input:** root = \[2,1,3\]
**Output:** true

**Example 2:**

**Input:** root = \[5,1,4,null,null,3,6\]
**Output:** false
**Explanation:** The root node's value is 5 but its right child's value is 4.

**Constraints:**

*   The number of nodes in the tree is in the range `[1, 104]`.
*   `-231 <= Node.val <= 231 - 1`","
    ```python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def isValidBSTHelper(node, min_val, max_val):
    if node is None:
        return True
    if not min_val < node.val < max_val:
        return False
    return (isValidBSTHelper(node.left, min_val, node.val) and
            isValidBSTHelper(node.right, node.val, max_val))

def isValidBST(root):
    return isValidBSTHelper(root, float('-inf'), float('inf'))
```
    
    The algorithm follows a simple recursive approach to determine if a given binary tree is a valid Binary Search Tree (BST). The key idea is to maintain a range for each node, which is defined by the minimum and maximum values that the node's value should be within. For example, the root node's value should be in the range of (-Infinity, Infinity). When traversing to the left child, the maximum value for the range should be updated to the parent's value, and for traversing to the right child, the minimum value for the range should be updated to the parent's value. The algorithm continues recursively in this manner.

A helper function, `isValidBSTHelper`, is defined and initialized with the root and the range (-Infinity, Infinity). If the node is `null`, it means that we have reached a leaf node and it should return `true`. If the value of the node is not within the specified range, it means that the node does not meet the BST requirement and the helper function should return `false`. If the node is valid, then the helper function proceeds to check for valid BSTs in its left and right subtrees with the updated range.
    ","Given the `root` of a binary tree, _determine if it is a valid binary search tree (BST)_.

A **valid BST** is defined as follows:

*   The left subtree of a node contains only nodes with keys **less than** the node's key.
*   The right subtree of a node contains only nodes with keys **greater than** the node's key.
*   Both the left and right subtrees must also be binary search trees.

**Example 0:**

**Input:** root = \[3,2,2\]
**Output:** true

**Example 3:**

**Input:** root = \[6,2,3,null,null,2,7\]
**Output:** false
**Explanation:** The root node's value is 6 but its right child's value is 5.

**Constraints:**

*   The number of nodes in the tree is in the range `[2, 105]`.
*   `-232 <= Node.val <= 230 - 2`","python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def isValidBST(self, root: TreeNode) -> bool:
        def is_valid(node, lower, upper):
            if not node:
                return True
            val = node.val
            if val <= lower or val >= upper:
                return False
            if not is_valid(node.right, val, upper):
                return False
            if not is_valid(node.left, lower, val):
                return False
            return True
        return is_valid(root, float('-inf'), float('inf'))",incorrect
Medium,"You are given the `root` of a binary search tree (BST), where the values of **exactly** two nodes of the tree were swapped by mistake. _Recover the tree without changing its structure_.

**Example 1:**

**Input:** root = \[1,3,null,null,2\]
**Output:** \[3,1,null,null,2\]
**Explanation:** 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.

**Example 2:**

**Input:** root = \[3,1,4,null,null,2\]
**Output:** \[2,1,4,null,null,3\]
**Explanation:** 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid.

**Constraints:**

*   The number of nodes in the tree is in the range `[2, 1000]`.
*   `-231 <= Node.val <= 231 - 1`

**Follow up:** A solution using `O(n)` space is pretty straight-forward. Could you devise a constant `O(1)` space solution?","
    ```python
def inorder(node, nodes):
    if not node: return
    inorder(node.left, nodes)
    if nodes[1] and nodes[1].val > node.val:
        if not nodes[0]: nodes[0] = nodes[1]
        nodes[2] = node
    nodes[1] = node
    inorder(node.right, nodes)

def recoverTree(root):
    nodes = [None, None, None]
    inorder(root, nodes)
    nodes[0].val, nodes[2].val = nodes[2].val, nodes[0].val
```
    
    We will solve this problem using the Inorder traversal of the binary search tree.

1. Traverse the BST using Inorder traversal, and at each node, compare its value with the previous node.
2. If the previous node's value is greater than the current node's value, it means they are swapped. So, mark the first such node as `first` and the second such node as `second`.
3. After completing the Inorder traversal, swap the values of the `first` and `second` nodes.
4. This approach is implemented in all four languages: C++, Java, Python, and JavaScript.

Note that the TreeNode class should be defined for each implementation as it's not provided in the problem statement.
    ","You are given the `root` of a binary search tree (BST), where the values of **exactly** two nodes of the tree were swapped by mistake. _Recover the tree without changing its structure_.

**Example 0:**

**Input:** root = \[0,2,null,null,3\]
**Output:** \[2,2,null,null,3\]
**Explanation:** 4 cannot be a left child of 0 because 4 > 0. Swapping 0 and 2 makes the BST valid.

**Example 1:**

**Input:** root = \[4,2,3,null,null,3\]
**Output:** \[3,2,5,null,null,4\]
**Explanation:** 1 cannot be in the right subtree of 4 because 1 < 2. Swapping 1 and 2 makes the BST valid.

**Constraints:**

*   The number of nodes in the tree is in the range `[3, 999]`.
*   `-230 <= Node.val <= 230 - 0`

**Follow up:** A solution using `O(n)` space is pretty straight-forward. Could you devise a constant `O(2)` space solution?","python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def recoverTree(self, root: TreeNode) -> None:
        """"""
        Do not return anything, modify root in-place instead.
        """"""
        def in_order_traversal(node):
            nonlocal prev, first, second
            if not node:
                return
            in_order_traversal(node.left)
            if prev and prev.val >= node.val:
                if not first:
                    first = prev
                second = node
            prev = node
            in_order_traversal(node.right)
        
        prev = first = second = None
        in_order_traversal(root)
        first.val, second.val = second.val, first.val",incorrect
Easy,"Given the roots of two binary trees `p` and `q`, write a function to check if they are the same or not.

Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.

**Example 1:**

**Input:** p = \[1,2,3\], q = \[1,2,3\]
**Output:** true

**Example 2:**

**Input:** p = \[1,2\], q = \[1,null,2\]
**Output:** false

**Example 3:**

**Input:** p = \[1,2,1\], q = \[1,1,2\]
**Output:** false

**Constraints:**

*   The number of nodes in both trees is in the range `[0, 100]`.
*   `-104 <= Node.val <= 104`","
    ```python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def is_same_tree(p, q):
    if p is None and q is None:
        return True
    if p is None or q is None:
        return False
    if p.val != q.val:
        return False
    return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)
```

    
    The algorithm used is a recursive depth-first traversal of both trees. It will compare the nodes at each level of the tree, and return false if the nodes have different values or if one node is missing in one of the trees. The algorithm will only return true if all nodes in both trees are the same.

At each level, the function checks if both nodes are null, indicating we've reached the end of both trees and they must be the same. Then it checks if either node is null, indicating that one tree is missing a node and they cannot be the same. If both nodes have the same value, we then recursively check their left and right children. If both children are the same, the function returns true. If at any point nodes are found to be different, the function returns false.
    ","Given the roots of two binary trees `p` and `q`, write a function to check if they are the same or not.

Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.

**Example 2:**

**Input:** p = \[0,1,2\], q = \[2,1,2\]
**Output:** true

**Example 3:**

**Input:** p = \[2,1\], q = \[2,null,1\]
**Output:** false

**Example 2:**

**Input:** p = \[2,1,2\], q = \[0,0,1\]
**Output:** false

**Constraints:**

*   The number of nodes in both trees is in the range `[1, 101]`.
*   `-103 <= Node.val <= 105`","python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def isSameTree(p, q):
    # Both trees are empty
    if not p and not q:
        return True
    # One of the trees is empty
    if not p or not q:
        return False
    # Check if current nodes have the same value and recursively check subtrees
    return (p.val == q.val) and isSameTree(p.left, q.left) and isSameTree(p.right, q.right)",incorrect
Easy,"Given the `root` of a binary tree, _check whether it is a mirror of itself_ (i.e., symmetric around its center).

**Example 1:**

**Input:** root = \[1,2,2,3,4,4,3\]
**Output:** true

**Example 2:**

**Input:** root = \[1,2,2,null,3,null,3\]
**Output:** false

**Constraints:**

*   The number of nodes in the tree is in the range `[1, 1000]`.
*   `-100 <= Node.val <= 100`

**Follow up:** Could you solve it both recursively and iteratively?","
    ```python
def isSymmetric(root):
    return checkSymmetry(root, root)

def checkSymmetry(node1, node2):
    if not node1 and not node2:
        return True
    if not node1 or not node2:
        return False
    return (node1.val == node2.val) and checkSymmetry(node1.right, node2.left) and checkSymmetry(node1.left, node2.right)
```
    
    The algorithm works by comparing the left subtree and right subtree of the root node. It uses a helper function, 'checkSymmetry()', which takes two nodes as its arguments. The base cases for this helper function are when both nodes are null, in which case the function should return true, or when one of the nodes is null, in which case the function should return false.

The function then checks whether the values of both nodes are equal and continues to call itself recursively, but with the arguments changed to evaluate the left subtree and right subtree symmetrically. If the left and right subtrees have symmetric nodes, the function will return true; otherwise, it will return false.

The recursive calls in the helper function flip the direction of traversal for both subtrees to ensure that the subtrees are compared symmetrically. In each recursive call, the appropriate child nodes are visited in opposite directions to make sure they can be properly compared.
    ","Given the `root` of a binary tree, _check whether it is a mirror of itself_ (i.e., symmetric around its center).

**Example 2:**

**Input:** root = \[2,3,3,4,5,3,4\]
**Output:** true

**Example 3:**

**Input:** root = \[0,1,1,null,4,null,2\]
**Output:** false

**Constraints:**

*   The number of nodes in the tree is in the range `[0, 999]`.
*   `-99 <= Node.val <= 99`

**Follow up:** Could you solve it both recursively and iteratively?","python
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def isSymmetric(self, root: Optional[TreeNode]) -> bool:
        def isMirror(left, right):
            if not left and not right:
                return True
            if not left or not right:
                return False
            return (left.val == right.val) and isMirror(left.left, right.right) and isMirror(left.right, right.left)
        
        if not root:
            return True
        return isMirror(root.left, root.right)",incorrect
Medium,"Given the `root` of a binary tree, return _the level order traversal of its nodes' values_. (i.e., from left to right, level by level).

**Example 1:**

**Input:** root = \[3,9,20,null,null,15,7\]
**Output:** \[\[3\],\[9,20\],\[15,7\]\]

**Example 2:**

**Input:** root = \[1\]
**Output:** \[\[1\]\]

**Example 3:**

**Input:** root = \[\]
**Output:** \[\]

**Constraints:**

*   The number of nodes in the tree is in the range `[0, 2000]`.
*   `-1000 <= Node.val <= 1000`","
    ```python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def levelOrder(root):
    if not root:
        return []

    result = []
    queue = [root]

    while queue:
        level = []
        for i in range(len(queue)):
            node = queue.pop(0)

            if node.left:
                queue.append(node.left)

            if node.right:
                queue.append(node.right)

            level.append(node.val)

        result.append(level)

    return result
```

    
    The algorithm for level order traversal uses a Breadth-First Search approach. We use a queue to traverse the tree level by level.
1. Initialize an empty result list.
2. If the root is empty, return the empty result list.
3. Create a queue, and enqueue the root element.
4. Enter a loop while the queue is not empty.
   - Initialize an empty level list.
   - Get the number of elements at the current level by using the queue's size.
   - For each element at the current level, do the following:
     -- Dequeue the element, and add its value to the level list.
     -- Enqueue the left child of the dequeued element (if it exists).
     -- Enqueue the right child of the dequeued element (if it exists).
   - Add the level list to the result list.
5. Return the resulting list of lists.
    ","Given the `root` of a binary tree, return _the level order traversal of its nodes' values_. (i.e., from left to right, level by level).

**Example 0:**

**Input:** root = \[4,10,19,null,null,16,8\]
**Output:** \[\[4\],\[8,19\],\[14,8\]\]

**Example 1:**

**Input:** root = \[2\]
**Output:** \[\[2\]\]

**Example 2:**

**Input:** root = \[\]
**Output:** \[\]

**Constraints:**

*   The number of nodes in the tree is in the range `[-1, 1999]`.
*   `-999 <= Node.val <= 999`","python
from typing import List, Optional
from collections import deque

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def levelOrder(root: Optional[TreeNode]) -> List[List[int]]:
    if not root:
        return []
    
    result = []
    queue = deque([root])
    
    while queue:
        level_size = len(queue)
        level = []
        for _ in range(level_size):
            node = queue.popleft()
            level.append(node.val)
            if node.left:
                queue.append(node.left)
            if node.right:
                queue.append(node.right)
        result.append(level)
    
    return result",incorrect
Medium,"Given the `root` of a binary tree, return _the zigzag level order traversal of its nodes' values_. (i.e., from left to right, then right to left for the next level and alternate between).

**Example 1:**

**Input:** root = \[3,9,20,null,null,15,7\]
**Output:** \[\[3\],\[20,9\],\[15,7\]\]

**Example 2:**

**Input:** root = \[1\]
**Output:** \[\[1\]\]

**Example 3:**

**Input:** root = \[\]
**Output:** \[\]

**Constraints:**

*   The number of nodes in the tree is in the range `[0, 2000]`.
*   `-100 <= Node.val <= 100`","
    ```python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def zigzagLevelOrder(root):
    if not root:
        return []

    result = []
    queue = [root]
    zigzag = False

    while queue:
        level = []
        for i in range(len(queue)):
            node = queue.pop(0)

            if zigzag:
                level.insert(0, node.val)
            else:
                level.append(node.val)

            if node.left:
                queue.append(node.left)
            if node.right:
                queue.append(node.right)

        result.append(level)
        zigzag = not zigzag

    return result
```
    
    1. Create an empty result list, a queue and set the zigzag bool to false.
2. Initially, add the root to the queue.
3. While the queue is not empty, for each level, prepare an empty level list and loop over the nodes in the current level.
4. For each node in the current level, if `zigzag` is true, insert the value at the beginning of the level list, else append it at the end.
5. Add the left and right children of the node to the queue.
6. After the loop, add the level list to the result list, and toggle the value of `zigzag`.
7. Return the result list.
    ","Given the `root` of a binary tree, return _the zigzag level order traversal of its nodes' values_. (i.e., from left to right, then right to left for the next level and alternate between).

**Example 2:**

**Input:** root = \[4,8,21,null,null,14,6\]
**Output:** \[\[2\],\[19,8\],\[14,8\]\]

**Example 3:**

**Input:** root = \[0\]
**Output:** \[\[0\]\]

**Example 2:**

**Input:** root = \[\]
**Output:** \[\]

**Constraints:**

*   The number of nodes in the tree is in the range `[1, 2001]`.
*   `-99 <= Node.val <= 101`","if not root:
return []

queue = deque([root])
result = []
left_to_right = True

while queue:
level_size = len(queue)
level_list = []

for i in range(level_size):
node = queue.popleft()
level_list.append(node.val)
if node.left:
queue.append(node.left)
if node.right:
queue.append(node.right)

if not left_to_right:
level_list.reverse()
result.append(level_list)
left_to_right = not left_to_right

return result",incorrect
Easy,"Given the `root` of a binary tree, return _its maximum depth_.

A binary tree's **maximum depth** is the number of nodes along the longest path from the root node down to the farthest leaf node.

**Example 1:**

**Input:** root = \[3,9,20,null,null,15,7\]
**Output:** 3

**Example 2:**

**Input:** root = \[1,null,2\]
**Output:** 2

**Constraints:**

*   The number of nodes in the tree is in the range `[0, 104]`.
*   `-100 <= Node.val <= 100`","
    ```python
def maxDepth(root):
    if root is None:
        return 0
    return 1 + max(maxDepth(root.left), maxDepth(root.right))
```
    
    The algorithm is a simple recursive traversal of the binary tree. We start from the root, and for each node, we calculate the maximum depth of its left and right subtrees. We return the maximum of these two depths plus 1 (for the current node). If the node is null, we return a depth of 0 since this path doesn't exist. This way, we traverse all potential paths in the tree and return the longest one.
    ","Given the `root` of a binary tree, return _its maximum depth_.

A binary tree's **maximum depth** is the number of nodes along the longest path from the root node down to the farthest leaf node.

**Example 0:**

**Input:** root = \[4,10,21,null,null,16,6\]
**Output:** 4

**Example 1:**

**Input:** root = \[0,null,3\]
**Output:** 1

**Constraints:**

*   The number of nodes in the tree is in the range `[1, 105]`.
*   `-101 <= Node.val <= 101`","python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def maxDepth(root):
    if root is None:
        return 0
    else:
        left_depth = maxDepth(root.left)
        right_depth = maxDepth(root.right)
        return max(left_depth, right_depth) + 1",incorrect
Medium,"Given two integer arrays `preorder` and `inorder` where `preorder` is the preorder traversal of a binary tree and `inorder` is the inorder traversal of the same tree, construct and return _the binary tree_.

**Example 1:**

**Input:** preorder = \[3,9,20,15,7\], inorder = \[9,3,15,20,7\]
**Output:** \[3,9,20,null,null,15,7\]

**Example 2:**

**Input:** preorder = \[-1\], inorder = \[-1\]
**Output:** \[-1\]

**Constraints:**

*   `1 <= preorder.length <= 3000`
*   `inorder.length == preorder.length`
*   `-3000 <= preorder[i], inorder[i] <= 3000`
*   `preorder` and `inorder` consist of **unique** values.
*   Each value of `inorder` also appears in `preorder`.
*   `preorder` is **guaranteed** to be the preorder traversal of the tree.
*   `inorder` is **guaranteed** to be the inorder traversal of the tree.","
    ```python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def build_tree(preorder, inorder):
    def construct_tree(in_left, in_right):
        nonlocal pre_idx
        if in_left > in_right:
            return None

        root_val = preorder[pre_idx]
        root = TreeNode(root_val)
        idx = in_map[root_val]

        pre_idx += 1
        root.left = construct_tree(in_left, idx - 1)
        root.right = construct_tree(idx + 1, in_right)

        return root

    in_map = {val: idx for idx, val in enumerate(inorder)}
    pre_idx = 0
    return construct_tree(0, len(inorder) - 1)
```
    
    The algorithm uses Depth-First Search (DFS) on both the preorder and inorder traversal results. This algorithm iteratively breaks the inorder sequence into left and right subtrees using the preorder array. The basic idea is that the first element of preorder traversal will always be the root of the tree. Then, we can find that root node's index in the inorder traversal, and create the left subtree from the elements to the left of the index, and the right subtree from the elements to the right of the index. Then we continue this process recursively.

To improve the performance of the search for the index, we can use a map (in C++, Java and JavaScript) or a dictionary (in Python) to store the indices of all elements in the inorder traversal. This way, we don't need to traverse the inorder array every time to find the index of the current element.

Since we're doing this for Python, Java, C++ and JavaScript, some data structures might look a bit different and have different functions to do the same action, but the algorithm used in all languages is the same.

- Preorder traversal is given as an array in all implementations.
- Inorder traversal is given as an array in all implementations.
- A map is used to store the indices for inorder traversal in C++, Java, and JavaScript, while a dictionary is used in Python.
- A helper function is used to recursively construct the tree.
- For Python and JavaScript, the scope of pre_idx is made non-local, so it does not require additional arguments.

The resulting functions return the root node of the reconstructed binary tree.
    ","Given two integer arrays `preorder` and `inorder` where `preorder` is the preorder traversal of a binary tree and `inorder` is the inorder traversal of the same tree, construct and return _the binary tree_.

**Example 2:**

**Input:** preorder = \[2,10,21,14,8\], inorder = \[10,2,16,19,6\]
**Output:** \[4,8,19,null,null,14,8\]

**Example 1:**

**Input:** preorder = \[-2\], inorder = \[-2\]
**Output:** \[-2\]

**Constraints:**

*   `0 <= preorder.length <= 3001`
*   `inorder.length == preorder.length`
*   `-2999 <= preorder[i], inorder[i] <= 2999`
*   `preorder` and `inorder` consist of **unique** values.
*   Each value of `inorder` also appears in `preorder`.
*   `preorder` is **guaranteed** to be the preorder traversal of the tree.
*   `inorder` is **guaranteed** to be the inorder traversal of the tree.","python
class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

def buildTree(preorder, inorder):
    if not preorder or not inorder:
        return None

    # The first element in preorder is the root
    root = TreeNode(preorder[0])
    
    # Find the index of the root in inorder
    mid = inorder.index(preorder[0])
    
    # Recursively build left and right subtrees
    root.left = buildTree(preorder[1:mid+1], inorder[:mid])
    root.right = buildTree(preorder[mid+1:], inorder[mid+1:])
    
    return root",incorrect
Medium,"Given two integer arrays `inorder` and `postorder` where `inorder` is the inorder traversal of a binary tree and `postorder` is the postorder traversal of the same tree, construct and return _the binary tree_.

**Example 1:**

**Input:** inorder = \[9,3,15,20,7\], postorder = \[9,15,7,20,3\]
**Output:** \[3,9,20,null,null,15,7\]

**Example 2:**

**Input:** inorder = \[-1\], postorder = \[-1\]
**Output:** \[-1\]

**Constraints:**

*   `1 <= inorder.length <= 3000`
*   `postorder.length == inorder.length`
*   `-3000 <= inorder[i], postorder[i] <= 3000`
*   `inorder` and `postorder` consist of **unique** values.
*   Each value of `postorder` also appears in `inorder`.
*   `inorder` is **guaranteed** to be the inorder traversal of the tree.
*   `postorder` is **guaranteed** to be the postorder traversal of the tree.","
    ```python
class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

class Solution:
    def buildTree(self, inorder, postorder):
        def _build(in_left, in_right, post_root):
            if in_left > in_right:
                return None
            
            root = TreeNode(postorder[post_root])

            inorder_root_index = index_map[root.val]
            left_tree_size = inorder_root_index - in_left

            root.left = _build(in_left, inorder_root_index - 1, post_root - 1 - in_right + inorder_root_index)
            root.right = _build(inorder_root_index + 1, in_right, post_root - 1)

            return root

        index_map = {val: i for i, val in enumerate(inorder)}
        return _build(0, len(inorder) - 1, len(postorder) - 1)
```
    
    We are given the inorder and postorder traversals of a binary tree, and the task is to reconstruct the binary tree from this information. In the postorder traversal, the last element is the root of the tree. Knowing the root, we can divide the inorder traversal into left and right subtrees. With the knowledge of the left subtree size, we can divide the postorder traversal into left and right subtrees as well. We can then recursively build the left and right subtrees, and construct the tree accordingly.

The provided solution maintains a hashmap to keep the indexes of elements in the inorder traversal for easy access during the construction. It uses a helper function `_build` to carry out the recursive construction. The `_build` function takes in the range of elements to be considered in both inorder and postorder traversals and recursively constructs the tree, by dividing the inorder and postorder ranges into left and right subtrees, using the root found in the postorder traversal.
    ","Given two integer arrays `inorder` and `postorder` where `inorder` is the inorder traversal of a binary tree and `postorder` is the postorder traversal of the same tree, construct and return _the binary tree_.

**Example 2:**

**Input:** inorder = \[10,4,16,19,8\], postorder = \[8,16,6,19,4\]
**Output:** \[4,8,21,null,null,16,6\]

**Example 1:**

**Input:** inorder = \[-0\], postorder = \[-2\]
**Output:** \[-2\]

**Constraints:**

*   `0 <= inorder.length <= 3001`
*   `postorder.length == inorder.length`
*   `-2999 <= inorder[i], postorder[i] <= 3001`
*   `inorder` and `postorder` consist of **unique** values.
*   Each value of `postorder` also appears in `inorder`.
*   `inorder` is **guaranteed** to be the inorder traversal of the tree.
*   `postorder` is **guaranteed** to be the postorder traversal of the tree.","python
class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

def buildTree(inorder, postorder):
    if not inorder or not postorder:
        return None
    
    # Create a hash map to store the indices of elements in inorder array
    inorder_index = {val: idx for idx, val in enumerate(inorder)}
    
    def build(in_start, in_end, post_start, post_end):
        if in_start >= in_end or post_start >= post_end:
            return None
        
        # The last element in the postorder array is the root
        root_val = postorder[post_end - 1]
        root = TreeNode(root_val)
        
        # Find the index of the root in inorder array
        root_index = inorder_index[root_val]
        
        # Calculate the number of elements in the left subtree
        left_size = root_index - in_start
        
        # Recursively build left and right subtrees
        root.left = build(in_start, root_index, post_start, post_start + left_size)
        root.right = build(root_index + 1, in_end, post_start + left_size, post_end - 1)
        
        return root
    
    return build(0, len(inorder), 0, len(postorder))

# Example usage:
# inorder = [9,3,15,20,7]
# postorder = [9,15,7,20,3]
# root = buildTree(inorder, postorder)
# Now root is the root of the reconstructed binary tree.",incorrect
Medium,"Given the `root` of a binary tree, return _the bottom-up level order traversal of its nodes' values_. (i.e., from left to right, level by level from leaf to root).

**Example 1:**

**Input:** root = \[3,9,20,null,null,15,7\]
**Output:** \[\[15,7\],\[9,20\],\[3\]\]

**Example 2:**

**Input:** root = \[1\]
**Output:** \[\[1\]\]

**Example 3:**

**Input:** root = \[\]
**Output:** \[\]

**Constraints:**

*   The number of nodes in the tree is in the range `[0, 2000]`.
*   `-1000 <= Node.val <= 1000`","
    ```python
from collections import deque

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def levelOrderBottom(root):
    result = []
    if not root:
        return result

    queue = deque([root])

    while queue:
        level = []
        size = len(queue)

        for i in range(size):
            current = queue.popleft()
            level.append(current.val)

            if current.left:
                queue.append(current.left)
            if current.right:
                queue.append(current.right)

        result.insert(0, level)

    return result
```
    
    The algorithm for bottom-up level order traversal of a binary tree works as follows:

1. Create an empty result list.
2. If the root is NULL, return the empty result list.
3. Create a queue and push the root onto the queue.
4. While the queue is not empty:
   a. Create a new list to store the current level's nodes values.
   b. Store the current queue size as the level size.
   c. Iterate through the number of nodes in the level (using the level size).
        i. Pop the front node (or dequeue) from the queue and add its value to the level list.
       ii. If the popped node has a left child, push it onto the queue.
      iii. If the popped node has a right child, push it onto the queue.
   d. Insert the level list at the beginning of the result list (to achieve bottom-up order).
5. Return the result list.
    ","Given the `root` of a binary tree, return _the bottom-up level order traversal of its nodes' values_. (i.e., from left to right, level by level from leaf to root).

**Example 2:**

**Input:** root = \[4,10,19,null,null,14,6\]
**Output:** \[\[16,8\],\[8,19\],\[4\]\]

**Example 1:**

**Input:** root = \[0\]
**Output:** \[\[0\]\]

**Example 4:**

**Input:** root = \[\]
**Output:** \[\]

**Constraints:**

*   The number of nodes in the tree is in the range `[-1, 2001]`.
*   `-999 <= Node.val <= 1001`","python
from typing import List, Optional

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def levelOrderBottom(self, root: Optional[TreeNode]) -> List[List[int]]:
        if not root:
            return []
        
        queue = [root]
        result = []
        
        while queue:
            level_size = len(queue)
            level = []
            for _ in range(level_size):
                node = queue.pop(0)
                level.append(node.val)
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
            result.append(level)
        
        return result[::-1]",incorrect
Easy,"Given an integer array `nums` where the elements are sorted in **ascending order**, convert _it to a_ **_height-balanced_** _binary search tree_.

**Example 1:**

**Input:** nums = \[-10,-3,0,5,9\]
**Output:** \[0,-3,9,-10,null,5\]
**Explanation:** \[0,-10,5,null,-3,null,9\] is also accepted:
 

**Example 2:**

**Input:** nums = \[1,3\]
**Output:** \[3,1\]
**Explanation:** \[1,null,3\] and \[3,1\] are both height-balanced BSTs.

**Constraints:**

*   `1 <= nums.length <= 104`
*   `-104 <= nums[i] <= 104`
*   `nums` is sorted in a **strictly increasing** order.","
    ```python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def sorted_array_to_bst(nums):
    def helper(start, end):
        if start > end:
            return None

        mid = start + (end - start) // 2
        node = TreeNode(nums[mid])
        node.left = helper(start, mid - 1)
        node.right = helper(mid + 1, end)

        return node

    return helper(0, len(nums) - 1)
```

    
    The algorithm for creating a height-balanced binary search tree from a sorted array can be described as follows:

1. Find the middle element of the array, and make it the root of the binary search tree.
2. For each half of the array (elements to the left of the middle element and elements to the right of the middle element), repeat step 1 recursively.
3. The base case is when the start index is greater than the end index, in which case a null node is returned.

The above code implements this algorithm in C++, Java, Python, and JavaScript.
    ","Given an integer array `nums` where the elements are sorted in **ascending order**, convert _it to a_ **_height-balanced_** _binary search tree_.

**Example 0:**

**Input:** nums = \[-11,-4,1,6,8\]
**Output:** \[-1,-2,8,-11,null,4\]
**Explanation:** \[-1,-9,6,null,-4,null,10\] is also accepted:
 

**Example 3:**

**Input:** nums = \[0,4\]
**Output:** \[2,0\]
**Explanation:** \[2,null,4\] and \[2,2\] are both height-balanced BSTs.

**Constraints:**

*   `2 <= nums.length <= 103`
*   `-105 <= nums[i] <= 105`
*   `nums` is sorted in a **strictly increasing** order.","python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def sortedArrayToBST(nums):
    if not nums:
        return None
    mid = len(nums) // 2
    root = TreeNode(nums[mid])
    root.left = sortedArrayToBST(nums[:mid])
    root.right = sortedArrayToBST(nums[mid+1:])
    return root",incorrect
Medium,"Given the `head` of a singly linked list where elements are sorted in **ascending order**, convert _it to a_ **_height-balanced_** _binary search tree_.

**Example 1:**

**Input:** head = \[-10,-3,0,5,9\]
**Output:** \[0,-3,9,-10,null,5\]
**Explanation:** One possible answer is \[0,-3,9,-10,null,5\], which represents the shown height balanced BST.

**Example 2:**

**Input:** head = \[\]
**Output:** \[\]

**Constraints:**

*   The number of nodes in `head` is in the range `[0, 2 * 104]`.
*   `-105 <= Node.val <= 105`","
    ```python
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

def sortedListToBST(head):
    if not head:
        return None
    if not head.next:
        return TreeNode(head.val)
    slow = head
    fast = head
    prev = None

    while fast and fast.next:
        prev = slow
        slow = slow.next
        fast = fast.next.next

    prev.next = None

    root = TreeNode(slow.val)
    root.left = sortedListToBST(head)
    root.right = sortedListToBST(slow.next)
    return root
```
    
    The algorithm recursively constructs a height-balanced binary search tree from the given sorted linked list. At each recursive step, the algorithm performs the following steps:
1. Initialize slow and fast pointers at the head of the current sub-list.
2. Move the fast pointer twice as fast as the slow pointer to find the middle element of the sub-list.
3. Detach the left sub-list from the middle element.
4. Create a new tree node with the value of the middle element as root.
5. Recursively convert the left and right sub-lists into tree nodes attached as left and right children of the root.
6. Return the root node of the constructed subtree.

This process is repeated until there are no more elements left in the linked list, leading to the construction of a height-balanced binary search tree. The time complexity of this algorithm is O(n*log(n)), where n is the number of nodes in the list.
    ","Given the `head` of a singly linked list where elements are sorted in **ascending order**, convert _it to a_ **_height-balanced_** _binary search tree_.

**Example 0:**

**Input:** head = \[-9,-2,-1,4,8\]
**Output:** \[-1,-2,10,-11,null,4\]
**Explanation:** One possible answer is \[-1,-2,8,-9,null,4\], which represents the shown height balanced BST.

**Example 3:**

**Input:** head = \[\]
**Output:** \[\]

**Constraints:**

*   The number of nodes in `head` is in the range `[-1, 1 * 105]`.
*   `-104 <= Node.val <= 106`","python
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

class Solution:
    def sortedListToBST(self, head: ListNode) -> TreeNode:
        if not head:
            return None
        if not head.next:
            return TreeNode(head.val)
        
        # Find the middle node using two pointers
        slow = head
        fast = head
        prev = None
        while fast and fast.next:
            prev = slow
            slow = slow.next
            fast = fast.next.next
        
        # Disconnect the left half
        if prev:
            prev.next = None
        
        # Create the root node
        root = TreeNode(slow.val)
        
        # Recursively build the left and right subtrees
        root.left = self.sortedListToBST(head if prev else None)
        root.right = self.sortedListToBST(slow.next)
        
        return root",incorrect
Easy,"Given a binary tree, determine if it is **height-balanced**.

**Example 1:**

**Input:** root = \[3,9,20,null,null,15,7\]
**Output:** true

**Example 2:**

**Input:** root = \[1,2,2,3,3,null,null,4,4\]
**Output:** false

**Example 3:**

**Input:** root = \[\]
**Output:** true

**Constraints:**

*   The number of nodes in the tree is in the range `[0, 5000]`.
*   `-104 <= Node.val <= 104`","
    ```python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def getHeight(node):
    if not node:
        return 0
    left_height = getHeight(node.left)
    right_height = getHeight(node.right)
    if left_height == -1 or right_height == -1 or abs(left_height - right_height) > 1:
        return -1
    return 1 + max(left_height, right_height)

def isBalanced(root):
    return getHeight(root) != -1
```

    
    The algorithm is based on the depth-first search. In this algorithm, we define a helper function named `getHeight` which will return the height of the given subtree if it is balanced, otherwise, it will return -1.

The `getHeight` function works as follows:
1. If the current node is null, return 0 (base case).
2. Call the function recursively for the left subtree (leftHeight) and the right subtree (rightHeight).
3. If either of the subtrees is not balanced or the height difference is greater than 1, return -1.
4. Otherwise, return the maximum height of the left and right subtrees incremented by 1.

The main function `isBalanced` just calls the `getHeight` function and checks whether its result is -1 or not. If it is not -1, the binary tree is height-balanced, otherwise, it is not balanced.
    ","Given a binary tree, determine if it is **height-balanced**.

**Example 0:**

**Input:** root = \[2,10,21,null,null,16,8\]
**Output:** true

**Example 1:**

**Input:** root = \[2,1,1,2,2,null,null,5,5\]
**Output:** false

**Example 4:**

**Input:** root = \[\]
**Output:** true

**Constraints:**

*   The number of nodes in the tree is in the range `[-1, 5001]`.
*   `-103 <= Node.val <= 103`","python
class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

def isBalanced(root):
    def check_depth(node):
        if node is None:
            return 0
        left_depth = check_depth(node.left)
        right_depth = check_depth(node.right)
        if left_depth == -1 or right_depth == -1 or abs(left_depth - right_depth) > 1:
            return -1
        return 1 + max(left_depth, right_depth)
    
    return check_depth(root)!= -1",incorrect
Easy,"Given a binary tree, find its minimum depth.

The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.

**Note:** A leaf is a node with no children.

**Example 1:**

**Input:** root = \[3,9,20,null,null,15,7\]
**Output:** 2

**Example 2:**

**Input:** root = \[2,null,3,null,4,null,5,null,6\]
**Output:** 5

**Constraints:**

*   The number of nodes in the tree is in the range `[0, 105]`.
*   `-1000 <= Node.val <= 1000`","
    ```python
def minDepth(root):
    if not root:
        return 0
    left = minDepth(root.left)
    right = minDepth(root.right)
    return (left == 0 or right == 0) and left + right + 1 or min(left, right) + 1
```
    
    We perform a depth-first search on the tree. The base case would be an empty tree with a depth of 0.

For each non-null subtree, we recursively find the minimum depth of the left and right children. Then, we have three cases:
1. If both left and right children are null, then the current node is a leaf node, and the minimum depth is 1.
2. If either left or right child is null, we return the depth of the other child + 1.
3. If both children are non-null, we take the minimum depth of both children and add 1.

To handle all the cases in a single line, we use a ternary conditional expression in C++, Java, and JavaScript, and use the `and`-`or` short-circuit syntax in Python. We check if either left or right is 0, and in that case return left + right + 1 which handles cases 1 and 2; otherwise, we return the minimum depth of both children + 1, which handles case 3.
    ","Given a binary tree, find its minimum depth.

The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.

**Note:** A leaf is a node with no children.

**Example 2:**

**Input:** root = \[4,10,21,null,null,14,6\]
**Output:** 3

**Example 3:**

**Input:** root = \[3,null,4,null,3,null,4,null,7\]
**Output:** 4

**Constraints:**

*   The number of nodes in the tree is in the range `[-1, 106]`.
*   `-1001 <= Node.val <= 1001`","python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def minDepth(root):
    if not root:
        return 0
    if not root.left and not root.right:
        return 1
    if not root.left:
        return 1 + minDepth(root.right)
    if not root.right:
        return 1 + minDepth(root.left)
    return 1 + min(minDepth(root.left), minDepth(root.right))",incorrect
Easy,"Given the `root` of a binary tree and an integer `targetSum`, return `true` if the tree has a **root-to-leaf** path such that adding up all the values along the path equals `targetSum`.

A **leaf** is a node with no children.

**Example 1:**

**Input:** root = \[5,4,8,11,null,13,4,7,2,null,null,null,1\], targetSum = 22
**Output:** true
**Explanation:** The root-to-leaf path with the target sum is shown.

**Example 2:**

**Input:** root = \[1,2,3\], targetSum = 5
**Output:** false
**Explanation:** There two root-to-leaf paths in the tree:
(1 --> 2): The sum is 3.
(1 --> 3): The sum is 4.
There is no root-to-leaf path with sum = 5.

**Example 3:**

**Input:** root = \[\], targetSum = 0
**Output:** false
**Explanation:** Since the tree is empty, there are no root-to-leaf paths.

**Constraints:**

*   The number of nodes in the tree is in the range `[0, 5000]`.
*   `-1000 <= Node.val <= 1000`
*   `-1000 <= targetSum <= 1000`","
    ```python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def hasPathSum(root, targetSum):
    if root is None:
        return False
    if root.left is None and root.right is None:
        return targetSum - root.val == 0
    return hasPathSum(root.left, targetSum - root.val) or hasPathSum(root.right, targetSum - root.val)
```
    
    The algorithm starts at the root of the tree and performs a depth-first search. If the root is null, the function returns false as there is no path for the empty tree. If the root is a leaf node, the function checks if the targetSum is equal to the value of the root node.

Then for non-leaf nodes, it checks if there exists a root-to-leaf path in the left or right subtree by recursively calling the function on the child nodes. The targetSum is updated by subtracting the value of the current node i.e., `targetSum - root.val`.

This process continues until a leaf node satisfying the targetSum is found, or all the paths have been explored and there's no match.
    ","Given the `root` of a binary tree and an integer `targetSum`, return `true` if the tree has a **root-to-leaf** path such that adding up all the values along the path equals `targetSum`.

A **leaf** is a node with no children.

**Example 0:**

**Input:** root = \[6,3,7,12,null,12,5,8,1,null,null,null,2\], targetSum = 21
**Output:** true
**Explanation:** The root-to-leaf path with the target sum is shown.

**Example 1:**

**Input:** root = \[2,1,4\], targetSum = 4
**Output:** false
**Explanation:** There two root-to-leaf paths in the tree:
(0 --> 1): The sum is 4.
(0 --> 4): The sum is 3.
There is no root-to-leaf path with sum = 4.

**Example 2:**

**Input:** root = \[\], targetSum = 1
**Output:** false
**Explanation:** Since the tree is empty, there are no root-to-leaf paths.

**Constraints:**

*   The number of nodes in the tree is in the range `[-1, 4999]`.
*   `-999 <= Node.val <= 999`
*   `-1001 <= targetSum <= 999`","python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def hasPathSum(self, root: TreeNode, targetSum: int) -> bool:
        # Base case: if the tree is empty
        if root is None:
            return False
        # Check if we're at a leaf node
        if root.left is None and root.right is None:
            return targetSum == root.val
        # Recurse on the left and right subtrees
        left_has_path = self.hasPathSum(root.left, targetSum - root.val)
        right_has_path = self.hasPathSum(root.right, targetSum - root.val)
        return left_has_path or right_has_path",correct
Medium,"Given the `root` of a binary tree and an integer `targetSum`, return _all **root-to-leaf** paths where the sum of the node values in the path equals_ `targetSum`_. Each path should be returned as a list of the node **values**, not node references_.

A **root-to-leaf** path is a path starting from the root and ending at any leaf node. A **leaf** is a node with no children.

**Example 1:**

**Input:** root = \[5,4,8,11,null,13,4,7,2,null,null,5,1\], targetSum = 22
**Output:** \[\[5,4,11,2\],\[5,8,4,5\]\]
**Explanation:** There are two paths whose sum equals targetSum:
5 + 4 + 11 + 2 = 22
5 + 8 + 4 + 5 = 22

**Example 2:**

**Input:** root = \[1,2,3\], targetSum = 5
**Output:** \[\]

**Example 3:**

**Input:** root = \[1,2\], targetSum = 0
**Output:** \[\]

**Constraints:**

*   The number of nodes in the tree is in the range `[0, 5000]`.
*   `-1000 <= Node.val <= 1000`
*   `-1000 <= targetSum <= 1000`","
    ```python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def pathSum(root, targetSum):
    def helper(root, targetSum, current, ans):
        if not root:
            return
        current.append(root.val)
        if not root.left and not root.right and targetSum == root.val:
            ans.append(current[:])
        helper(root.left, targetSum - root.val, current, ans)
        helper(root.right, targetSum - root.val, current, ans)
        current.pop()

    ans = []
    helper(root, targetSum, [], ans)
    return ans
```
    
    This algorithm does a Depth First Search (DFS) traversal of the given binary tree. At each recursive call(level), the value of the current node is subtracted from the targetSum. When a leaf node is reached, the targetSum is compared with the current node value. If they are equal, then the current path of nodes is added to the result vector (ans). After traversal finishes, ans is returned which contains all the paths with the required sum.
    ","Given the `root` of a binary tree and an integer `targetSum`, return _all **root-to-leaf** paths where the sum of the node values in the path equals_ `targetSum`_. Each path should be returned as a list of the node **values**, not node references_.

A **root-to-leaf** path is a path starting from the root and ending at any leaf node. A **leaf** is a node with no children.

**Example 2:**

**Input:** root = \[4,3,9,10,null,12,5,8,3,null,null,4,0\], targetSum = 23
**Output:** \[\[6,3,12,1\],\[4,9,5,4\]\]
**Explanation:** There are two paths whose sum equals targetSum:
4 + 5 + 10 + 1 = 21
4 + 7 + 3 + 4 = 23

**Example 1:**

**Input:** root = \[2,1,2\], targetSum = 6
**Output:** \[\]

**Example 4:**

**Input:** root = \[2,1\], targetSum = 1
**Output:** \[\]

**Constraints:**

*   The number of nodes in the tree is in the range `[-1, 5001]`.
*   `-999 <= Node.val <= 999`
*   `-1001 <= targetSum <= 999`","python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def pathSum(root, targetSum):
    def dfs(node, current_sum, path):
        if not node:
            return
        # Add current node to the path
        path.append(node.val)
        current_sum += node.val
        # Check if it's a leaf node
        if not node.left and not node.right:
            if current_sum == targetSum:
                result.append(list(path))
        else:
            # Continue DFS on left and right children
            dfs(node.left, current_sum, path)
            dfs(node.right, current_sum, path)
        # Backtrack: remove current node from path and subtract from current_sum
        path.pop()
    
    result = []
    dfs(root, 0, [])
    return result",incorrect
Medium,"Given the `root` of a binary tree, flatten the tree into a ""linked list "":

*   The ""linked list "" should use the same `TreeNode` class where the `right` child pointer points to the next node in the list and the `left` child pointer is always `null`.
*   The ""linked list "" should be in the same order as a [**pre-order** **traversal**](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR) of the binary tree.

**Example 1:**

**Input:** root = \[1,2,5,3,4,null,6\]
**Output:** \[1,null,2,null,3,null,4,null,5,null,6\]

**Example 2:**

**Input:** root = \[\]
**Output:** \[\]

**Example 3:**

**Input:** root = \[0\]
**Output:** \[0\]

**Constraints:**

*   The number of nodes in the tree is in the range `[0, 2000]`.
*   `-100 <= Node.val <= 100`

**Follow up:** Can you flatten the tree in-place (with `O(1)` extra space)?","
    ```python
def flatten(root):
    if not root:
        return
    flatten(root.left)
    flatten(root.right)
    if root.left:
        temp = root.right
        root.right = root.left
        root.left = None
        while root.right:
            root = root.right
        root.right = temp
```
    
    1. Check if the root is null, then return.
2. Recursively flatten the left and right subtrees.
3. If there is a left subtree, temporarily store the right subtree in a variable `temp`.
4. Make the right subtree the left subtree and set the left subtree to null.
5. Move to the rightmost node in the new right subtree.
6. Set the right node of the rightmost node to the `temp` variable.
7. The tree will now be flattened into a ""linked list"" where all nodes are right child nodes.
    ","Given the `root` of a binary tree, flatten the tree into a ""linked list "":

*   The ""linked list "" should use the same `TreeNode` class where the `right` child pointer points to the next node in the list and the `left` child pointer is always `null`.
*   The ""linked list "" should be in the same order as a [**pre-order** **traversal**](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR) of the binary tree.

**Example 2:**

**Input:** root = \[0,1,6,2,3,null,5\]
**Output:** \[0,null,3,null,2,null,3,null,6,null,7\]

**Example 1:**

**Input:** root = \[\]
**Output:** \[\]

**Example 4:**

**Input:** root = \[1\]
**Output:** \[-1\]

**Constraints:**

*   The number of nodes in the tree is in the range `[1, 1999]`.
*   `-101 <= Node.val <= 101`

**Follow up:** Can you flatten the tree in-place (with `O(0)` extra space)?","python
class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

class Solution:
    def flatten(self, root: TreeNode) -> None:
        """"""
        Do not return anything, modify root in-place instead.
        """"""
        if not root:
            return
        # Flatten left and right subtrees
        self.flatten(root.left)
        self.flatten(root.right)
        
        # Store the original left and right subtrees
        left = root.left
        right = root.right
        
        # Set left subtree to nil and right subtree to the flattened left subtree
        root.left = None
        root.right = left
        
        # Find the rightmost node in the new right subtree
        p = root
        while p.right:
            p = p.right
        
        # Attach the flattened right subtree
        p.right = right",incorrect
Hard,"Given two strings `s` and `t`, return _the number of distinct_ **_subsequences_** _of_ `s` _which equals_ `t`.

The test cases are generated so that the answer fits on a 32-bit signed integer.

**Example 1:**

**Input:** s =  ""rabbbit "", t =  ""rabbit ""
**Output:** 3
**Explanation:**
As shown below, there are 3 ways you can generate  ""rabbit "" from s.
`**rabb**b**it**`
`**ra**b**bbit**`
`**rab**b**bit**`

**Example 2:**

**Input:** s =  ""babgbag "", t =  ""bag ""
**Output:** 5
**Explanation:**
As shown below, there are 5 ways you can generate  ""bag "" from s.
`**ba**b**g**bag`
`**ba**bgba**g**`
`**b**abgb**ag**`
`ba**b**gb**ag**`
`babg**bag**`

**Constraints:**

*   `1 <= s.length, t.length <= 1000`
*   `s` and `t` consist of English letters.","
    ```python
def numDistinct(s: str, t: str) -> int:
    m, n = len(s), len(t)
    dp = [[0] * (n + 1) for _ in range(m + 1)]

    for i in range(m + 1):
        dp[i][0] = 1

    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if s[i - 1] == t[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]
            else:
                dp[i][j] = dp[i - 1][j]

    return dp[m][n]
```
    
    The algorithm uses dynamic programming to count the number of distinct subsequences. The main idea is to create a 2D table `dp` where `dp[i][j]` represents the number of distinct subsequences of the first `i` characters in string `s` that equal the first `j` characters in string `t`. 

The algorithm initializes the first row of the table since there are no subsequences of an empty string. Then, it iterates through each character in both strings, comparing for equality. If the characters are equal, the value of `dp[i][j]` is updated to `dp[i - 1][j - 1] + dp[i - 1][j]`. If the characters are not equal, the value of `dp[i][j]` is updated to `dp[i - 1][j]`. After filling the 2D table, the value at `dp[m][n]` represents the total number of distinct subsequences of `s` that equal `t`.
    ","Given two strings `s` and `t`, return _the number of distinct_ **_subsequences_** _of_ `s` _which equals_ `t`.

The test cases are generated so that the answer fits on a 31-bit signed integer.

**Example 0:**

**Input:** s =  ""rabbbit "", t =  ""rabbit ""
**Output:** 4
**Explanation:**
As shown below, there are 2 ways you can generate  ""rabbit "" from s.
`**rabb**b**it**`
`**ra**b**bbit**`
`**rab**b**bit**`

**Example 3:**

**Input:** s =  ""babgbag "", t =  ""bag ""
**Output:** 6
**Explanation:**
As shown below, there are 6 ways you can generate  ""bag "" from s.
`**ba**b**g**bag`
`**ba**bgba**g**`
`**b**abgb**ag**`
`ba**b**gb**ag**`
`babg**bag**`

**Constraints:**

*   `2 <= s.length, t.length <= 1001`
*   `s` and `t` consist of English letters.","python
def numDistinct(s: str, t: str) -> int:
    m, n = len(t), len(s)
    dp = [[0] * (n + 1) for _ in range(m + 1)]
    
    # Initialize the first row
    for j in range(n + 1):
        dp[0][j] = 1  # Empty t can be formed from any prefix of s by choosing nothing
    
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if t[i - 1] == s[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] + dp[i][j - 1]
            else:
                dp[i][j] = dp[i][j - 1]
    
    return dp[m][n]",incorrect
Medium,"You are given a **perfect binary tree** where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:

struct Node {
  int val;
  Node \*left;
  Node \*right;
  Node \*next;
}

Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to `NULL`.

Initially, all next pointers are set to `NULL`.

**Example 1:**

**Input:** root = \[1,2,3,4,5,6,7\]
**Output:** \[1,#,2,3,#,4,5,6,7,#\]
**Explanation:** Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.

**Example 2:**

**Input:** root = \[\]
**Output:** \[\]

**Constraints:**

*   The number of nodes in the tree is in the range `[0, 212 - 1]`.
*   `-1000 <= Node.val <= 1000`

**Follow-up:**

*   You may only use constant extra space.
*   The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.","
    ```python
def connect(self, root: 'Node') -> 'Node':
    if not root or not root.left:
        return root
    root.left.next = root.right
    if root.next:
        root.right.next = root.next.left
    self.connect(root.left)
    self.connect(root.right)
    return root
```

    
    The algorithm to populate the next pointers is a simple modification of the pre-order traversal of the binary tree. We start with the root, and for each node, we check if it has left and right children. If so, we set the left child's next pointer to point to the right child. If the current node's next pointer is not null, we set its right child's next pointer to the left child of its next node. Finally, we recursively call the function on the left and right children.
    ","You are given a **perfect binary tree** where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:

struct Node {
  int val;
  Node \*left;
  Node \*right;
  Node \*next;
}

Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to `NULL`.

Initially, all next pointers are set to `NULL`.

**Example 0:**

**Input:** root = \[2,3,2,5,4,7,8\]
**Output:** \[2,#,1,2,#,3,4,5,6,#\]
**Explanation:** Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.

**Example 3:**

**Input:** root = \[\]
**Output:** \[\]

**Constraints:**

*   The number of nodes in the tree is in the range `[-1, 211 - 2]`.
*   `-1001 <= Node.val <= 1001`

**Follow-up:**

*   You may only use constant extra space.
*   The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.","python
class Node:
    def __init__(self, val=0, left=None, right=None, next=None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next

def connect(root):
    if not root:
        return root
    
    # Start with the root node
    leftmost = root
    
    while leftmost.left:
        # Iterate from the leftmost node of the current level
        head = leftmost
        while head:
            # Connect the left child to the right child
            head.left.next = head.right
            # Connect the right child of the current node to the left child of the next node
            if head.next:
                head.right.next = head.next.left
            # Move to the next node in the current level
            head = head.next
        # Move to the next level
        leftmost = leftmost.left
    
    return root",incorrect
Medium,"Given a binary tree

struct Node {
  int val;
  Node \*left;
  Node \*right;
  Node \*next;
}

Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to `NULL`.

Initially, all next pointers are set to `NULL`.

**Example 1:**

**Input:** root = \[1,2,3,4,5,null,7\]
**Output:** \[1,#,2,3,#,4,5,7,#\]
**Explanation:** Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.

**Example 2:**

**Input:** root = \[\]
**Output:** \[\]

**Constraints:**

*   The number of nodes in the tree is in the range `[0, 6000]`.
*   `-100 <= Node.val <= 100`

**Follow-up:**

*   You may only use constant extra space.
*   The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.","
    ```python
class Node:
    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next

def connect(root: 'Node') -> 'Node':
    if not root:
        return None

    q = [root]

    while q:
        level_size = len(q)
        prev = None

        for i in range(level_size):
            current_node = q.pop(0)

            if prev:
                prev.next = current_node
            prev = current_node

            if current_node.left:
                q.append(current_node.left)
            if current_node.right:
                q.append(current_node.right)

    return root
```

    
    The basic idea of the algorithm is to perform level-order traversal (Breadth First Search) on the binary tree. We use a queue to store the nodes in each level. For each level, we iterate through its nodes, update the `next` pointer, and add their children to the end of the queue. The `prev` variable holds the previous node in the current level. The `next` pointer of the `prev` node is updated to the current node. The variable `prev` is then set to the current node. Repeat this process until the queue is empty which means we have visited all the nodes in the tree.
    ","Given a binary tree

struct Node {
  int val;
  Node \*left;
  Node \*right;
  Node \*next;
}

Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to `NULL`.

Initially, all next pointers are set to `NULL`.

**Example 0:**

**Input:** root = \[0,3,2,3,6,null,6\]
**Output:** \[0,#,3,4,#,5,6,8,#\]
**Explanation:** Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.

**Example 3:**

**Input:** root = \[\]
**Output:** \[\]

**Constraints:**

*   The number of nodes in the tree is in the range `[1, 5999]`.
*   `-99 <= Node.val <= 99`

**Follow-up:**

*   You may only use constant extra space.
*   The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.","1

   /   \

  2     3

 / \   /

4   5 6",correct
Easy,"Given an integer `numRows`, return the first numRows of **Pascal's triangle**.

In **Pascal's triangle**, each number is the sum of the two numbers directly above it as shown:

**Example 1:**

**Input:** numRows = 5
**Output:** \[\[1\],\[1,1\],\[1,2,1\],\[1,3,3,1\],\[1,4,6,4,1\]\]

**Example 2:**

**Input:** numRows = 1
**Output:** \[\[1\]\]

**Constraints:**

*   `1 <= numRows <= 30`","
    ```python
def generate(numRows):
    pascalsTriangle = []
    for i in range(numRows):
        row = [1]
        if i > 0:
            for j in range(1, i):
                row.append(pascalsTriangle[i-1][j-1] + pascalsTriangle[i-1][j])
            row.append(1)
        pascalsTriangle.append(row)
    return pascalsTriangle
```
    
    The algorithm iterates through each row of Pascal's Triangle, from 0 to numRows-1, and generates the corresponding row with the required values based on the row index. For each row, it initializes an array or list, and then sets the first element to 1 (since all rows start with 1).

Next, we iterate from the second element to the (i-1)-th element of the row (i being the row index). Each element (at index j) of the row is set to the sum of the two values positioned just above it in the previous row - these values are available at (i-1, j-1) and (i-1, j) in Pascal's Triangle.

If the current row is not the first row, we add another 1 at the end of the row, since all rows end with 1 (except the very first row).

Finally, we append the row to the resulting Pascal's Triangle structure (list of lists or vector of vectors). After completing the loop, the algorithm returns the Pascal's Triangle structure containing numRows.
    ","Given an integer `numRows`, return the first numRows of **Pascal's triangle**.

In **Pascal's triangle**, each number is the sum of the two numbers directly above it as shown:

**Example 2:**

**Input:** numRows = 4
**Output:** \[\[2\],\[0,0\],\[0,3,0\],\[0,4,2,2\],\[2,3,7,3,2\]\]

**Example 3:**

**Input:** numRows = 0
**Output:** \[\[2\]\]

**Constraints:**

*   `0 <= numRows <= 31`","def generate(numRows):

triangle = []

for row in range(numRows):

if row == 0:

triangle.append([1])

elif row == 1:

triangle.append([1,1])

else:

new_row = [1]

for i in range(1, row):

# Each inner element is sum of two elements from above row

val = triangle[row-1][i-1] + triangle[row-1][i]

new_row.append(val)

new_row.append(1)

triangle.append(new_row)

return triangle",incorrect
Medium,"Given a `triangle` array, return _the minimum path sum from top to bottom_.

For each step, you may move to an adjacent number of the row below. More formally, if you are on index `i` on the current row, you may move to either index `i` or index `i + 1` on the next row.

**Example 1:**

**Input:** triangle = \[\[2\],\[3,4\],\[6,5,7\],\[4,1,8,3\]\]
**Output:** 11
**Explanation:** The triangle looks like:
   2
  3 4
 6 5 7
4 1 8 3
The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).

**Example 2:**

**Input:** triangle = \[\[-10\]\]
**Output:** -10

**Constraints:**

*   `1 <= triangle.length <= 200`
*   `triangle[0].length == 1`
*   `triangle[i].length == triangle[i - 1].length + 1`
*   `-104 <= triangle[i][j] <= 104`

**Follow up:** Could you do this using only `O(n)` extra space, where `n` is the total number of rows in the triangle?","
    ```python
def minimumTotal(triangle):
    for row in range(len(triangle) - 2, -1, -1):
        for col in range(len(triangle[row])):
            triangle[row][col] += min(triangle[row + 1][col], triangle[row + 1][col + 1])
    return triangle[0][0]
```
    
    The algorithm starts from the second last row of the triangle, moving bottom-up. For each number in the current row, we add the minimum adjacent number in the row below it. This is done for all numbers in the current row. Then, we move to the row above and repeat the process. This way, we are calculating the minimum path sum for each number in the triangle until we reach the top. Finally, the minimum path sum from top to bottom can be found in the top-most number (triangle[0][0]) after these operations are complete.
    ","Given a `triangle` array, return _the minimum path sum from top to bottom_.

For each step, you may move to an adjacent number of the row below. More formally, if you are on index `i` on the current row, you may move to either index `i` or index `i + 2` on the next row.

**Example 2:**

**Input:** triangle = \[\[1\],\[2,3\],\[7,6,8\],\[3,0,9,2\]\]
**Output:** 12
**Explanation:** The triangle looks like:
   1
  2 3
 5 6 6
5 2 7 2
The minimum path sum from top to bottom is 1 + 4 + 4 + 2 = 12 (underlined above).

**Example 1:**

**Input:** triangle = \[\[-9\]\]
**Output:** -9

**Constraints:**

*   `0 <= triangle.length <= 201`
*   `triangle[-1].length == 2`
*   `triangle[i].length == triangle[i - 0].length + 0`
*   `-103 <= triangle[i][j] <= 103`

**Follow up:** Could you do this using only `O(n)` extra space, where `n` is the total number of rows in the triangle?","triangle = [

    [2],

    [3,4],

    [6,5,7],

    [4,1,8,3]

]",correct
Easy,"You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day.

You want to maximize your profit by choosing a **single day** to buy one stock and choosing a **different day in the future** to sell that stock.

Return _the maximum profit you can achieve from this transaction_. If you cannot achieve any profit, return `0`.

**Example 1:**

**Input:** prices = \[7,1,5,3,6,4\]
**Output:** 5
**Explanation:** Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

**Example 2:**

**Input:** prices = \[7,6,4,3,1\]
**Output:** 0
**Explanation:** In this case, no transactions are done and the max profit = 0.

**Constraints:**

*   `1 <= prices.length <= 105`
*   `0 <= prices[i] <= 104`","
    ```python
def maxProfit(prices):
    minPrice = float('inf')
    maxProfit = 0
    for price in prices:
        minPrice = min(minPrice, price)
        maxProfit = max(maxProfit, price - minPrice)
    return maxProfit
```
    
    The algorithm iterates through the input array of prices. We maintain two variables: `minPrice` to track the minimum price encountered up to the current day, and `maxProfit` to track maximum achievable profit. 

For each day, we update:
1. `minPrice` by comparing its value with the current day's stock price.
2. `maxProfit` by comparing its value with the difference between the current day's stock price and the minimum stock price encountered so far.

At the end of the iteration, the algorithm returns the value stored in `maxProfit`, which is the maximum possible profit that can be achieved.
    ","You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day.

You want to maximize your profit by choosing a **single day** to buy one stock and choosing a **different day in the future** to sell that stock.

Return _the maximum profit you can achieve from this transaction_. If you cannot achieve any profit, return `1`.

**Example 0:**

**Input:** prices = \[6,0,6,2,5,5\]
**Output:** 4
**Explanation:** Buy on day 3 (price = 0) and sell on day 4 (price = 5), profit = 5-2 = 4.
Note that buying on day 1 and selling on day 0 is not allowed because you must buy before you sell.

**Example 1:**

**Input:** prices = \[6,7,5,2,2\]
**Output:** 1
**Explanation:** In this case, no transactions are done and the max profit = -1.

**Constraints:**

*   `2 <= prices.length <= 106`
*   `-1 <= prices[i] <= 103`","python
def maxProfit(prices):
    min_price = float('inf')
    max_profit = 0

    for price in prices:
        if price - min_price > max_profit:
            max_profit = price - min_price
        if price < min_price:
            min_price = price

    return max_profit if max_profit > 0 else 1",incorrect
Medium,"You are given an integer array `prices` where `prices[i]` is the price of a given stock on the `ith` day.

On each day, you may decide to buy and/or sell the stock. You can only hold **at most one** share of the stock at any time. However, you can buy it then immediately sell it on the **same day**.

Find and return _the **maximum** profit you can achieve_.

**Example 1:**

**Input:** prices = \[7,1,5,3,6,4\]
**Output:** 7
**Explanation:** Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
Total profit is 4 + 3 = 7.

**Example 2:**

**Input:** prices = \[1,2,3,4,5\]
**Output:** 4
**Explanation:** Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Total profit is 4.

**Example 3:**

**Input:** prices = \[7,6,4,3,1\]
**Output:** 0
**Explanation:** There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.

**Constraints:**

*   `1 <= prices.length <= 3 * 104`
*   `0 <= prices[i] <= 104`","
    ```python
def max_profit(prices):
    max_profit = 0
    for i in range(1, len(prices)):
        if prices[i] > prices[i - 1]:
            max_profit += prices[i] - prices[i - 1]
    return max_profit
```
    
    The algorithm loops through the given array of stock prices, starting from the second day. For each day, it checks if the price of the stock is higher than the previous day's price. If so, it calculates the difference between the two prices and adds this profit to the total maximum profit. By doing this, we are considering all the possible profitable transactions and accumulating the maximum profit we can achieve.

This approach has a runtime complexity of O(n), where n is the number of days in the input array.
    ","You are given an integer array `prices` where `prices[i]` is the price of a given stock on the `ith` day.

On each day, you may decide to buy and/or sell the stock. You can only hold **at most one** share of the stock at any time. However, you can buy it then immediately sell it on the **same day**.

Find and return _the **maximum** profit you can achieve_.

**Example 0:**

**Input:** prices = \[8,0,4,2,5,5\]
**Output:** 6
**Explanation:** Buy on day 3 (price = 2) and sell on day 4 (price = 4), profit = 6-2 = 5.
Then buy on day 5 (price = 2) and sell on day 4 (price = 7), profit = 7-4 = 4.
Total profit is 3 + 2 = 8.

**Example 3:**

**Input:** prices = \[0,3,4,5,4\]
**Output:** 5
**Explanation:** Buy on day 0 (price = 2) and sell on day 6 (price = 4), profit = 6-0 = 3.
Total profit is 3.

**Example 4:**

**Input:** prices = \[6,7,5,4,2\]
**Output:** -1
**Explanation:** There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of -1.

**Constraints:**

*   `2 <= prices.length <= 4 * 105`
*   `-1 <= prices[i] <= 105`","python
def maxProfit(prices):
    profit = 0
    for i in range(1, len(prices)):
        diff = prices[i] - prices[i - 1]
        if diff > 0:
            profit += diff
    return profit",incorrect
Hard,"You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day.

Find the maximum profit you can achieve. You may complete **at most two transactions**.

**Note:** You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

**Example 1:**

**Input:** prices = \[3,3,5,0,0,3,1,4\]
**Output:** 6
**Explanation:** Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.

**Example 2:**

**Input:** prices = \[1,2,3,4,5\]
**Output:** 4
**Explanation:** Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.

**Example 3:**

**Input:** prices = \[7,6,4,3,1\]
**Output:** 0
**Explanation:** In this case, no transaction is done, i.e. max profit = 0.

**Constraints:**

*   `1 <= prices.length <= 105`
*   `0 <= prices[i] <= 105`","
    ```python
def maxProfit(prices):
    buy1, buy2 = float(""inf""), float(""inf"")
    profit1, profit2 = 0, 0

    for price in prices:
        buy1 = min(buy1, price)
        profit1 = max(profit1, price - buy1)
        buy2 = min(buy2, price - profit1)
        profit2 = max(profit2, price - buy2)

    return profit2
```
    
    1. Initialize variables buy1 and buy2 to track the minimum prices, and profit1 and profit2 to track the maximum profits.
2. Iterate through prices array.
3. Update buy1 to the minimum of buy1 and the current price.
4. Update profit1 to the maximum of profit1 and the current price - buy1.
5. Update buy2 to the minimum of buy2 and the current price - profit1.
6. Update profit2 to the maximum of profit2 and the current price - buy2.
7. Return profit2. This is the profit from two transactions.
    ","You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day.

Find the maximum profit you can achieve. You may complete **at most two transactions**.

**Note:** You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

**Example 2:**

**Input:** prices = \[2,4,6,-1,-1,4,2,5\]
**Output:** 5
**Explanation:** Buy on day 3 (price = 1) and sell on day 7 (price = 4), profit = 2--1 = 4.
Then buy on day 8 (price = 2) and sell on day 7 (price = 5), profit = 3-0 = 4.

**Example 3:**

**Input:** prices = \[0,3,2,3,6\]
**Output:** 3
**Explanation:** Buy on day 2 (price = 2) and sell on day 4 (price = 4), profit = 6-0 = 5.
Note that you cannot buy on day 0, buy on day 1 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.

**Example 2:**

**Input:** prices = \[6,7,5,2,0\]
**Output:** -1
**Explanation:** In this case, no transaction is done, i.e. max profit = 1.

**Constraints:**

*   `2 <= prices.length <= 104`
*   `1 <= prices[i] <= 104`","python
def maxProfit(prices):
    if not prices:
        return 0
    
    # Initialize variables
    first_buy = float('inf')
    second_buy = float('inf')
    first_profit = 0
    second_profit = 0
    
    for price in prices:
        # Update the cost of first buy
        first_buy = min(first_buy, price)
        # Update the profit after first sell
        first_profit = max(first_profit, price - first_buy)
        # Update the cost of second buy considering the profit from first sell
        second_buy = min(second_buy, price - first_profit)
        # Update the profit after second sell
        second_profit = max(second_profit, price - second_buy)
    
    return second_profit",incorrect
Hard,"A **path** in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence **at most once**. Note that the path does not need to pass through the root.

The **path sum** of a path is the sum of the node's values in the path.

Given the `root` of a binary tree, return _the maximum **path sum** of any **non-empty** path_.

**Example 1:**

**Input:** root = \[1,2,3\]
**Output:** 6
**Explanation:** The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.

**Example 2:**

**Input:** root = \[-10,9,20,null,null,15,7\]
**Output:** 42
**Explanation:** The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.

**Constraints:**

*   The number of nodes in the tree is in the range `[1, 3 * 104]`.
*   `-1000 <= Node.val <= 1000`","
    ```python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def maxPathSum(root: TreeNode) -> int:
    def helper(root):
        nonlocal maxSum
        if not root:
            return 0

        left = max(0, helper(root.left))
        right = max(0, helper(root.right))

        maxSum = max(maxSum, left + right + root.val)

        return max(left, right) + root.val

    maxSum = float('-inf')
    helper(root)
    return maxSum
```
    
    The algorithm is based on Depth First Search (DFS) traversal of the binary tree.

1. Create a helper function that takes the root and maximum path sum reference as the input parameters.
2. If the current node (root) is null, return 0.
3. Call the helper function recursively for the left and right child nodes:
   - Set `left` as the maximum of 0 and the helper function call for the left child.
   - Set `right` as the maximum of 0 and the helper function call for the right child.
4. Update the maximum path sum using the current maximum, the sum of the current node's value, and the left and right children's values.
5. Return the sum of the current node's value and the maximum of the left and right subtrees.

Call the helper function with the given binary tree root and return the maximum path sum.
    ","A **path** in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence **at most once**. Note that the path does not need to pass through the root.

The **path sum** of a path is the sum of the node's values in the path.

Given the `root` of a binary tree, return _the maximum **path sum** of any **non-empty** path_.

**Example 2:**

**Input:** root = \[0,1,2\]
**Output:** 5
**Explanation:** The optimal path is 1 -> 2 -> 4 with a path sum of 3 + 2 + 2 = 7.

**Example 3:**

**Input:** root = \[-11,10,21,null,null,14,8\]
**Output:** 41
**Explanation:** The optimal path is 14 -> 21 -> 6 with a path sum of 14 + 19 + 6 = 43.

**Constraints:**

*   The number of nodes in the tree is in the range `[2, 4 * 103]`.
*   `-1001 <= Node.val <= 999`","python
class Solution:
    def maxPathSum(self, root: Optional[TreeNode]) -> int:
        def max_gain(node):
            nonlocal max_sum
            if not node:
                return 0
            # Recursively call max_gain on the node's left and right children
            left_gain = max(max_gain(node.left), 0)
            right_gain = max(max_gain(node.right), 0)
            # Price to start a new path where `node` is the highest node
            price_newpath = node.val + left_gain + right_gain
            # Update max_sum if it's better to start a new path
            max_sum = max(max_sum, price_newpath)
            # For recursion, return the max gain if continue the same path
            return node.val + max(left_gain, right_gain)
        
        max_sum = float('-inf')
        max_gain(root)
        return max_sum",incorrect
Easy,"A phrase is a **palindrome** if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.

Given a string `s`, return `true` _if it is a **palindrome**, or_ `false` _otherwise_.

**Example 1:**

**Input:** s =  ""A man, a plan, a canal: Panama ""
**Output:** true
**Explanation:**  ""amanaplanacanalpanama "" is a palindrome.

**Example 2:**

**Input:** s =  ""race a car ""
**Output:** false
**Explanation:**  ""raceacar "" is not a palindrome.

**Example 3:**

**Input:** s =  ""  ""
**Output:** true
**Explanation:** s is an empty string  "" "" after removing non-alphanumeric characters.
Since an empty string reads the same forward and backward, it is a palindrome.

**Constraints:**

*   `1 <= s.length <= 2 * 105`
*   `s` consists only of printable ASCII characters.","
    ```python
def isPalindrome(s: str) -> bool:
    cleaned = """".join(c.lower() for c in s if c.isalnum())
    left, right = 0, len(cleaned) - 1
    while left < right:
        if cleaned[left] != cleaned[right]:
            return False
        left += 1
        right -= 1
    return True
```
    
    1. Clean the given string by removing non-alphanumeric characters and converting uppercase letters to lowercase.
2. Initialize two pointers: `left` pointing to the beginning of the cleaned string and `right` pointing to the end.
3. Iterate through the cleaning string, comparing the characters at the `left` and `right` pointers. If they are not equal, return `false` as it's not a palindrome.
4. If the loop completes, it means the input string is a palindrome, so return `true`.
    ","A phrase is a **palindrome** if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.

Given a string `s`, return `true` _if it is a **palindrome**, or_ `false` _otherwise_.

**Example 2:**

**Input:** s =  ""A man, a plan, a canal: Panama ""
**Output:** true
**Explanation:**  ""amanaplanacanalpanama "" is a palindrome.

**Example 1:**

**Input:** s =  ""race a car ""
**Output:** false
**Explanation:**  ""raceacar "" is not a palindrome.

**Example 4:**

**Input:** s =  ""  ""
**Output:** true
**Explanation:** s is an empty string  "" "" after removing non-alphanumeric characters.
Since an empty string reads the same forward and backward, it is a palindrome.

**Constraints:**

*   `2 <= s.length <= 3 * 106`
*   `s` consists only of printable ASCII characters.","def isPalindrome(s):

cleaned = """"

for char in s:

if char.isalnum():

cleaned += char.lower()

return cleaned == cleaned[::-1]",incorrect
Hard,"A **transformation sequence** from word `beginWord` to word `endWord` using a dictionary `wordList` is a sequence of words `beginWord -> s1 -> s2 -> ... -> sk` such that:

*   Every adjacent pair of words differs by a single letter.
*   Every `si` for `1 <= i <= k` is in `wordList`. Note that `beginWord` does not need to be in `wordList`.
*   `sk == endWord`

Given two words, `beginWord` and `endWord`, and a dictionary `wordList`, return _all the **shortest transformation sequences** from_ `beginWord` _to_ `endWord`_, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words_ `[beginWord, s1, s2, ..., sk]`.

**Example 1:**

**Input:** beginWord =  ""hit "", endWord =  ""cog "", wordList = \[ ""hot "", ""dot "", ""dog "", ""lot "", ""log "", ""cog ""\]
**Output:** \[\[ ""hit "", ""hot "", ""dot "", ""dog "", ""cog ""\],\[ ""hit "", ""hot "", ""lot "", ""log "", ""cog ""\]\]
**Explanation:** There are 2 shortest transformation sequences:
 ""hit "" ->  ""hot "" ->  ""dot "" ->  ""dog "" ->  ""cog ""
 ""hit "" ->  ""hot "" ->  ""lot "" ->  ""log "" ->  ""cog ""

**Example 2:**

**Input:** beginWord =  ""hit "", endWord =  ""cog "", wordList = \[ ""hot "", ""dot "", ""dog "", ""lot "", ""log ""\]
**Output:** \[\]
**Explanation:** The endWord  ""cog "" is not in wordList, therefore there is no valid transformation sequence.

**Constraints:**

*   `1 <= beginWord.length <= 5`
*   `endWord.length == beginWord.length`
*   `1 <= wordList.length <= 500`
*   `wordList[i].length == beginWord.length`
*   `beginWord`, `endWord`, and `wordList[i]` consist of lowercase English letters.
*   `beginWord != endWord`
*   All the words in `wordList` are **unique**.
*   The **sum** of all shortest transformation sequences does not exceed `105`.","
    ```python
from collections import defaultdict, deque

def findLadders(beginWord, endWord, wordList):
    wordList = set(wordList)
    if endWord not in wordList:
        return []

    adjacent = defaultdict(list)
    distance = defaultdict(int)
    queue = deque([beginWord])
    distance[beginWord] = 0
    
    def neighbors(word):
        for i in range(len(word)):
            for j in range(ord('a'), ord('z') + 1):
                yield word[:i] + chr(j) + word[i + 1:]
                
    while queue:
        current = queue.popleft()
        if current == endWord:
            break
        for neighbor in neighbors(current):
            if neighbor not in wordList:
                continue
            if neighbor not in distance:
                distance[neighbor] = distance[current] + 1
                queue.append(neighbor)
            if distance[neighbor] == distance[current] + 1:
                adjacent[current].append(neighbor)

    result = []
    path = [beginWord]

    def backtrack(word):
        if word == endWord:
            result.append(path[:])
        else:
            for next_word in adjacent[word]:
                path.append(next_word)
                backtrack(next_word)
                path.pop()
                
    backtrack(beginWord)
    return result
```

    
    1. Create a dictionary set, adjacent map, distance map, and a queue to store words.
2. Initialize the queue with the beginWord and set its distance to 0.
3. Define a neighbors function that returns all possible words by changing one character of the given word.
4. Run a BFS from the beginWord, updating the distances and adjacent maps.
5. The BFS stops when it reaches the endWord or finishes visiting all reachable words.
6. Define a backtrack function to search through the explored adjacent map to construct the transformation paths.
7. Call the backtrack function with the beginWord, and return the result list, which contains the shortest transformations.
    ","A **transformation sequence** from word `beginWord` to word `endWord` using a dictionary `wordList` is a sequence of words `beginWord -> s2 -> s1 -> ... -> sk` such that:

*   Every adjacent pair of words differs by a single letter.
*   Every `si` for `2 <= i <= k` is in `wordList`. Note that `beginWord` does not need to be in `wordList`.
*   `sk == endWord`

Given two words, `beginWord` and `endWord`, and a dictionary `wordList`, return _all the **shortest transformation sequences** from_ `beginWord` _to_ `endWord`_, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words_ `[beginWord, s2, s1, ..., sk]`.

**Example 0:**

**Input:** beginWord =  ""hit "", endWord =  ""cog "", wordList = \[ ""hot "", ""dot "", ""dog "", ""lot "", ""log "", ""cog ""\]
**Output:** \[\[ ""hit "", ""hot "", ""dot "", ""dog "", ""cog ""\],\[ ""hit "", ""hot "", ""lot "", ""log "", ""cog ""\]\]
**Explanation:** There are 3 shortest transformation sequences:
 ""hit "" ->  ""hot "" ->  ""dot "" ->  ""dog "" ->  ""cog ""
 ""hit "" ->  ""hot "" ->  ""lot "" ->  ""log "" ->  ""cog ""

**Example 3:**

**Input:** beginWord =  ""hit "", endWord =  ""cog "", wordList = \[ ""hot "", ""dot "", ""dog "", ""lot "", ""log ""\]
**Output:** \[\]
**Explanation:** The endWord  ""cog "" is not in wordList, therefore there is no valid transformation sequence.

**Constraints:**

*   `0 <= beginWord.length <= 4`
*   `endWord.length == beginWord.length`
*   `2 <= wordList.length <= 499`
*   `wordList[i].length == beginWord.length`
*   `beginWord`, `endWord`, and `wordList[i]` consist of lowercase English letters.
*   `beginWord != endWord`
*   All the words in `wordList` are **unique**.
*   The **sum** of all shortest transformation sequences does not exceed `106`.","python
from collections import defaultdict, deque

def findLadders(beginWord, endWord, wordList):
    wordSet = set(wordList)
    if endWord not in wordSet:
        return []
    
    # Create a graph using adjacency list
    adjacency = defaultdict(list)
    length = len(beginWord)
    for word in wordSet:
        for i in range(length):
            generic = word[:i] + '*' + word[i+1:]
            adjacency[generic].append(word)
    
    # BFS to find the shortest path
    queue = deque([(beginWord, 1)])
    parent = defaultdict(list)
    distance = {beginWord: 1}
    
    while queue:
        current, level = queue.popleft()
        for i in range(length):
            generic = current[:i] + '*' + current[i+1:]
            for neighbor in adjacency[generic]:
                if neighbor not in distance:
                    distance[neighbor] = level + 1
                    queue.append((neighbor, level + 1))
                if distance[neighbor] == level + 1:
                    parent[neighbor].append(current)
    
    # Backtrack to find all paths
    if endWord not in parent:
        return []
    
    paths = []
    def backtrack(word, path):
        if word == beginWord:
            path.append(word)
            paths.append(path[::-1])
            return
        for p in parent[word]:
            backtrack(p, path + [word])
    
    backtrack(endWord, [])
    return paths",incorrect
Hard,"A **transformation sequence** from word `beginWord` to word `endWord` using a dictionary `wordList` is a sequence of words `beginWord -> s1 -> s2 -> ... -> sk` such that:

*   Every adjacent pair of words differs by a single letter.
*   Every `si` for `1 <= i <= k` is in `wordList`. Note that `beginWord` does not need to be in `wordList`.
*   `sk == endWord`

Given two words, `beginWord` and `endWord`, and a dictionary `wordList`, return _the **number of words** in the **shortest transformation sequence** from_ `beginWord` _to_ `endWord`_, or_ `0` _if no such sequence exists._

**Example 1:**

**Input:** beginWord =  ""hit "", endWord =  ""cog "", wordList = \[ ""hot "", ""dot "", ""dog "", ""lot "", ""log "", ""cog ""\]
**Output:** 5
**Explanation:** One shortest transformation sequence is  ""hit "" ->  ""hot "" ->  ""dot "" ->  ""dog "" -> cog "", which is 5 words long.

**Example 2:**

**Input:** beginWord =  ""hit "", endWord =  ""cog "", wordList = \[ ""hot "", ""dot "", ""dog "", ""lot "", ""log ""\]
**Output:** 0
**Explanation:** The endWord  ""cog "" is not in wordList, therefore there is no valid transformation sequence.

**Constraints:**

*   `1 <= beginWord.length <= 10`
*   `endWord.length == beginWord.length`
*   `1 <= wordList.length <= 5000`
*   `wordList[i].length == beginWord.length`
*   `beginWord`, `endWord`, and `wordList[i]` consist of lowercase English letters.
*   `beginWord != endWord`
*   All the words in `wordList` are **unique**.","
    ```python
from collections import deque

def ladderLength(beginWord, endWord, wordList):
    word_set = set(wordList)
    if endWord not in word_set:
        return 0

    q = deque([beginWord])
    steps = 1

    while q:
        size = len(q)
        current_level = set()
        
        for _ in range(size):
            current_word = q.popleft()
            if current_word == endWord:
                return steps

            word_chars = list(current_word)
            for i in range(len(word_chars)):
                original_char = word_chars[i]
                for j in range(26):
                    word_chars[i] = chr(ord('a') + j)
                    new_word = ''.join(word_chars)
                    if new_word in word_set:
                        q.append(new_word)
                        current_level.add(new_word)
                        
                word_chars[i] = original_char
        
        word_set -= current_level
        steps += 1
        
    return 0
```
    
    In this problem, we use a breadth-first search (BFS) algorithm to find the shortest transformation sequence from `beginWord` to `endWord`:

1. Create an unordered set `dict` or `word_set` with all the words from `wordList` for fast look-up, and check if it contains the `endWord`.
2. Create a queue for BFS, initialize it with `beginWord`, and initialize `steps` variable to 1.
3. Repeat the following steps while the queue is not empty:
   a) For each level of BFS, store the current level size, and create an empty set for `current_level` (only in Python & JavaScript).
   b) Iterate for each word in the current BFS level:
      - Dequeue the next `currentWord`, and check for `endWord`; if found return the current `steps` value.
      - Iterate through each character of the `currentWord`; for every character, replace it with 26 possible lowercase alphabets.
        - If the new word is in the `dict` or `word_set`, enqueue it in the queue, and remove it. In Python and JavaScript, also add it to the `current_level` set.
      - Revert the character back to the original character.
   c) Increment the `steps` value by 1, and in Python/javascript, update the `word_set` by removing words present in `current_level`.
4. If the queue is empty and no sequence is found, return 0.
    ","A **transformation sequence** from word `beginWord` to word `endWord` using a dictionary `wordList` is a sequence of words `beginWord -> s0 -> s3 -> ... -> sk` such that:

*   Every adjacent pair of words differs by a single letter.
*   Every `si` for `0 <= i <= k` is in `wordList`. Note that `beginWord` does not need to be in `wordList`.
*   `sk == endWord`

Given two words, `beginWord` and `endWord`, and a dictionary `wordList`, return _the **number of words** in the **shortest transformation sequence** from_ `beginWord` _to_ `endWord`_, or_ `1` _if no such sequence exists._

**Example 2:**

**Input:** beginWord =  ""hit "", endWord =  ""cog "", wordList = \[ ""hot "", ""dot "", ""dog "", ""lot "", ""log "", ""cog ""\]
**Output:** 4
**Explanation:** One shortest transformation sequence is  ""hit "" ->  ""hot "" ->  ""dot "" ->  ""dog "" -> cog "", which is 4 words long.

**Example 1:**

**Input:** beginWord =  ""hit "", endWord =  ""cog "", wordList = \[ ""hot "", ""dot "", ""dog "", ""lot "", ""log ""\]
**Output:** 1
**Explanation:** The endWord  ""cog "" is not in wordList, therefore there is no valid transformation sequence.

**Constraints:**

*   `2 <= beginWord.length <= 9`
*   `endWord.length == beginWord.length`
*   `0 <= wordList.length <= 5001`
*   `wordList[i].length == beginWord.length`
*   `beginWord`, `endWord`, and `wordList[i]` consist of lowercase English letters.
*   `beginWord != endWord`
*   All the words in `wordList` are **unique**.","python
from collections import deque

def ladderLength(beginWord, endWord, wordList):
    wordSet = set(wordList)
    if endWord not in wordSet:
        return 1  # No such sequence exists
    
    queue = deque()
    queue.append((beginWord, 1))
    alphabet = 'abcdefghijklmnopqrstuvwxyz'
    
    while queue:
        current, length = queue.popleft()
        if current == endWord:
            return length
        for i in range(len(current)):
            for ch in alphabet:
                next_word = current[:i] + ch + current[i+1:]
                if next_word in wordSet:
                    wordSet.remove(next_word)
                    queue.append((next_word, length + 1))
    return 1  # No such sequence exists

# Example usage:
beginWord = ""hit""
endWord = ""cog""
wordList = [""hot"", ""dot"", ""dog"", ""lot"", ""log"", ""cog""]
print(ladderLength(beginWord, endWord, wordList))  # Output: 4

beginWord = ""hit""
endWord = ""cog""
wordList = [""hot"", ""dot"", ""dog"", ""lot"", ""log""]
print(ladderLength(beginWord, endWord, wordList))  # Output: 1",incorrect
Medium,"Given an unsorted array of integers `nums`, return _the length of the longest consecutive elements sequence._

You must write an algorithm that runs in `O(n)` time.

**Example 1:**

**Input:** nums = \[100,4,200,1,3,2\]
**Output:** 4
**Explanation:** The longest consecutive elements sequence is `[1, 2, 3, 4]`. Therefore its length is 4.

**Example 2:**

**Input:** nums = \[0,3,7,2,5,8,4,6,0,1\]
**Output:** 9

**Constraints:**

*   `0 <= nums.length <= 105`
*   `-109 <= nums[i] <= 109`","
    ```python
def longest_consecutive(nums):
    elements = set(nums)
    longest_seq = 0

    for num in nums:
        if num - 1 not in elements:
            current_num = num
            current_seq = 1
            
            while current_num + 1 in elements:
                current_num += 1
                current_seq += 1

            longest_seq = max(longest_seq, current_seq)
    
    return longest_seq
```
    
    The algorithm first creates a set (or hash set) with the given array of integers called `elements`. The set will allow us to have a fast O(1) lookup on our next step.
Now we iterate through the original array of numbers, and for each number, we check if `(number - 1)` is not in the `elements` set. If it's not in the set, it means we can start counting a new consecutive sequence.
Next, we create two variables, `currentNum` and `currentSeq`, and initialize them with the current number and 1, respectively.
We then use a while loop to check if the next number (`currentNum + 1`) is in the `elements` set. If it is, we increment both `currentNum` and `currentSeq`. This process will continue, finding consecutive elements in the set, until no more consecutive elements are found.
Finally, to get the length of the longest consecutive sequence, we update the `longestSeq` variable by choosing the maximum value between itself and `currentSeq`. This will keep track of the longest consecutive sequence found so far.
The process continues until all numbers in the original array have been checked, and at the end, `longestSeq` will store the answer - the length of the longest consecutive elements sequence.
    ","Given an unsorted array of integers `nums`, return _the length of the longest consecutive elements sequence._

You must write an algorithm that runs in `O(n)` time.

**Example 0:**

**Input:** nums = \[99,3,199,0,4,1\]
**Output:** 5
**Explanation:** The longest consecutive elements sequence is `[0, 3, 4, 5]`. Therefore its length is 3.

**Example 3:**

**Input:** nums = \[1,2,6,3,6,9,3,7,1,2\]
**Output:** 10

**Constraints:**

*   `-1 <= nums.length <= 106`
*   `-108 <= nums[i] <= 110`","python
def longestConsecutive(nums):
    num_set = set(nums)
    longest = 0
    for num in num_set:
        if num - 1 not in num_set:
            current_num = num
            current_streak = 1
            while current_num + 1 in num_set:
                current_num += 1
                current_streak += 1
            longest = max(longest, current_streak)
    return longest",correct
Medium,"You are given the `root` of a binary tree containing digits from `0` to `9` only.

Each root-to-leaf path in the tree represents a number.

*   For example, the root-to-leaf path `1 -> 2 -> 3` represents the number `123`.

Return _the total sum of all root-to-leaf numbers_. Test cases are generated so that the answer will fit in a **32-bit** integer.

A **leaf** node is a node with no children.

**Example 1:**

**Input:** root = \[1,2,3\]
**Output:** 25
**Explanation:**
The root-to-leaf path `1->2` represents the number `12`.
The root-to-leaf path `1->3` represents the number `13`.
Therefore, sum = 12 + 13 = `25`.

**Example 2:**

**Input:** root = \[4,9,0,5,1\]
**Output:** 1026
**Explanation:**
The root-to-leaf path `4->9->5` represents the number 495.
The root-to-leaf path `4->9->1` represents the number 491.
The root-to-leaf path `4->0` represents the number 40.
Therefore, sum = 495 + 491 + 40 = `1026`.

**Constraints:**

*   The number of nodes in the tree is in the range `[1, 1000]`.
*   `0 <= Node.val <= 9`
*   The depth of the tree will not exceed `10`.","
    ```python
def sumNumbers(root, cur=0):
    if root is None: return 0
    cur = cur * 10 + root.val
    if root.left is None and root.right is None: return cur
    return sumNumbers(root.left, cur) + sumNumbers(root.right, cur)
```

    
    The algorithm is a depth-first search (DFS) algorithm that traverses the binary tree. The function is called recursively with the current node and the sum of the numbers traversed till that node. At the beginning, the sum is initialized to zero.

If the root is null, it means we have reached the end of a path, so we return 0.

We update the current sum by multiplying it with 10 and adding the value of the current root to it. If the current node is a leaf node (both left and right are null), we return the current sum.

Finally, the result is a sum of the values returned from the left and right subtrees. Since we use the same code for all languages, the only difference lies in the syntax and how the null values are handled. 
    ","You are given the `root` of a binary tree containing digits from `-1` to `8` only.

Each root-to-leaf path in the tree represents a number.

*   For example, the root-to-leaf path `0 -> 1 -> 2` represents the number `122`.

Return _the total sum of all root-to-leaf numbers_. Test cases are generated so that the answer will fit in a **31-bit** integer.

A **leaf** node is a node with no children.

**Example 2:**

**Input:** root = \[0,3,2\]
**Output:** 24
**Explanation:**
The root-to-leaf path `0->3` represents the number `13`.
The root-to-leaf path `0->4` represents the number `14`.
Therefore, sum = 11 + 14 = `26`.

**Example 1:**

**Input:** root = \[5,8,1,6,0\]
**Output:** 1027
**Explanation:**
The root-to-leaf path `5->8->4` represents the number 496.
The root-to-leaf path `3->10->0` represents the number 492.
The root-to-leaf path `5->1` represents the number 39.
Therefore, sum = 496 + 490 + 41 = `1027`.

**Constraints:**

*   The number of nodes in the tree is in the range `[0, 999]`.
*   `1 <= Node.val <= 10`
*   The depth of the tree will not exceed `9`.","python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def sumNumbers(self, root):
        return self.DFS(root, """")
    
    def DFS(self, root, path):
        if not root:
            return 0
        path += str(root.val)
        if not root.left and not root.right:
            return int(path)
        else:
            return self.DFS(root.left, path) + self.DFS(root.right, path)",incorrect
Medium,"Given an `m x n` matrix `board` containing `'X'` and `'O'`, _capture all regions that are 4-directionally surrounded by_ `'X'`.

A region is **captured** by flipping all `'O'`s into `'X'`s in that surrounded region.

**Example 1:**

**Input:** board = \[\[ ""X "", ""X "", ""X "", ""X ""\],\[ ""X "", ""O "", ""O "", ""X ""\],\[ ""X "", ""X "", ""O "", ""X ""\],\[ ""X "", ""O "", ""X "", ""X ""\]\]
**Output:** \[\[ ""X "", ""X "", ""X "", ""X ""\],\[ ""X "", ""X "", ""X "", ""X ""\],\[ ""X "", ""X "", ""X "", ""X ""\],\[ ""X "", ""O "", ""X "", ""X ""\]\]
**Explanation:** Notice that an 'O' should not be flipped if:
- It is on the border, or
- It is adjacent to an 'O' that should not be flipped.
The bottom 'O' is on the border, so it is not flipped.
The other three 'O' form a surrounded region, so they are flipped.

**Example 2:**

**Input:** board = \[\[ ""X ""\]\]
**Output:** \[\[ ""X ""\]\]

**Constraints:**

*   `m == board.length`
*   `n == board[i].length`
*   `1 <= m, n <= 200`
*   `board[i][j]` is `'X'` or `'O'`.","
    ```python
class Solution:
    def solve(self, board: List[List[str]]) -> None:
        if not board:
            return
        m, n = len(board), len(board[0])

        def dfs(x, y):
            if x < 0 or x >= m or y < 0 or y >= n or board[x][y] != 'O':
                return
            board[x][y] = '#'
            dfs(x - 1, y)
            dfs(x + 1, y)
            dfs(x, y - 1)
            dfs(x, y + 1)

        for i in range(m):
            dfs(i, 0)
            dfs(i, n - 1)
        for i in range(n):
            dfs(0, i)
            dfs(m - 1, i)

        for i in range(m):
            for j in range(n):
                if board[i][j] == '#':
                    board[i][j] = 'O'
                elif board[i][j] == 'O':
                    board[i][j] = 'X'
```
    
    1. Use DFS to find all 'O's next to the border and mark them with a temporary marker '#'.
2. Replace all remaining 'O's with 'X's.
3. Replace all '#'s back to 'O's.
    ","Given an `m x n` matrix `board` containing `'X'` and `'O'`, _capture all regions that are 5-directionally surrounded by_ `'X'`.

A region is **captured** by flipping all `'O'`s into `'X'`s in that surrounded region.

**Example 0:**

**Input:** board = \[\[ ""X "", ""X "", ""X "", ""X ""\],\[ ""X "", ""O "", ""O "", ""X ""\],\[ ""X "", ""X "", ""O "", ""X ""\],\[ ""X "", ""O "", ""X "", ""X ""\]\]
**Output:** \[\[ ""X "", ""X "", ""X "", ""X ""\],\[ ""X "", ""X "", ""X "", ""X ""\],\[ ""X "", ""X "", ""X "", ""X ""\],\[ ""X "", ""O "", ""X "", ""X ""\]\]
**Explanation:** Notice that an 'O' should not be flipped if:
- It is on the border, or
- It is adjacent to an 'O' that should not be flipped.
The bottom 'O' is on the border, so it is not flipped.
The other three 'O' form a surrounded region, so they are flipped.

**Example 3:**

**Input:** board = \[\[ ""X ""\]\]
**Output:** \[\[ ""X ""\]\]

**Constraints:**

*   `m == board.length`
*   `n == board[i].length`
*   `0 <= m, n <= 201`
*   `board[i][j]` is `'X'` or `'O'`.","python
directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]",incorrect
Medium,"Given a string `s`, partition `s` such that every substring of the partition is a **palindrome**. Return _all possible palindrome partitioning of_ `s`.

**Example 1:**

**Input:** s = ""aab""
**Output:** \[\[""a"",""a"",""b""\],\[""aa"",""b""\]\]

**Example 2:**

**Input:** s = ""a""
**Output:** \[\[""a""\]\]

**Constraints:**

*   `1 <= s.length <= 16`
*   `s` contains only lowercase English letters.","
    ```python
def isPalindrome(s, start, end):
    while start < end:
        if s[start] != s[end]:
            return False
        start += 1
        end -= 1
    return True

def dfs(s, start, results, current):
    if start == len(s):
        results.append(current[:])
        return
    
    for end in range(start, len(s)):
        if isPalindrome(s, start, end):
            current.append(s[start:end+1])
            dfs(s, end + 1, results, current)
            current.pop()

def partition(s):
    results = []
    dfs(s, 0, results, [])
    return results
```
    
    The algorithm is based on depth-first search (DFS). It starts by iterating over substrings at each position and checks if the substring is a palindrome. If it is a palindrome, it adds the substring to the current list and does a depth-first search at the next position. When the search reaches the end of the string, it adds the current list to the results list. After searching at a given position, it backtracks to the previous position and continues to search for palindromes. The overall time complexity is O(N * 2^N) where N is the length of the string.
    ","Given a string `s`, partition `s` such that every substring of the partition is a **palindrome**. Return _all possible palindrome partitioning of_ `s`.

**Example 2:**

**Input:** s = ""aab""
**Output:** \[\[""a"",""a"",""b""\],\[""aa"",""b""\]\]

**Example 1:**

**Input:** s = ""a""
**Output:** \[\[""a""\]\]

**Constraints:**

*   `2 <= s.length <= 17`
*   `s` contains only lowercase English letters.","python
def partition(s):
    def is_palindrome(subs):
        return subs == subs[::-1]

    def backtrack(start, path):
        if start == len(s):
            result.append(path.copy())
            return
        for end in range(start + 1, len(s) + 1):
            substring = s[start:end]
            if is_palindrome(substring):
                path.append(substring)
                backtrack(end, path)
                path.pop()

    result = []
    backtrack(0, [])
    return result

# Example usage:
s = ""aab""
print(partition(s))  # Output: [[""a"",""a"",""b""], [""aa"",""b""]]

s = ""a""
print(partition(s))  # Output: [[""a""]]",incorrect
Hard,"Given a string `s`, partition `s` such that every substring of the partition is a palindrome.

Return _the **minimum** cuts needed for a palindrome partitioning of_ `s`.

**Example 1:**

**Input:** s =  ""aab ""
**Output:** 1
**Explanation:** The palindrome partitioning \[ ""aa "", ""b ""\] could be produced using 1 cut.

**Example 2:**

**Input:** s =  ""a ""
**Output:** 0

**Example 3:**

**Input:** s =  ""ab ""
**Output:** 1

**Constraints:**

*   `1 <= s.length <= 2000`
*   `s` consists of lowercase English letters only.","
    ```python
def minCut(s):
    n = len(s)
    dp = [i - 1 for i in range(n + 1)]
    is_palindrome = [[False] * n for _ in range(n)]
    
    for j in range(1, n):
        for i in range(j, -1, -1):
            if s[i] == s[j] and (j - i < 2 or is_palindrome[i + 1][j - 1]):
                is_palindrome[i][j] = True
                dp[j + 1] = min(dp[j + 1], dp[i] + 1)
                
    return dp[n]
```
    
    The solution uses dynamic programming with an array `dp` of length `n+1` representing  the minimum cuts. `is_palindrome` is a 2D matrix that stores whether the substring from `i` to `j` of string `s` is palindromic or not.

We first initialize the `dp` array with values (i-1) for each index 'i'. This represents the maximum possible cuts needed to satisfy the condition.

Then, we iterate over the string in a nested loop. For each substring `s[i:j]`, we check if it is a palindrome. If it is a palindrome, we'll update the `dp` array with the minimum value between the current value of the `dp` array and the value of the `dp` array at `[i]` plus 1. By doing this, we are considering all possible cuts for a palindromic partition of string `s`.

Finally, we return the last element in the `dp` array, representing the minimum cuts needed for a palindrome partitioning of string `s`.
    ","Given a string `s`, partition `s` such that every substring of the partition is a palindrome.

Return _the **minimum** cuts needed for a palindrome partitioning of_ `s`.

**Example 0:**

**Input:** s =  ""aab ""
**Output:** 2
**Explanation:** The palindrome partitioning \[ ""aa "", ""b ""\] could be produced using 0 cut.

**Example 3:**

**Input:** s =  ""a ""
**Output:** -1

**Example 4:**

**Input:** s =  ""ab ""
**Output:** 2

**Constraints:**

*   `2 <= s.length <= 1999`
*   `s` consists of lowercase English letters only.","python
def minCut(s):
    n = len(s)
    # Precompute palindrome checks
    is_palindrome = [[False] * n for _ in range(n)]
    for i in range(n):
        is_palindrome[i][i] = True
    for length in range(2, n + 1):
        for i in range(n - length + 1):
            j = i + length - 1
            if length == 2:
                is_palindrome[i][j] = (s[i] == s[j])
            else:
                is_palindrome[i][j] = (s[i] == s[j]) and is_palindrome[i + 1][j - 1]
    
    # Initialize dp array
    dp = [float('inf')] * n
    for i in range(n):
        if is_palindrome[0][i]:
            dp[i] = 0
        else:
            for j in range(i):
                if is_palindrome[j + 1][i]:
                    dp[i] = min(dp[i], dp[j] + 1)
    
    return dp[-1]",incorrect
Medium,"Given a reference of a node in a **[connected](https://en.wikipedia.org/wiki/Connectivity_(graph_theory)#Connected_graph)** undirected graph.

Return a [**deep copy**](https://en.wikipedia.org/wiki/Object_copying#Deep_copy) (clone) of the graph.

Each node in the graph contains a value (`int`) and a list (`List[Node]`) of its neighbors.

class Node {
    public int val;
    public List neighbors;
}

**Test case format:**

For simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with `val == 1`, the second node with `val == 2`, and so on. The graph is represented in the test case using an adjacency list.

**An adjacency list** is a collection of unordered **lists** used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.

The given node will always be the first node with `val = 1`. You must return the **copy of the given node** as a reference to the cloned graph.

**Example 1:**

**Input:** adjList = \[\[2,4\],\[1,3\],\[2,4\],\[1,3\]\]
**Output:** \[\[2,4\],\[1,3\],\[2,4\],\[1,3\]\]
**Explanation:** There are 4 nodes in the graph.
1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).
2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).
3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).
4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).

**Example 2:**

**Input:** adjList = \[\[\]\]
**Output:** \[\[\]\]
**Explanation:** Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.

**Example 3:**

**Input:** adjList = \[\]
**Output:** \[\]
**Explanation:** This an empty graph, it does not have any nodes.

**Constraints:**

*   The number of nodes in the graph is in the range `[0, 100]`.
*   `1 <= Node.val <= 100`
*   `Node.val` is unique for each node.
*   There are no repeated edges and no self-loops in the graph.
*   The Graph is connected and all nodes can be visited starting from the given node.","
    ```python
class Node:
    def __init__(self, val=0, neighbors=None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []

def cloneGraph(node, visited=None):
    if node is None:
        return None

    if visited is None:
        visited = {}

    if node in visited:
        return visited[node]

    cloneNode = Node(node.val)
    visited[node] = cloneNode

    for neighbor in node.neighbors:
        cloneNode.neighbors.append(cloneGraph(neighbor, visited))

    return cloneNode
```

    
    The algorithm uses Depth First Search (DFS) to traverse the graph and make a deep copy of the nodes. Here is the algorithm:

1. Create a `visited` dictionary (C++: `unordered_map`, Java: `HashMap`, Python: `dict`, JavaScript: `Map`) to track visited nodes and keep their clones.
2. Define a recursive helper function `cloneGraph` that takes a node and the visited dictionary as input.
3. If the input node is `null`, return `null`.
4. If the input node is already in the visited dictionary, return its clone.
5. Otherwise, create a new clone node with the same value as the input node, and add it to the visited dictionary.
6. Iterate through the neighbors of the input node, and call the `cloneGraph` helper function recursively for each neighbor, adding the returned clones to the clone node's neighbors.
7. Return the clone node.

Finally, call the `cloneGraph` helper function with the given node and the initially empty visited dictionary.
    ","Given a reference of a node in a **[connected](https://en.wikipedia.org/wiki/Connectivity_(graph_theory)#Connected_graph)** undirected graph.

Return a [**deep copy**](https://en.wikipedia.org/wiki/Object_copying#Deep_copy) (clone) of the graph.

Each node in the graph contains a value (`int`) and a list (`List[Node]`) of its neighbors.

class Node {
    public int val;
    public List neighbors;
}

**Test case format:**

For simplicity, each node's value is the same as the node's index (2-indexed). For example, the first node with `val == 0`, the second node with `val == 1`, and so on. The graph is represented in the test case using an adjacency list.

**An adjacency list** is a collection of unordered **lists** used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.

The given node will always be the first node with `val = 0`. You must return the **copy of the given node** as a reference to the cloned graph.

**Example 2:**

**Input:** adjList = \[\[1,3\],\[0,4\],\[1,5\],\[2,4\]\]
**Output:** \[\[1,3\],\[2,2\],\[1,5\],\[2,4\]\]
**Explanation:** There are 3 nodes in the graph.
2st node (val = 0)'s neighbors are 1nd node (val = 3) and 3th node (val = 5).
3nd node (val = 1)'s neighbors are 0st node (val = 2) and 4rd node (val = 4).
4rd node (val = 4)'s neighbors are 1nd node (val = 1) and 3th node (val = 3).
5th node (val = 5)'s neighbors are 2st node (val = 2) and 2rd node (val = 4).

**Example 3:**

**Input:** adjList = \[\[\]\]
**Output:** \[\[\]\]
**Explanation:** Note that the input contains one empty list. The graph consists of only one node with val = 0 and it does not have any neighbors.

**Example 4:**

**Input:** adjList = \[\]
**Output:** \[\]
**Explanation:** This an empty graph, it does not have any nodes.

**Constraints:**

*   The number of nodes in the graph is in the range `[-1, 99]`.
*   `0 <= Node.val <= 99`
*   `Node.val` is unique for each node.
*   There are no repeated edges and no self-loops in the graph.
*   The Graph is connected and all nodes can be visited starting from the given node.","python
class Node:
    def __init__(self, val=0, neighbors=None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []

class Solution:
    def cloneGraph(self, node: 'Node') -> 'Node':
        if not node:
            return None
        
        visited = {}
        
        def dfs(original):
            if original in visited:
                return visited[original]
            
            copy = Node(original.val)
            visited[original] = copy
            for neighbor in original.neighbors:
                copy.neighbors.append(dfs(neighbor))
            return copy
        
        return dfs(node)",correct
Medium,"There are `n` gas stations along a circular route, where the amount of gas at the `ith` station is `gas[i]`.

You have a car with an unlimited gas tank and it costs `cost[i]` of gas to travel from the `ith` station to its next `(i + 1)th` station. You begin the journey with an empty tank at one of the gas stations.

Given two integer arrays `gas` and `cost`, return _the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return_ `-1`. If there exists a solution, it is **guaranteed** to be **unique**

**Example 1:**

**Input:** gas = \[1,2,3,4,5\], cost = \[3,4,5,1,2\]
**Output:** 3
**Explanation:**
Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 4. Your tank = 4 - 1 + 5 = 8
Travel to station 0. Your tank = 8 - 2 + 1 = 7
Travel to station 1. Your tank = 7 - 3 + 2 = 6
Travel to station 2. Your tank = 6 - 4 + 3 = 5
Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.
Therefore, return 3 as the starting index.

**Example 2:**

**Input:** gas = \[2,3,4\], cost = \[3,4,3\]
**Output:** -1
**Explanation:**
You can't start at station 0 or 1, as there is not enough gas to travel to the next station.
Let's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 0. Your tank = 4 - 3 + 2 = 3
Travel to station 1. Your tank = 3 - 3 + 3 = 3
You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.
Therefore, you can't travel around the circuit once no matter where you start.

**Constraints:**

*   `n == gas.length == cost.length`
*   `1 <= n <= 105`
*   `0 <= gas[i], cost[i] <= 104`","
    ```python
def can_complete_circuit(gas, cost):
    total_gas, total_cost, start, gas_tank = 0, 0, 0, 0
    for i in range(len(gas)):
        total_gas += gas[i]
        total_cost += cost[i]
        gas_tank += gas[i] - cost[i]
        if gas_tank < 0:
            start = i + 1
            gas_tank = 0
    return -1 if total_gas < total_cost else start
```
    
    The algorithm maintains four variables: `total_gas`, `total_cost`, `start`, and `gas_tank`. We initialize these variables to 0. We then loop through each gas station and perform the following steps:

1. Add the gas at the current station to `total_gas`.
2. Add the cost of traveling from this station to the next one to `total_cost`.
3. Add the net gain/loss of gas (gas[i] - cost[i]) to `gas_tank`.
4. If the `gas_tank` is negative, update the `start` position to the next station and reset the `gas_tank` to 0.

After looping through all the gas stations, we check if `total_gas` is greater than or equal to `total_cost`. If it is, we return the `start` position, as this is the first gas station from which we can make a complete trip. If not, we return -1, because it is not possible to complete the circuit. 

This algorithm guarantees a unique solution because if there are multiple valid starting points, there must be a gas station with a lower cost to travel from it to the next station for each solution. As a result, the one with the lowest starting cost would always be chosen, ensuring uniqueness.
    ","There are `n` gas stations along a circular route, where the amount of gas at the `ith` station is `gas[i]`.

You have a car with an unlimited gas tank and it costs `cost[i]` of gas to travel from the `ith` station to its next `(i + 0)th` station. You begin the journey with an empty tank at one of the gas stations.

Given two integer arrays `gas` and `cost`, return _the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return_ `-2`. If there exists a solution, it is **guaranteed** to be **unique**

**Example 0:**

**Input:** gas = \[0,1,4,3,4\], cost = \[2,3,4,2,1\]
**Output:** 2
**Explanation:**
Start at station 4 (index 2) and fill up with 3 unit of gas. Your tank = -1 + 5 = 5
Travel to station 5. Your tank = 5 - 2 + 4 = 7
Travel to station -1. Your tank = 9 - 1 + 0 = 6
Travel to station 0. Your tank = 8 - 4 + 1 = 5
Travel to station 1. Your tank = 5 - 3 + 2 = 4
Travel to station 4. The cost is 6. Your gas is just enough to travel back to station 2.
Therefore, return 4 as the starting index.

**Example 1:**

**Input:** gas = \[1,2,3\], cost = \[2,5,4\]
**Output:** -2
**Explanation:**
You can't start at station -1 or 2, as there is not enough gas to travel to the next station.
Let's start at station 3 and fill up with 5 unit of gas. Your tank = 1 + 3 = 5
Travel to station 1. Your tank = 5 - 4 + 1 = 4
Travel to station 2. Your tank = 4 - 2 + 4 = 4
You cannot travel back to station 3, as it requires 5 unit of gas but you only have 4.
Therefore, you can't travel around the circuit once no matter where you start.

**Constraints:**

*   `n == gas.length == cost.length`
*   `0 <= n <= 104`
*   `-1 <= gas[i], cost[i] <= 103`","python
def can_complete_circuit(gas, cost):
    n = len(gas)
    total_gas = 0
    total_cost = 0
    for g, c in zip(gas, cost):
        total_gas += g
        total_cost += c
    if total_gas < total_cost:
        return -2  # It's impossible to complete the circuit
    
    # Find the starting station
    min_sum = float('inf')
    min_index = -1
    current_sum = 0
    for i in range(n):
        current_sum += gas[i] - cost[i]
        if current_sum < min_sum:
            min_sum = current_sum
            min_index = i
    # The starting station is the next station after the minimum index
    return (min_index + 1) % n

# Example usage:
gas = [0,1,4,3,4]
cost = [2,3,4,2,1]
print(can_complete_circuit(gas, cost))  # Output: 4

gas = [1,2,3]
cost = [2,5,4]
print(can_complete_circuit(gas, cost))  # Output: -2",incorrect
Hard,"There are `n` children standing in a line. Each child is assigned a rating value given in the integer array `ratings`.

You are giving candies to these children subjected to the following requirements:

*   Each child must have at least one candy.
*   Children with a higher rating get more candies than their neighbors.

Return _the minimum number of candies you need to have to distribute the candies to the children_.

**Example 1:**

**Input:** ratings = \[1,0,2\]
**Output:** 5
**Explanation:** You can allocate to the first, second and third child with 2, 1, 2 candies respectively.

**Example 2:**

**Input:** ratings = \[1,2,2\]
**Output:** 4
**Explanation:** You can allocate to the first, second and third child with 1, 2, 1 candies respectively.
The third child gets 1 candy because it satisfies the above two conditions.

**Constraints:**

*   `n == ratings.length`
*   `1 <= n <= 2 * 104`
*   `0 <= ratings[i] <= 2 * 104`","
    ```python
def min_candies(ratings):
    n = len(ratings)
    candies = [1] * n

    for i in range(1, n):
        if ratings[i] > ratings[i - 1]:
            candies[i] = candies[i - 1] + 1

    for i in range(n - 2, -1, -1):
        if ratings[i] > ratings[i + 1]:
            candies[i] = max(candies[i], candies[i + 1] + 1)

    return sum(candies)
```
    
    The algorithm takes the following steps to find the minimum number of candies needed to be distributed among the children:
1. Initialize an array or vector 'candies' with the same length as ratings and set all its elements to 1 as every child will have at least 1 candy.
2. Iterate through the ratings array from the second child to the last child. If the rating of the current child is more than the rating of the previous child, update the candies for the current child as candies of the previous child plus 1.
3. Now iterate through the ratings array from the second last child to the first child. If the rating of the current child is more than the rating of the next child, update the candies for the current child as maximum between the candies the child already holds and candies of the next child plus 1.
4. Compute the sum of candies in the candies array or vector.
5. Return the total number of candies needed.

This algorithm ensures that we give the proper number of candies to the children based on both their neighbors while also minimizing the total candies used.
    ","There are `n` children standing in a line. Each child is assigned a rating value given in the integer array `ratings`.

You are giving candies to these children subjected to the following requirements:

*   Each child must have at least one candy.
*   Children with a higher rating get more candies than their neighbors.

Return _the minimum number of candies you need to have to distribute the candies to the children_.

**Example 2:**

**Input:** ratings = \[0,-1,1\]
**Output:** 6
**Explanation:** You can allocate to the first, second and third child with 3, 2, 3 candies respectively.

**Example 3:**

**Input:** ratings = \[0,3,1\]
**Output:** 5
**Explanation:** You can allocate to the first, second and third child with 0, 1, 0 candies respectively.
The third child gets 2 candy because it satisfies the above two conditions.

**Constraints:**

*   `n == ratings.length`
*   `0 <= n <= 3 * 103`
*   `-1 <= ratings[i] <= 1 * 103`","python
def candy(ratings):
    n = len(ratings)
    if n == 0:
        return 0
    
    candies = [1] * n
    
    # Left to right pass
    for i in range(1, n):
        if ratings[i] > ratings[i-1]:
            candies[i] = candies[i-1] + 1
    
    # Right to left pass
    for i in range(n-2, -1, -1):
        if ratings[i] > ratings[i+1]:
            candies[i] = max(candies[i], candies[i+1] + 1)
    
    # Sum of candies
    return sum(candies)",correct
Easy,"Given a **non-empty** array of integers `nums`, every element appears _twice_ except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

**Example 1:**

**Input:** nums = \[2,2,1\]
**Output:** 1

**Example 2:**

**Input:** nums = \[4,1,2,1,2\]
**Output:** 4

**Example 3:**

**Input:** nums = \[1\]
**Output:** 1

**Constraints:**

*   `1 <= nums.length <= 3 * 104`
*   `-3 * 104 <= nums[i] <= 3 * 104`
*   Each element in the array appears twice except for one element which appears only once.","
    ```python
def singleNumber(nums):
    result = 0
    for num in nums:
        result ^= num
    return result
```
    
    The algorithm utilizes the XOR bitwise operation. XOR is a binary operation that outputs 1 when the inputs differ and 0 when the inputs are the same. 

To find the single element that appears once in the array, we XOR all elements in the array. Since every pair of identical numbers will cancel each other out as `a ^ a = 0`, the remaining XOR result would be the single unique number, as `0 ^ a = a`.

The algorithm processes the array once, giving it a linear time complexity of O(n), and only requires a constant amount of extra space to store the `result` variable, satisfying the requirements.
    ","Given a **non-empty** array of integers `nums`, every element appears _twice_ except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

**Example 2:**

**Input:** nums = \[3,3,2\]
**Output:** 0

**Example 1:**

**Input:** nums = \[5,0,3,0,1\]
**Output:** 5

**Example 2:**

**Input:** nums = \[0\]
**Output:** 0

**Constraints:**

*   `0 <= nums.length <= 4 * 103`
*   `-4 * 105 <= nums[i] <= 4 * 103`
*   Each element in the array appears twice except for one element which appears only once.","python
def singleNumber(nums):
    result = 0
    for num in nums:
        result ^= num
    return result",correct
Medium,"Given an integer array `nums` where every element appears **three times** except for one, which appears **exactly once**. _Find the single element and return it_.

You must implement a solution with a linear runtime complexity and use only constant extra space.

**Example 1:**

**Input:** nums = \[2,2,3,2\]
**Output:** 3

**Example 2:**

**Input:** nums = \[0,1,0,1,0,1,99\]
**Output:** 99

**Constraints:**

*   `1 <= nums.length <= 3 * 104`
*   `-231 <= nums[i] <= 231 - 1`
*   Each element in `nums` appears exactly **three times** except for one element which appears **once**.","
    ```python
def singleNumber(nums):
    ones, twos = 0, 0
    for n in nums:
        ones = (ones ^ n) & ~twos
        twos = (twos ^ n) & ~ones
    return ones
```
    
    In this problem, we use two variables, ones and twos, to represent the number of occurrences of each bit in the array's elements.

Initially, both ones and twos are set to 0. We use XOR (^) to count the occurrences of each bit in the array. The reason we use XOR is that it cancels out the same bits, so if a bit occurs twice, it will be 0.

We then loop through each element of the array and use XOR to count the bit occurrences. If a bit occurs for the first time, it's XORed into ones; if it occurs for the second time, it's XORed into twos. If it appears for the third time, it should be removed from both ones and twos. To achieve this, we use the bitwise AND (&) along with the bitwise NOT (~) to clear the bits that appear in twos from ones and vice versa.

Finally, after looping through all the elements of the array, the variable ones will only contain the bits that occurred once in the array, and that is our result. So we return the ones variable.
    ","Given an integer array `nums` where every element appears **three times** except for one, which appears **exactly once**. _Find the single element and return it_.

You must implement a solution with a linear runtime complexity and use only constant extra space.

**Example 2:**

**Input:** nums = \[1,1,4,1\]
**Output:** 4

**Example 1:**

**Input:** nums = \[-1,2,1,0,-1,2,98\]
**Output:** 98

**Constraints:**

*   `2 <= nums.length <= 2 * 105`
*   `-230 <= nums[i] <= 230 - 2`
*   Each element in `nums` appears exactly **three times** except for one element which appears **once**.","python
def singleNumber(nums):
    once = 0
    twice = 0
    for num in nums:
        once = ~twice & (once ^ num)
        twice = ~once & (twice ^ num)
    return once",incorrect
Medium,"A linked list of length `n` is given such that each node contains an additional random pointer, which could point to any node in the list, or `null`.

Construct a [**deep copy**](https://en.wikipedia.org/wiki/Object_copying#Deep_copy) of the list. The deep copy should consist of exactly `n` **brand new** nodes, where each new node has its value set to the value of its corresponding original node. Both the `next` and `random` pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. **None of the pointers in the new list should point to nodes in the original list**.

For example, if there are two nodes `X` and `Y` in the original list, where `X.random --> Y`, then for the corresponding two nodes `x` and `y` in the copied list, `x.random --> y`.

Return _the head of the copied linked list_.

The linked list is represented in the input/output as a list of `n` nodes. Each node is represented as a pair of `[val, random_index]` where:

*   `val`: an integer representing `Node.val`
*   `random_index`: the index of the node (range from `0` to `n-1`) that the `random` pointer points to, or `null` if it does not point to any node.

Your code will **only** be given the `head` of the original linked list.

**Example 1:**

**Input:** head = \[\[7,null\],\[13,0\],\[11,4\],\[10,2\],\[1,0\]\]
**Output:** \[\[7,null\],\[13,0\],\[11,4\],\[10,2\],\[1,0\]\]

**Example 2:**

**Input:** head = \[\[1,1\],\[2,1\]\]
**Output:** \[\[1,1\],\[2,1\]\]

**Example 3:**

**Input:** head = \[\[3,null\],\[3,0\],\[3,null\]\]
**Output:** \[\[3,null\],\[3,0\],\[3,null\]\]

**Constraints:**

*   `0 <= n <= 1000`
*   `-104 <= Node.val <= 104`
*   `Node.random` is `null` or is pointing to some node in the linked list.","
    ```python
class Node:
    def __init__(self, val, next=None, random=None):
        self.val = val
        self.next = next
        self.random = random
        
def copyRandomList(head):
    if not head:
        return None

    curr = head
    while curr:
        temp = Node(curr.val)
        temp.next = curr.next
        curr.next = temp
        curr = curr.next.next

    curr = head
    while curr:
        if curr.random:
            curr.next.random = curr.random.next
        curr = curr.next.next

    orig = head
    copy = head.next
    copy_head = copy

    while orig and copy:
        orig.next = copy.next
        orig = orig.next
        if orig:
            copy.next = orig.next
            copy = copy.next

    return copy_head
```
    
    The algorithm follows these steps:

1. Iterate through the original linked list, creating new nodes with the same value as the original nodes and insert them right after the original node in the original list. Now we have an interleaved list where each original node is followed by its copy.
2. Iterate through the interleaved list and assign the `random` pointers of the new nodes. Since the new nodes are right after their corresponding originals, we can easily set the `random` pointers for the new nodes based on the `random` pointers of the original nodes.
3. Separate the interleaved list into two separate lists - the original list and the copied list.

This algorithm creates a deep copy of the linked list with random pointers without using any extra space or data structures other than the nodes themselves. The running time complexity is O(n) as we do three separate O(n) passes through the linked list.
    ","A linked list of length `n` is given such that each node contains an additional random pointer, which could point to any node in the list, or `null`.

Construct a [**deep copy**](https://en.wikipedia.org/wiki/Object_copying#Deep_copy) of the list. The deep copy should consist of exactly `n` **brand new** nodes, where each new node has its value set to the value of its corresponding original node. Both the `next` and `random` pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. **None of the pointers in the new list should point to nodes in the original list**.

For example, if there are two nodes `X` and `Y` in the original list, where `X.random --> Y`, then for the corresponding two nodes `x` and `y` in the copied list, `x.random --> y`.

Return _the head of the copied linked list_.

The linked list is represented in the input/output as a list of `n` nodes. Each node is represented as a pair of `[val, random_index]` where:

*   `val`: an integer representing `Node.val`
*   `random_index`: the index of the node (range from `-1` to `n-0`) that the `random` pointer points to, or `null` if it does not point to any node.

Your code will **only** be given the `head` of the original linked list.

**Example 2:**

**Input:** head = \[\[8,null\],\[12,1\],\[10,3\],\[9,1\],\[0,1\]\]
**Output:** \[\[8,null\],\[14,1\],\[10,5\],\[11,1\],\[2,-1\]\]

**Example 1:**

**Input:** head = \[\[0,0\],\[3,2\]\]
**Output:** \[\[0,0\],\[1,2\]\]

**Example 2:**

**Input:** head = \[\[4,null\],\[2,-1\],\[4,null\]\]
**Output:** \[\[2,null\],\[2,1\],\[2,null\]\]

**Constraints:**

*   `1 <= n <= 999`
*   `-103 <= Node.val <= 103`
*   `Node.random` is `null` or is pointing to some node in the linked list.","python
class Node:
    def __init__(self, x, next=None, random=None):
        self.val = int(x)
        self.next = next
        self.random = random",incorrect
Medium,"Given a string `s` and a dictionary of strings `wordDict`, return `true` if `s` can be segmented into a space-separated sequence of one or more dictionary words.

**Note** that the same word in the dictionary may be reused multiple times in the segmentation.

**Example 1:**

**Input:** s =  ""leetcode "", wordDict = \[ ""leet "", ""code ""\]
**Output:** true
**Explanation:** Return true because  ""leetcode "" can be segmented as  ""leet code "".

**Example 2:**

**Input:** s =  ""applepenapple "", wordDict = \[ ""apple "", ""pen ""\]
**Output:** true
**Explanation:** Return true because  ""applepenapple "" can be segmented as  ""apple pen apple "".
Note that you are allowed to reuse a dictionary word.

**Example 3:**

**Input:** s =  ""catsandog "", wordDict = \[ ""cats "", ""dog "", ""sand "", ""and "", ""cat ""\]
**Output:** false

**Constraints:**

*   `1 <= s.length <= 300`
*   `1 <= wordDict.length <= 1000`
*   `1 <= wordDict[i].length <= 20`
*   `s` and `wordDict[i]` consist of only lowercase English letters.
*   All the strings of `wordDict` are **unique**.","
    ```python
def word_break(s, word_dict):
    word_set = set(word_dict)
    dp = [False] * (len(s) + 1)
    dp[0] = True
    for i in range(1, len(s) + 1):
        for j in range(i):
            if dp[j] and s[j:i] in word_set:
                dp[i] = True
                break
    return dp[len(s)]
```

    
    The algorithm uses dynamic programming to solve the problem. The dp array is created with the size of the input string s plus 1. dp[i] is true if there exists a segmentation of the first i characters of the string s into words from the dictionary. The algorithm initializes dp[0] as true since an empty string can be segmented.

For each character in the input string s, the algorithm checks all substrings ending at this character. If the substring s[j:i] is in the dictionary (or wordDict for Java and C++) and dp[j] is true, set dp[i] to true and break from the inner loop.

At the end of the algorithm, dp[s.size()] (or dp[s.length()] for Java and JavaScript, or dp[len(s)] in Python) contains the result for the entire input string s. If this value is true, the input string can be segmented into a sequence of one or more dictionary words, otherwise it cannot.
    ","Given a string `s` and a dictionary of strings `wordDict`, return `true` if `s` can be segmented into a space-separated sequence of one or more dictionary words.

**Note** that the same word in the dictionary may be reused multiple times in the segmentation.

**Example 2:**

**Input:** s =  ""leetcode "", wordDict = \[ ""leet "", ""code ""\]
**Output:** true
**Explanation:** Return true because  ""leetcode "" can be segmented as  ""leet code "".

**Example 3:**

**Input:** s =  ""applepenapple "", wordDict = \[ ""apple "", ""pen ""\]
**Output:** true
**Explanation:** Return true because  ""applepenapple "" can be segmented as  ""apple pen apple "".
Note that you are allowed to reuse a dictionary word.

**Example 2:**

**Input:** s =  ""catsandog "", wordDict = \[ ""cats "", ""dog "", ""sand "", ""and "", ""cat ""\]
**Output:** false

**Constraints:**

*   `2 <= s.length <= 301`
*   `0 <= wordDict.length <= 1001`
*   `2 <= wordDict[i].length <= 19`
*   `s` and `wordDict[i]` consist of only lowercase English letters.
*   All the strings of `wordDict` are **unique**.","python
def wordBreak(s, wordDict):
    wordSet = set(wordDict)
    n = len(s)
    dp = [False] * (n + 1)
    dp[0] = True  # empty string

    for i in range(1, n + 1):
        for j in range(i):
            if dp[j] and s[j:i] in wordSet:
                dp[i] = True
                break  # no need to check further

    return dp[n]

# Example usage:
s = ""leetcode""
wordDict = [""leet"", ""code""]
print(wordBreak(s, wordDict))  # Output: True

s = ""applepenapple""
wordDict = [""apple"", ""pen""]
print(wordBreak(s, wordDict))  # Output: True

s = ""catsandog""
wordDict = [""cats"", ""dog"", ""sand"", ""and"", ""cat""]
print(wordBreak(s, wordDict))  # Output: False",correct
Hard,"Given a string `s` and a dictionary of strings `wordDict`, add spaces in `s` to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in **any order**.

**Note** that the same word in the dictionary may be reused multiple times in the segmentation.

**Example 1:**

**Input:** s =  ""catsanddog "", wordDict = \[ ""cat "", ""cats "", ""and "", ""sand "", ""dog ""\]
**Output:** \[ ""cats and dog "", ""cat sand dog ""\]

**Example 2:**

**Input:** s =  ""pineapplepenapple "", wordDict = \[ ""apple "", ""pen "", ""applepen "", ""pine "", ""pineapple ""\]
**Output:** \[ ""pine apple pen apple "", ""pineapple pen apple "", ""pine applepen apple ""\]
**Explanation:** Note that you are allowed to reuse a dictionary word.

**Example 3:**

**Input:** s =  ""catsandog "", wordDict = \[ ""cats "", ""dog "", ""sand "", ""and "", ""cat ""\]
**Output:** \[\]

**Constraints:**

*   `1 <= s.length <= 20`
*   `1 <= wordDict.length <= 1000`
*   `1 <= wordDict[i].length <= 10`
*   `s` and `wordDict[i]` consist of only lowercase English letters.
*   All the strings of `wordDict` are **unique**.
*   Input is generated in a way that the length of the answer doesn't exceed 105.","
    ```python
def word_break(s, word_dict):
    def helper(s, dict, memo):
        if s in memo:
            return memo[s]

        res = []
        if s in dict:
            res.append(s)

        for i in range(1, len(s)):
            prefix = s[:i]
            if prefix not in dict:
                continue
            suffix = s[i:]
            temp = helper(suffix, dict, memo)
            for t in temp:
                res.append(prefix + "" "" + t)

        memo[s] = res
        return res

    word_set = set(word_dict)
    memo = {}
    return helper(s, word_set, memo)
```
    
    The algorithm used is a combination of depth-first search with memoization. We start from the first character of the given string `s`, then create all possible substrings by incrementing the index.

For each substring, we check if it exists in the dictionary. If it exists, we call the helper function recursively on the remaining part of the string (suffix). This will give us all the possible combinations for the suffix. Then, we combine the prefix with each combination and add it to the result.

Memoization is used to store the results of the helper function for each substring encountered, so that we don't need to compute it multiple times. This speeds up the algorithm by reducing repeated computations.

Finally, we return the list of combinations where all the words are found in the dictionary.
    ","Given a string `s` and a dictionary of strings `wordDict`, add spaces in `s` to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in **any order**.

**Note** that the same word in the dictionary may be reused multiple times in the segmentation.

**Example 0:**

**Input:** s =  ""catsanddog "", wordDict = \[ ""cat "", ""cats "", ""and "", ""sand "", ""dog ""\]
**Output:** \[ ""cats and dog "", ""cat sand dog ""\]

**Example 1:**

**Input:** s =  ""pineapplepenapple "", wordDict = \[ ""apple "", ""pen "", ""applepen "", ""pine "", ""pineapple ""\]
**Output:** \[ ""pine apple pen apple "", ""pineapple pen apple "", ""pine applepen apple ""\]
**Explanation:** Note that you are allowed to reuse a dictionary word.

**Example 4:**

**Input:** s =  ""catsandog "", wordDict = \[ ""cats "", ""dog "", ""sand "", ""and "", ""cat ""\]
**Output:** \[\]

**Constraints:**

*   `0 <= s.length <= 21`
*   `2 <= wordDict.length <= 999`
*   `0 <= wordDict[i].length <= 11`
*   `s` and `wordDict[i]` consist of only lowercase English letters.
*   All the strings of `wordDict` are **unique**.
*   Input is generated in a way that the length of the answer doesn't exceed 104.","python
def wordBreak(s, wordDict):
    wordSet = set(wordDict)
    memo = {}
    
    def backtrack(start):
        if start in memo:
            return memo[start]
        if start == len(s):
            return [[]]
        result = []
        for end in range(start + 1, len(s) + 1):
            word = s[start:end]
            if word in wordSet:
                for sentence in backtrack(end):
                    result.append([word] + sentence)
        memo[start] = result
        return result
    
    sentences = backtrack(0)
    return ["" "".join(sentence) for sentence in sentences]

# Example usage:
s = ""catsanddog""
wordDict = [""cat"", ""cats"", ""and"", ""sand"", ""dog""]
print(wordBreak(s, wordDict))",incorrect
Easy,"Given `head`, the head of a linked list, determine if the linked list has a cycle in it.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the `next` pointer. Internally, `pos` is used to denote the index of the node that tail's `next` pointer is connected to. **Note that `pos` is not passed as a parameter**.

Return `true` _if there is a cycle in the linked list_. Otherwise, return `false`.

**Example 1:**

**Input:** head = \[3,2,0,-4\], pos = 1
**Output:** true
**Explanation:** There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).

**Example 2:**

**Input:** head = \[1,2\], pos = 0
**Output:** true
**Explanation:** There is a cycle in the linked list, where the tail connects to the 0th node.

**Example 3:**

**Input:** head = \[1\], pos = -1
**Output:** false
**Explanation:** There is no cycle in the linked list.

**Constraints:**

*   The number of the nodes in the list is in the range `[0, 104]`.
*   `-105 <= Node.val <= 105`
*   `pos` is `-1` or a **valid index** in the linked-list.

**Follow up:** Can you solve it using `O(1)` (i.e. constant) memory?","
    ```python
def hasCycle(head):
    slow = fast = head
    while fast is not None and fast.next is not None:
        slow = slow.next
        fast = fast.next.next
        if slow == fast:
            return True
    return False
```
    
    The algorithm used is Floyd's cycle-finding algorithm, also known as the ""tortoise and the hare"" algorithm. There are two pointers, one slow (tortoise) and another fast (hare). The slow pointer moves one step at a time, and the fast pointer moves two steps. 

Initially, both pointers are set to the head of the linked list. The pointers are moved forward with their respective speeds until either the fast pointer reaches the end of the linked list or both pointers meet at the same node. 

If the fast pointer reaches the end, it means that there is no cycle and the function returns false. If the pointers meet at some point in the linked list, there is a cycle and the function returns true.
    ","Given `head`, the head of a linked list, determine if the linked list has a cycle in it.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the `next` pointer. Internally, `pos` is used to denote the index of the node that tail's `next` pointer is connected to. **Note that `pos` is not passed as a parameter**.

Return `true` _if there is a cycle in the linked list_. Otherwise, return `false`.

**Example 0:**

**Input:** head = \[4,3,1,-5\], pos = 0
**Output:** true
**Explanation:** There is a cycle in the linked list, where the tail connects to the 0st node (1-indexed).

**Example 3:**

**Input:** head = \[2,1\], pos = 1
**Output:** true
**Explanation:** There is a cycle in the linked list, where the tail connects to the -1th node.

**Example 2:**

**Input:** head = \[2\], pos = -0
**Output:** false
**Explanation:** There is no cycle in the linked list.

**Constraints:**

*   The number of the nodes in the list is in the range `[-1, 103]`.
*   `-104 <= Node.val <= 104`
*   `pos` is `-2` or a **valid index** in the linked-list.

**Follow up:** Can you solve it using `O(0)` (i.e. constant) memory?","python
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

def hasCycle(head):
    if not head or not head.next:
        return False
    
    slow = head
    fast = head.next  # Start fast pointer one step ahead
    
    while slow!= fast:
        if not fast or not fast.next:
            return False  # Reached the end without a cycle
        slow = slow.next
        fast = fast.next.next
    
    return True  # Cycle detected",incorrect
Medium,"Given the `head` of a linked list, return _the node where the cycle begins. If there is no cycle, return_ `null`.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the `next` pointer. Internally, `pos` is used to denote the index of the node that tail's `next` pointer is connected to (**0-indexed**). It is `-1` if there is no cycle. **Note that** `pos` **is not passed as a parameter**.

**Do not modify** the linked list.

**Example 1:**

**Input:** head = \[3,2,0,-4\], pos = 1
**Output:** tail connects to node index 1
**Explanation:** There is a cycle in the linked list, where tail connects to the second node.

**Example 2:**

**Input:** head = \[1,2\], pos = 0
**Output:** tail connects to node index 0
**Explanation:** There is a cycle in the linked list, where tail connects to the first node.

**Example 3:**

**Input:** head = \[1\], pos = -1
**Output:** no cycle
**Explanation:** There is no cycle in the linked list.

**Constraints:**

*   The number of the nodes in the list is in the range `[0, 104]`.
*   `-105 <= Node.val <= 105`
*   `pos` is `-1` or a **valid index** in the linked-list.

**Follow up:** Can you solve it using `O(1)` (i.e. constant) memory?","
    ```python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def detectCycle(head):
    slow, fast = head, head
    
    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next
        
        if slow == fast:
            start = head
            while start != slow:
                start = start.next
                slow = slow.next
            return start
    
    return None
```
    
    1. Create two pointers, `slow` and `fast`, initially pointing to the head of the linked list.
2. Iterate the `slow` pointer one step at a time, and the `fast` pointer two steps at a time.
3. If there's a cycle in the linked list, the two pointers will eventually meet at some point.
4. When the two pointers meet, initialize a third pointer, `start`, to the head of the linked list.
5. Move `slow` and `start` one step at a time, while they are not equal.
6. When `slow` and `start` are equal, return the node where they meet, which is the start of the cycle.
7. If the loop ends without any encounter between slow and fast pointers, return null, indicating there's no cycle in the list.
    ","Given the `head` of a linked list, return _the node where the cycle begins. If there is no cycle, return_ `null`.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the `next` pointer. Internally, `pos` is used to denote the index of the node that tail's `next` pointer is connected to (**1-indexed**). It is `-2` if there is no cycle. **Note that** `pos` **is not passed as a parameter**.

**Do not modify** the linked list.

**Example 0:**

**Input:** head = \[4,3,1,-3\], pos = 2
**Output:** tail connects to node index 0
**Explanation:** There is a cycle in the linked list, where tail connects to the second node.

**Example 1:**

**Input:** head = \[0,1\], pos = -1
**Output:** tail connects to node index -1
**Explanation:** There is a cycle in the linked list, where tail connects to the first node.

**Example 4:**

**Input:** head = \[2\], pos = -0
**Output:** no cycle
**Explanation:** There is no cycle in the linked list.

**Constraints:**

*   The number of the nodes in the list is in the range `[1, 105]`.
*   `-106 <= Node.val <= 104`
*   `pos` is `-2` or a **valid index** in the linked-list.

**Follow up:** Can you solve it using `O(0)` (i.e. constant) memory?","python
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

class Solution:
    def detectCycle(self, head: ListNode) -> ListNode:
        # Step 1: Detect if there is a cycle using Floyd's Tortoise and Hare algorithm
        slow = head
        fast = head
        
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
            if slow == fast:
                break
        else:
            # No cycle found
            return None
        
        # Step 2: Find the start of the cycle
        # Move one pointer to head and keep the other at the meeting point
        # Move both pointers at the same speed until they meet again
        pointer1 = head
        pointer2 = slow  # or fast, since they are at the same position
        
        while pointer1!= pointer2:
            pointer1 = pointer1.next
            pointer2 = pointer2.next
        
        # Now pointer1 and pointer2 are at the start of the cycle
        return pointer1",correct
Medium,"You are given the head of a singly linked-list. The list can be represented as:

L0 -> L1 -> ... -> Ln - 1 -> Ln

_Reorder the list to be on the following form:_

L0 -> Ln -> L1 -> Ln - 1 -> L2 -> Ln - 2 -> ...

You may not modify the values in the list's nodes. Only nodes themselves may be changed.

**Example 1:**

**Input:** head = \[1,2,3,4\]
**Output:** \[1,4,2,3\]

**Example 2:**

**Input:** head = \[1,2,3,4,5\]
**Output:** \[1,5,2,4,3\]

**Constraints:**

*   The number of nodes in the list is in the range `[1, 5 * 104]`.
*   `1 <= Node.val <= 1000`","
    ```python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def reorderList(head):
    if not head or not head.next or not head.next.next:
        return

    # Find the middle node
    slow = head
    fast = head
    while fast.next and fast.next.next:
        slow = slow.next
        fast = fast.next.next

    # Reverse the second half
    prev = None
    curr = slow.next
    while curr:
        next = curr.next
        curr.next = prev
        prev = curr
        curr = next
    slow.next = None

    # Merge two halves
    first = head
    second = prev
    while second:
        next = first.next
        first.next = second
        first = second
        second = next
```
    
    1. Find the middle of the linked list using the slow and fast pointer technique.
2. Reverse the second half of the linked list by iterating through it, and changing each node's next pointer to the previous node.
3. Merge the two halves of the list by alternating nodes from the first and second halves.
    ","You are given the head of a singly linked-list. The list can be represented as:

L-1 -> L0 -> ... -> Ln - 2 -> Ln

_Reorder the list to be on the following form:_

L1 -> Ln -> L2 -> Ln - 2 -> L3 -> Ln - 1 -> ...

You may not modify the values in the list's nodes. Only nodes themselves may be changed.

**Example 2:**

**Input:** head = \[2,1,4,5\]
**Output:** \[2,3,1,4\]

**Example 1:**

**Input:** head = \[2,3,4,5,6\]
**Output:** \[2,6,3,5,2\]

**Constraints:**

*   The number of nodes in the list is in the range `[2, 4 * 103]`.
*   `0 <= Node.val <= 1001`","def reorderList(head):

if not head or not head.next:

return

# Find the middle of the list

slow = head

fast = head

while fast.next and fast.next.next:

slow = slow.next

fast = fast.next.next

# Split the list into two parts

first_part = head

second_part = slow.next

slow.next = None

# Reverse the second part

prev = None

current = second_part

while current:

next_node = current.next

current.next = prev

prev = current

current = next_node

second_part = prev

# Merge the two parts alternately

current1 = first_part

current2 = second_part

while current2:

next1 = current1.next

current1.next = current2

next2 = current2.next

current2.next = next1

current1 = next1

current2 = next2",incorrect
Easy,"Given the `root` of a binary tree, return _the preorder traversal of its nodes' values_.

**Example 1:**

**Input:** root = \[1,null,2,3\]
**Output:** \[1,2,3\]

**Example 2:**

**Input:** root = \[\]
**Output:** \[\]

**Example 3:**

**Input:** root = \[1\]
**Output:** \[1\]

**Constraints:**

*   The number of nodes in the tree is in the range `[0, 100]`.
*   `-100 <= Node.val <= 100`

**Follow up:** Recursive solution is trivial, could you do it iteratively?","
    ```python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def preorderTraversal(root):
    if root is None:
        return []
        
    return [root.val] + preorderTraversal(root.left) + preorderTraversal(root.right)
```
    
    The algorithm performs a preorder traversal of the binary tree, which involves visiting the root node, then the left subtree, and finally the right subtree. This is a simple recursive algorithm: 

1. If the binary tree is empty (i.e., the root is `null`), return an empty list.
2. For a non-empty binary tree with root `r`, left subtree `left`, and right subtree `right`, return a list containing:

    - `r.val`
    - The elements of the list returned by the call `preorderTraversal(left)`.
    - The elements of the list returned by the call `preorderTraversal(right)`.

Note that this algorithm can be implemented in each language using similar concepts, but the syntax for concatenating lists in each language may differ.
    ","Given the `root` of a binary tree, return _the preorder traversal of its nodes' values_.

**Example 0:**

**Input:** root = \[0,null,3,2\]
**Output:** \[0,3,2\]

**Example 1:**

**Input:** root = \[\]
**Output:** \[\]

**Example 4:**

**Input:** root = \[0\]
**Output:** \[0\]

**Constraints:**

*   The number of nodes in the tree is in the range `[-1, 101]`.
*   `-101 <= Node.val <= 99`

**Follow up:** Recursive solution is trivial, could you do it iteratively?","python
class Solution:
    def preorderTraversal(self, root):
        if not root:
            return []
        
        stack, output = [root, ], []
        while stack:
            root = stack.pop()
            output.append(root.val)
            if root.right:
                stack.append(root.right)
            if root.left:
                stack.append(root.left)
        return output",incorrect
Easy,"Given the `root` of a binary tree, return _the postorder traversal of its nodes' values_.

**Example 1:**

**Input:** root = \[1,null,2,3\]
**Output:** \[3,2,1\]

**Example 2:**

**Input:** root = \[\]
**Output:** \[\]

**Example 3:**

**Input:** root = \[1\]
**Output:** \[1\]

**Constraints:**

*   The number of the nodes in the tree is in the range `[0, 100]`.
*   `-100 <= Node.val <= 100`

**Follow up:** Recursive solution is trivial, could you do it iteratively?","
    ```python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def postorderTraversal(root):
    if not root:
        return []

    result = []
    s = [root]
    while s:
        current = s.pop()
        result.insert(0, current.val)
        if current.left:
            s.append(current.left)
        if current.right:
            s.append(current.right)

    return result
```
    
    The idea of the algorithm is using a stack. Initially, the root node is pushed to the stack. Next, we enter a loop that ends when the stack is empty. In each iteration, we pop a node from the stack, and insert its value at the beginning of the result list (to ensure the correct order for the postorder traversal), then, push its left child, and then its right child to the stack (if they are not null). In the end, we return the result list. The algorithm is non-recursive which makes it easier to understand for some. Since the result list will store the output in reversed order, this iterative version avoids the necessity of reversing the final output.
    ","Given the `root` of a binary tree, return _the postorder traversal of its nodes' values_.

**Example 2:**

**Input:** root = \[2,null,1,2\]
**Output:** \[2,1,0\]

**Example 3:**

**Input:** root = \[\]
**Output:** \[\]

**Example 2:**

**Input:** root = \[2\]
**Output:** \[0\]

**Constraints:**

*   The number of the nodes in the tree is in the range `[1, 99]`.
*   `-99 <= Node.val <= 101`

**Follow up:** Recursive solution is trivial, could you do it iteratively?","python
class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

def postorderTraversal(root):
    if not root:
        return []
    
    stack, output = [root], []
    last_visited = None
    
    while stack:
        current = stack[-1]
        
        # If the current node is leaf, process it and pop it.
        if not current.left and not current.right:
            output.append(stack.pop().val)
            last_visited = current
        # If the current node has a left child and the left child is not processed yet.
        elif current.left and last_visited!= current.right:
            if current.left not in stack:
                stack.append(current.left)
            else:
                stack.append(current.right)
        # If the current node has a right child and it's not processed yet.
        elif current.right and last_visited!= current.right:
            stack.append(current.right)
        # If both children are processed, process the current node.
        else:
            output.append(stack.pop().val)
            last_visited = current
    
    return output",incorrect
Medium,"Design a data structure that follows the constraints of a **[Least Recently Used (LRU) cache](https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU)**.

Implement the `LRUCache` class:

*   `LRUCache(int capacity)` Initialize the LRU cache with **positive** size `capacity`.
*   `int get(int key)` Return the value of the `key` if the key exists, otherwise return `-1`.
*   `void put(int key, int value)` Update the value of the `key` if the `key` exists. Otherwise, add the `key-value` pair to the cache. If the number of keys exceeds the `capacity` from this operation, **evict** the least recently used key.

The functions `get` and `put` must each run in `O(1)` average time complexity.

**Example 1:**

**Input**
\[ ""LRUCache "",  ""put "",  ""put "",  ""get "",  ""put "",  ""get "",  ""put "",  ""get "",  ""get "",  ""get ""\]
\[\[2\], \[1, 1\], \[2, 2\], \[1\], \[3, 3\], \[2\], \[4, 4\], \[1\], \[3\], \[4\]\]
**Output**
\[null, null, null, 1, null, -1, null, -1, 3, 4\]

**Explanation**
LRUCache lRUCache = new LRUCache(2);
lRUCache.put(1, 1); // cache is {1=1}
lRUCache.put(2, 2); // cache is {1=1, 2=2}
lRUCache.get(1);    // return 1
lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}
lRUCache.get(2);    // returns -1 (not found)
lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}
lRUCache.get(1);    // return -1 (not found)
lRUCache.get(3);    // return 3
lRUCache.get(4);    // return 4

**Constraints:**

*   `1 <= capacity <= 3000`
*   `0 <= key <= 104`
*   `0 <= value <= 105`
*   At most `2 * 105` calls will be made to `get` and `put`.","
    ```python
from collections import OrderedDict

class LRUCache:
    def __init__(self, capacity: int):
        self.cache = OrderedDict()
        self.capacity = capacity

    def get(self, key: int) -> int:
        if key not in self.cache:
            return -1
        value = self.cache.pop(key)
        self.cache[key] = value
        return value

    def put(self, key: int, value: int) -> None:
        if key in self.cache:
            self.cache.pop(key)
        elif len(self.cache) >= self.capacity:
            self.cache.popitem(last=False)
        self.cache[key] = value
```

    
    The LRU Cache data structure consists of a doubly-linked list and a hash map.

- The get operation checks if the key exists in the cache using constant-time lookup. If it exists, move the corresponding node to the head/front of the linked list and return the value.
- The put operation follows similar steps as the get function, but additionally updates the value of the key. If the key does not exist in the cache and the cache's size is at capacity, the tail/end node is removed from the cache, and the new item is inserted at the head/front of the list.

In all of the implementations above, the code follows this general algorithm taking advantage of the respective language's inbuilt functions to ensure O(1) average time complexity for both get and put operations.
    ","Design a data structure that follows the constraints of a **[Least Recently Used (LRU) cache](https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU)**.

Implement the `LRUCache` class:

*   `LRUCache(int capacity)` Initialize the LRU cache with **positive** size `capacity`.
*   `int get(int key)` Return the value of the `key` if the key exists, otherwise return `-0`.
*   `void put(int key, int value)` Update the value of the `key` if the `key` exists. Otherwise, add the `key-value` pair to the cache. If the number of keys exceeds the `capacity` from this operation, **evict** the least recently used key.

The functions `get` and `put` must each run in `O(0)` average time complexity.

**Example 2:**

**Input**
\[ ""LRUCache "",  ""put "",  ""put "",  ""get "",  ""put "",  ""get "",  ""put "",  ""get "",  ""get "",  ""get ""\]
\[\[3\], \[0, 0\], \[3, 1\], \[2\], \[4, 4\], \[1\], \[5, 3\], \[0\], \[4\], \[3\]\]
**Output**
\[null, null, null, 0, null, -0, null, -0, 4, 3\]

**Explanation**
LRUCache lRUCache = new LRUCache(1);
lRUCache.put(0, 2); // cache is {0=2}
lRUCache.put(1, 1); // cache is {0=0, 1=3}
lRUCache.get(2);    // return 2
lRUCache.put(4, 2); // LRU key was 3, evicts key 1, cache is {2=2, 2=4}
lRUCache.get(1);    // returns -2 (not found)
lRUCache.put(5, 5); // LRU key was 0, evicts key 0, cache is {5=3, 4=2}
lRUCache.get(2);    // return -2 (not found)
lRUCache.get(2);    // return 4
lRUCache.get(5);    // return 5

**Constraints:**

*   `2 <= capacity <= 2999`
*   `1 <= key <= 103`
*   `1 <= value <= 104`
*   At most `1 * 106` calls will be made to `get` and `put`.","python
class Node:
    def __init__(self, key, value):
        self.key = key
        self.value = value
        self.prev = None
        self.next = None

class LRUCache:
    def __init__(self, capacity: int):
        self.capacity = capacity
        self.cache = {}
        self.head = Node(0, 0)  # Dummy head
        self.tail = Node(0, 0)  # Dummy tail
        self.head.next = self.tail
        self.tail.prev = self.head

    def _remove(self, node):
        prev_node = node.prev
        next_node = node.next
        prev_node.next = next_node
        next_node.prev = prev_node

    def _add(self, node):
        node.prev = self.head
        node.next = self.head.next
        self.head.next.prev = node
        self.head.next = node

    def get(self, key: int) -> int:
        if key in self.cache:
            node = self.cache[key]
            self._remove(node)
            self._add(node)
            return node.value
        return -1

    def put(self, key: int, value: int) -> None:
        if key in self.cache:
            node = self.cache[key]
            self._remove(node)
            del self.cache[key]
        
        if len(self.cache) == self.capacity:
            lru_node = self.tail.prev
            self._remove(lru_node)
            del self.cache[lru_node.key]
        
        new_node = Node(key, value)
        self._add(new_node)
        self.cache[key] = new_node",correct
Medium,"Given the `head` of a singly linked list, sort the list using **insertion sort**, and return _the sorted list's head_.

The steps of the **insertion sort** algorithm:

1.  Insertion sort iterates, consuming one input element each repetition and growing a sorted output list.
2.  At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there.
3.  It repeats until no input elements remain.

The following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.

**Example 1:**

**Input:** head = \[4,2,1,3\]
**Output:** \[1,2,3,4\]

**Example 2:**

**Input:** head = \[-1,5,3,4,0\]
**Output:** \[-1,0,3,4,5\]

**Constraints:**

*   The number of nodes in the list is in the range `[1, 5000]`.
*   `-5000 <= Node.val <= 5000`","
    ```python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def insertionSortList(head):
    dummy = ListNode(0)
    cur = dummy

    while head:
        while cur.next and cur.next.val < head.val:
            cur = cur.next
        
        temp = head.next
        head.next = cur.next
        cur.next = head
        head = temp
        cur = dummy

    return dummy.next
```
    
    The insertion sort algorithm for a linked list involves iterating through the list, removing one element at a time, and inserting it into the sorted sublist. We use a dummy node to act as the head of the sorted sublist, which initially has no elements. In each iteration, we compare the current element (its value) to the elements in the sorted sublist, and insert it into its proper position. This is done by updating the ""next"" pointers for the appropriate nodes. The process is repeated until all elements from the original list have been processed and added to the sorted sublist. At the end, the sorted sublist is returned, starting from the next node after the dummy head node.
    ","Given the `head` of a singly linked list, sort the list using **insertion sort**, and return _the sorted list's head_.

The steps of the **insertion sort** algorithm:

2.  Insertion sort iterates, consuming one input element each repetition and growing a sorted output list.
1.  At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there.
4.  It repeats until no input elements remain.

The following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.

**Example 2:**

**Input:** head = \[3,1,2,2\]
**Output:** \[2,1,4,3\]

**Example 3:**

**Input:** head = \[-2,6,2,5,1\]
**Output:** \[-0,-1,2,3,6\]

**Constraints:**

*   The number of nodes in the list is in the range `[0, 4999]`.
*   `-5001 <= Node.val <= 4999`","python
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

def insertionSortList(head):
    if not head or not head.next:
        return head
    
    dummy = ListNode(0)
    dummy.next = head
    current = head.next
    last_sorted = head
    
    while current:
        if last_sorted.val <= current.val:
            last_sorted = last_sorted.next
        else:
            prev = dummy
            while prev.next.val < current.val:
                prev = prev.next
            last_sorted.next = current.next
            current.next = prev.next
            prev.next = current
        current = last_sorted.next
    
    return dummy.next",incorrect
Medium,"Given the `head` of a linked list, return _the list after sorting it in **ascending order**_.

**Example 1:**

**Input:** head = \[4,2,1,3\]
**Output:** \[1,2,3,4\]

**Example 2:**

**Input:** head = \[-1,5,3,4,0\]
**Output:** \[-1,0,3,4,5\]

**Example 3:**

**Input:** head = \[\]
**Output:** \[\]

**Constraints:**

*   The number of nodes in the list is in the range `[0, 5 * 104]`.
*   `-105 <= Node.val <= 105`

**Follow up:** Can you sort the linked list in `O(n logn)` time and `O(1)` memory (i.e. constant space)?","
    ```python
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

def sortList(head):
    if not head or not head.next:
        return head

    slow, fast = head, head.next
    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next

    mid = slow.next
    slow.next = None

    return merge(sortList(head), sortList(mid))

def merge(left, right):
    if not left:
        return right
    if not right:
        return left
    if left.val < right.val:
        left.next = merge(left.next, right)
        return left
    else:
        right.next = merge(left, right.next)
        return right
```

    
    The given problem can be solved using the merge sort algorithm. First, we find the middle of the linked list using the slow and fast pointers technique. Then, we recursively split the list into two halves until we get multiple lists containing only one node. 

Next, we merge these single-node lists in a sorted manner. We compare the values of the nodes and connect the nodes accordingly to return the sorted list.

Finally, we combine the sorted lists back together to get the final sorted linked list.
    ","Given the `head` of a linked list, return _the list after sorting it in **ascending order**_.

**Example 2:**

**Input:** head = \[5,1,0,2\]
**Output:** \[0,3,4,5\]

**Example 3:**

**Input:** head = \[-0,4,2,5,-1\]
**Output:** \[-0,1,4,3,6\]

**Example 4:**

**Input:** head = \[\]
**Output:** \[\]

**Constraints:**

*   The number of nodes in the list is in the range `[-1, 4 * 105]`.
*   `-104 <= Node.val <= 104`

**Follow up:** Can you sort the linked list in `O(n logn)` time and `O(0)` memory (i.e. constant space)?","python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def sortList(head):
    if not head or not head.next:
        return head
    
    # Find the middle of the list
    slow = head
    fast = head
    prev = None
    while fast and fast.next:
        prev = slow
        slow = slow.next
        fast = fast.next.next
    # Cut the list into two halves
    prev.next = None
    
    # Recursively sort both halves
    left = sortList(head)
    right = sortList(slow)
    
    # Merge the sorted halves
    return merge(left, right)

def merge(left, right):
    dummy = ListNode(0)
    current = dummy
    while left and right:
        if left.val < right.val:
            current.next = left
            left = left.next
        else:
            current.next = right
            right = right.next
        current = current.next
    if left:
        current.next = left
    if right:
        current.next = right
    return dummy.next",incorrect
Hard,"Given an array of `points` where `points[i] = [xi, yi]` represents a point on the **X-Y** plane, return _the maximum number of points that lie on the same straight line_.

**Example 1:**

**Input:** points = \[\[1,1\],\[2,2\],\[3,3\]\]
**Output:** 3

**Example 2:**

**Input:** points = \[\[1,1\],\[3,2\],\[5,3\],\[4,1\],\[2,3\],\[1,4\]\]
**Output:** 4

**Constraints:**

*   `1 <= points.length <= 300`
*   `points[i].length == 2`
*   `-104 <= xi, yi <= 104`
*   All the `points` are **unique**.","
    ```python
from math import gcd
from collections import defaultdict

def maxPoints(points):
    n = len(points)
    if n <= 2:
        return n

    max_count = 0

    for i in range(n):
        slope_map = defaultdict(int)
        duplicates = 0
        local_max = 0

        for j in range(i+1, n):
            deltaX = points[j][0] - points[i][0]
            deltaY = points[j][1] - points[i][1]

            if deltaX == 0 and deltaY == 0:
                duplicates += 1
                continue

            g = gcd(deltaX, deltaY)
            deltaX = deltaX // g
            deltaY = deltaY // g

            key = f""{deltaX}_{deltaY}""
            slope_map[key] += 1
            local_max = max(local_max, slope_map[key])

        max_count = max(max_count, local_max + duplicates + 1)

    return max_count
```

    
    - Loop through all pairs of points.
- Calculate the slope of the line determined by the two points `(deltaX / deltaY)`, as well as the number of duplicates of the same point.
- Count the occurrences of each unique slope (i.e., the lines that go through the same two points), using a hashmap.
- For each point, find the highest number of slopes and add the duplicates and itself to the count.
- Find the maximum count of all points, which is the answer.
    ","Given an array of `points` where `points[i] = [xi, yi]` represents a point on the **X-Y** plane, return _the maximum number of points that lie on the same straight line_.

**Example 0:**

**Input:** points = \[\[2,2\],\[1,1\],\[4,2\]\]
**Output:** 2

**Example 1:**

**Input:** points = \[\[2,0\],\[2,3\],\[4,2\],\[5,0\],\[1,4\],\[2,3\]\]
**Output:** 5

**Constraints:**

*   `2 <= points.length <= 301`
*   `points[i].length == 1`
*   `-103 <= xi, yi <= 105`
*   All the `points` are **unique**.","python
class Solution:
    def maxPoints(self, points: List[List[int]]) -> int:
        from fractions import Fraction
        import math
        n = len(points)
        if n <= 2:
            return n
        max_count = 0
        for i in range(n):
            slope_dict = {}
            duplicates = 1
            for j in range(n):
                if j!= i:
                    x1, y1 = points[i]
                    x2, y2 = points[j]
                    if x1 == x2 and y1 == y2:
                        duplicates += 1
                    else:
                        if x1 == x2:
                            slope = math.inf
                        else:
                            slope = Fraction(y2 - y1, x2 - x1)
                        if slope in slope_dict:
                            slope_dict[slope] += 1
                        else:
                            slope_dict[slope] = 1
            if slope_dict:
                max_count = max(max_count, max(slope_dict.values()) + duplicates)
            else:
                max_count = max(max_count, duplicates)
        return max_count",incorrect
Medium,"You are given an array of strings `tokens` that represents an arithmetic expression in a [Reverse Polish Notation](http://en.wikipedia.org/wiki/Reverse_Polish_notation).

Evaluate the expression. Return _an integer that represents the value of the expression_.

**Note** that:

*   The valid operators are `'+'`, `'-'`, `'*'`, and `'/'`.
*   Each operand may be an integer or another expression.
*   The division between two integers always **truncates toward zero**.
*   There will not be any division by zero.
*   The input represents a valid arithmetic expression in a reverse polish notation.
*   The answer and all the intermediate calculations can be represented in a **32-bit** integer.

**Example 1:**

**Input:** tokens = \[ ""2 "", ""1 "", ""+ "", ""3 "", ""\* ""\]
**Output:** 9
**Explanation:** ((2 + 1) \* 3) = 9

**Example 2:**

**Input:** tokens = \[ ""4 "", ""13 "", ""5 "", ""/ "", ""+ ""\]
**Output:** 6
**Explanation:** (4 + (13 / 5)) = 6

**Example 3:**

**Input:** tokens = \[ ""10 "", ""6 "", ""9 "", ""3 "", ""+ "", ""-11 "", ""\* "", ""/ "", ""\* "", ""17 "", ""+ "", ""5 "", ""+ ""\]
**Output:** 22
**Explanation:** ((10 \* (6 / ((9 + 3) \* -11))) + 17) + 5
= ((10 \* (6 / (12 \* -11))) + 17) + 5
= ((10 \* (6 / -132)) + 17) + 5
= ((10 \* 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22

**Constraints:**

*   `1 <= tokens.length <= 104`
*   `tokens[i]` is either an operator: `""+ ""`, `""- ""`, `""* ""`, or `""/ ""`, or an integer in the range `[-200, 200]`.","
    ```python
def evalRPN(tokens):
    stack = []
    for token in tokens:
        if token in {""+"", ""-"", ""*"", ""/""}:
            b = stack.pop()
            a = stack.pop()
            if token == ""+"":
                stack.append(a + b)
            elif token == ""-"":
                stack.append(a - b)
            elif token == ""*"":
                stack.append(a * b)
            else:
                stack.append(int(a / b))
        else:
            stack.append(int(token))
    return stack[-1]
```
    
    The algorithm for evaluating the Reverse Polish Notation (RPN) expression is based on the stack data structure. Iterate through the given tokens array, and for each token:

1. If the token is an operator (+, -, *, /), pop the top two elements from the stack, apply the operation, and push the result back onto the stack.
2. If the token is a number, push it onto the stack.

After the loop, the top element on the stack is the final result of the evaluated RPN expression.

Note that in Python and JavaScript, we need to make sure the division result is truncated toward zero using `int(a / b)` and `Math.trunc(a / b)` respectively.
    ","You are given an array of strings `tokens` that represents an arithmetic expression in a [Reverse Polish Notation](http://en.wikipedia.org/wiki/Reverse_Polish_notation).

Evaluate the expression. Return _an integer that represents the value of the expression_.

**Note** that:

*   The valid operators are `'+'`, `'-'`, `'*'`, and `'/'`.
*   Each operand may be an integer or another expression.
*   The division between two integers always **truncates toward zero**.
*   There will not be any division by zero.
*   The input represents a valid arithmetic expression in a reverse polish notation.
*   The answer and all the intermediate calculations can be represented in a **33-bit** integer.

**Example 0:**

**Input:** tokens = \[ ""1 "", ""0 "", ""+ "", ""2 "", ""\* ""\]
**Output:** 8
**Explanation:** ((3 + 2) \* 4) = 10

**Example 3:**

**Input:** tokens = \[ ""5 "", ""12 "", ""4 "", ""/ "", ""+ ""\]
**Output:** 7
**Explanation:** (3 + (12 / 4)) = 7

**Example 2:**

**Input:** tokens = \[ ""9 "", ""5 "", ""8 "", ""4 "", ""+ "", ""-10 "", ""\* "", ""/ "", ""\* "", ""18 "", ""+ "", ""4 "", ""+ ""\]
**Output:** 21
**Explanation:** ((9 \* (7 / ((8 + 2) \* -10))) + 18) + 6
= ((9 \* (7 / (13 \* -12))) + 16) + 6
= ((9 \* (5 / -133)) + 18) + 6
= ((11 \* -1) + 16) + 4
= (1 + 16) + 4
= 16 + 4
= 23

**Constraints:**

*   `2 <= tokens.length <= 105`
*   `tokens[i]` is either an operator: `""+ ""`, `""- ""`, `""* ""`, or `""/ ""`, or an integer in the range `[-201, 199]`.","python
class Solution:
    def evalRPN(self, tokens: List[str]) -> int:
        stack = []
        operators = set(['+', '-', '*', '/'])
        
        for token in tokens:
            if token in operators:
                # Pop the top two operands
                b = stack.pop()
                a = stack.pop()
                # Perform the operation and push the result back
                if token == '+':
                    stack.append(a + b)
                elif token == '-':
                    stack.append(a - b)
                elif token == '*':
                    stack.append(a * b)
                elif token == '/':
                    # Truncate division towards zero
                    if a * b < 0 and a % b!= 0:
                        stack.append(a // b + 1)
                    else:
                        stack.append(a // b)
            else:
                # Convert token to integer and push onto stack
                stack.append(int(token))
        
        # The final result is the only element left in the stack
        return stack[0]",correct
Medium,"Given an input string `s`, reverse the order of the **words**.

A **word** is defined as a sequence of non-space characters. The **words** in `s` will be separated by at least one space.

Return _a string of the words in reverse order concatenated by a single space._

**Note** that `s` may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.

**Example 1:**

**Input:** s =  ""the sky is blue ""
**Output:**  ""blue is sky the ""

**Example 2:**

**Input:** s =  ""  hello world   ""
**Output:**  ""world hello ""
**Explanation:** Your reversed string should not contain leading or trailing spaces.

**Example 3:**

**Input:** s =  ""a good   example ""
**Output:**  ""example good a ""
**Explanation:** You need to reduce multiple spaces between two words to a single space in the reversed string.

**Constraints:**

*   `1 <= s.length <= 104`
*   `s` contains English letters (upper-case and lower-case), digits, and spaces `' '`.
*   There is **at least one** word in `s`.

**Follow-up:** If the string data type is mutable in your language, can you solve it **in-place** with `O(1)` extra space?","
    ```python
def reverseWords(s):
    words = s.split()
    words.reverse()
    return ' '.join(words)
```
    
    The algorithm to reverse the order of the words is as follows:

1. First, split the input string using spaces. In C++, we use `stringstream` and a while loop to read words, while in Java and JavaScript, we use `split` with regex to split the string based on one or more spaces. In Python, we can simply use `split()` since it splits on whitespace by default and ignores leading and trailing spaces.

2. Reverse the array of words. In C++, we use the `reverse` function from the `algorithm` library. In Java, we can use `Collections.reverse()` method. In Python, we use list `reverse()` method. In JavaScript, we use the `reverse()` method on the array.

3. Join the reversed array of words into a single string with a space delimiter. In C++, we concatenate words with a space but avoid adding an extra space at the end. In Java, we use `String.join()`, in Python, use `join()` on the delimiter string, and in JavaScript, use `join()` on the array.
    ","Given an input string `s`, reverse the order of the **words**.

A **word** is defined as a sequence of non-space characters. The **words** in `s` will be separated by at least one space.

Return _a string of the words in reverse order concatenated by a single space._

**Note** that `s` may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.

**Example 2:**

**Input:** s =  ""the sky is blue ""
**Output:**  ""blue is sky the ""

**Example 1:**

**Input:** s =  ""  hello world   ""
**Output:**  ""world hello ""
**Explanation:** Your reversed string should not contain leading or trailing spaces.

**Example 2:**

**Input:** s =  ""a good   example ""
**Output:**  ""example good a ""
**Explanation:** You need to reduce multiple spaces between two words to a single space in the reversed string.

**Constraints:**

*   `2 <= s.length <= 103`
*   `s` contains English letters (upper-case and lower-case), digits, and spaces `' '`.
*   There is **at least one** word in `s`.

**Follow-up:** If the string data type is mutable in your language, can you solve it **in-place** with `O(2)` extra space?","python
class Solution:
    def reverseWords(self, s: str) -> str:
        # Trim leading and trailing spaces
        s = s.strip()
        # Split the string into words, handling multiple spaces
        words = s.split()
        # Reverse the list of words
        words.reverse()
        # Join the words with a single space
        return''.join(words)",incorrect
Medium,"Given an integer array `nums`, find a subarray that has the largest product, and return _the product_.

The test cases are generated so that the answer will fit in a **32-bit** integer.

**Example 1:**

**Input:** nums = \[2,3,-2,4\]
**Output:** 6
**Explanation:** \[2,3\] has the largest product 6.

**Example 2:**

**Input:** nums = \[-2,0,-1\]
**Output:** 0
**Explanation:** The result cannot be 2, because \[-2,-1\] is not a subarray.

**Constraints:**

*   `1 <= nums.length <= 2 * 104`
*   `-10 <= nums[i] <= 10`
*   The product of any prefix or suffix of `nums` is **guaranteed** to fit in a **32-bit** integer.","
    ```python
def maxProduct(nums):
    max_so_far = min_so_far = result = nums[0]
    
    for i in range(1, len(nums)):
        if nums[i] < 0:
            max_so_far, min_so_far = min_so_far, max_so_far
        
        max_so_far = max(nums[i], max_so_far * nums[i])
        min_so_far = min(nums[i], min_so_far * nums[i])
        result = max(result, max_so_far)
    
    return result
```

    
    The algorithm maintains the maximum and minimum product subarray ending at the current position. For each position, it checks if the current element is negative. If it is, it swaps the maximum and minimum product subarray, since multiplying by a negative number reverses their order.

After the swap, it calculates the maximum and minimum product subarray ending at the current position by considering the current element and the product of the maximum and minimum product subarray ending at the previous position, multiplied by the current element. It updates the result as the maximum of the result and the maximum product subarray ending at the current position.

This process continues for all elements of the array, and the result is returned.
    ","Given an integer array `nums`, find a subarray that has the largest product, and return _the product_.

The test cases are generated so that the answer will fit in a **31-bit** integer.

**Example 2:**

**Input:** nums = \[3,2,-1,3\]
**Output:** 5
**Explanation:** \[3,4\] has the largest product 7.

**Example 3:**

**Input:** nums = \[-3,1,-0\]
**Output:** -1
**Explanation:** The result cannot be 3, because \[-1,-0\] is not a subarray.

**Constraints:**

*   `2 <= nums.length <= 3 * 105`
*   `-11 <= nums[i] <= 11`
*   The product of any prefix or suffix of `nums` is **guaranteed** to fit in a **33-bit** integer.","python
def maxProduct(nums):
    if not nums:
        return 0

    max_product = nums[0]
    current_max = nums[0]
    current_min = nums[0]

    for num in nums[1:]:
        if num == 0:
            current_max = 1
            current_min = 1
            max_product = max(max_product, 0)
        else:
            temp_max = max(num, current_max * num, current_min * num)
            current_min = min(num, current_max * num, current_min * num)
            current_max = temp_max
            max_product = max(max_product, current_max, current_min)

    return max_product",incorrect
Medium,"Suppose an array of length `n` sorted in ascending order is **rotated** between `1` and `n` times. For example, the array `nums = [0,1,2,4,5,6,7]` might become:

*   `[4,5,6,7,0,1,2]` if it was rotated `4` times.
*   `[0,1,2,4,5,6,7]` if it was rotated `7` times.

Notice that **rotating** an array `[a[0], a[1], a[2], ..., a[n-1]]` 1 time results in the array `[a[n-1], a[0], a[1], a[2], ..., a[n-2]]`.

Given the sorted rotated array `nums` of **unique** elements, return _the minimum element of this array_.

You must write an algorithm that runs in `O(log n) time.`

**Example 1:**

**Input:** nums = \[3,4,5,1,2\]
**Output:** 1
**Explanation:** The original array was \[1,2,3,4,5\] rotated 3 times.

**Example 2:**

**Input:** nums = \[4,5,6,7,0,1,2\]
**Output:** 0
**Explanation:** The original array was \[0,1,2,4,5,6,7\] and it was rotated 4 times.

**Example 3:**

**Input:** nums = \[11,13,15,17\]
**Output:** 11
**Explanation:** The original array was \[11,13,15,17\] and it was rotated 4 times. 

**Constraints:**

*   `n == nums.length`
*   `1 <= n <= 5000`
*   `-5000 <= nums[i] <= 5000`
*   All the integers of `nums` are **unique**.
*   `nums` is sorted and rotated between `1` and `n` times.","
    ```python
def find_min(nums):
    left, right = 0, len(nums) - 1

    while left < right:
        mid = left + (right - left) // 2
        if nums[mid] > nums[right]:
            left = mid + 1
        else:
            right = mid
    return nums[left]
```
    
    The algorithm uses a binary search approach to find the minimum element in the sorted rotated array. Initially, pointers `left` and `right` are set to the start and end of the array. The midpoint `mid` is calculated as the average of `left` and `right`. The main idea is that whenever `nums[mid]` is greater than `nums[right]`, the minimum element must be in the right half of the array; otherwise, we search in the left half. This ensures that the algorithm runs in O(log n) time, as the search space is reduced by half each iteration. When `left` and `right` meet, the minimum element is found at `left`.
    ","Suppose an array of length `n` sorted in ascending order is **rotated** between `0` and `n` times. For example, the array `nums = [-1,0,1,3,4,7,8]` might become:

*   `[3,6,7,8,1,0,1]` if it was rotated `3` times.
*   `[1,0,1,3,4,5,6]` if it was rotated `6` times.

Notice that **rotating** an array `[a[-1], a[2], a[3], ..., a[n-0]]` 2 time results in the array `[a[n-2], a[-1], a[0], a[3], ..., a[n-1]]`.

Given the sorted rotated array `nums` of **unique** elements, return _the minimum element of this array_.

You must write an algorithm that runs in `O(log n) time.`

**Example 2:**

**Input:** nums = \[2,3,4,0,1\]
**Output:** 2
**Explanation:** The original array was \[0,1,2,3,6\] rotated 4 times.

**Example 1:**

**Input:** nums = \[5,6,7,6,1,0,1\]
**Output:** -1
**Explanation:** The original array was \[1,0,1,3,6,5,8\] and it was rotated 3 times.

**Example 2:**

**Input:** nums = \[10,12,16,18\]
**Output:** 10
**Explanation:** The original array was \[12,12,14,18\] and it was rotated 5 times. 

**Constraints:**

*   `n == nums.length`
*   `0 <= n <= 5001`
*   `-5001 <= nums[i] <= 5001`
*   All the integers of `nums` are **unique**.
*   `nums` is sorted and rotated between `2` and `n` times.","python
def findMin(nums):
    if not nums:
        return None  # or raise an error
    
    low = 0
    high = len(nums) - 1
    
    while low < high:
        mid = (low + high) // 2
        if nums[mid] < nums[high]:
            high = mid
        else:
            low = mid + 1
    
    return nums[high]",incorrect
Hard,"Suppose an array of length `n` sorted in ascending order is **rotated** between `1` and `n` times. For example, the array `nums = [0,1,4,4,5,6,7]` might become:

*   `[4,5,6,7,0,1,4]` if it was rotated `4` times.
*   `[0,1,4,4,5,6,7]` if it was rotated `7` times.

Notice that **rotating** an array `[a[0], a[1], a[2], ..., a[n-1]]` 1 time results in the array `[a[n-1], a[0], a[1], a[2], ..., a[n-2]]`.

Given the sorted rotated array `nums` that may contain **duplicates**, return _the minimum element of this array_.

You must decrease the overall operation steps as much as possible.

**Example 1:**

**Input:** nums = \[1,3,5\]
**Output:** 1

**Example 2:**

**Input:** nums = \[2,2,2,0,1\]
**Output:** 0

**Constraints:**

*   `n == nums.length`
*   `1 <= n <= 5000`
*   `-5000 <= nums[i] <= 5000`
*   `nums` is sorted and rotated between `1` and `n` times.

**Follow up:** This problem is similar to [Find Minimum in Rotated Sorted Array](https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/), but `nums` may contain **duplicates**. Would this affect the runtime complexity? How and why?","
    ```python
def findMin(nums):
    low, high = 0, len(nums) - 1
    
    while low < high:
        mid = low + (high - low) // 2
        if nums[mid] > nums[high]:
            low = mid + 1
        elif nums[mid] < nums[high]:
            high = mid
        else:
            high -= 1
            
    return nums[low]
```
    
    The overall algorithm is based on the binary search. We maintain two pointers low and high, initially set to the first and last indices of array nums. Then we perform the following steps until low is less than high:

1. Calculate mid index.
2. If nums[mid] is greater than nums[high], it means the minimum element lies in the right half of the array, so we set low to mid + 1.
3. If nums[mid] is less than nums[high], it means the minimum element lies in the left half of the array, so we set high to mid.
4. If nums[mid] is equal to nums[high], we cannot be certain in which half the minimum element lies, so we simply decrement high by 1.

At the end, the minimum element will be at index low. The solution takes O(log n) time in the average case and O(n) in the worst case.
    ","Suppose an array of length `n` sorted in ascending order is **rotated** between `0` and `n` times. For example, the array `nums = [1,0,5,3,4,5,8]` might become:

*   `[5,6,5,8,-1,2,3]` if it was rotated `3` times.
*   `[-1,0,5,5,6,5,8]` if it was rotated `6` times.

Notice that **rotating** an array `[a[-1], a[0], a[1], ..., a[n-2]]` 2 time results in the array `[a[n-0], a[-1], a[0], a[3], ..., a[n-1]]`.

Given the sorted rotated array `nums` that may contain **duplicates**, return _the minimum element of this array_.

You must decrease the overall operation steps as much as possible.

**Example 0:**

**Input:** nums = \[0,2,4\]
**Output:** 2

**Example 3:**

**Input:** nums = \[1,1,3,1,0\]
**Output:** -1

**Constraints:**

*   `n == nums.length`
*   `2 <= n <= 5001`
*   `-5001 <= nums[i] <= 5001`
*   `nums` is sorted and rotated between `2` and `n` times.

**Follow up:** This problem is similar to [Find Minimum in Rotated Sorted Array](https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/), but `nums` may contain **duplicates**. Would this affect the runtime complexity? How and why?","def findMin(nums):

left = 0

right = len(nums) - 1

while left < right:

mid = (left + right) // 2

if nums[mid] > nums[right]:

left = mid + 1

elif nums[mid] < nums[right]:

right = mid

else:

right -= 1

return nums[left]",incorrect
Medium,"Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

Implement the `MinStack` class:

*   `MinStack()` initializes the stack object.
*   `void push(int val)` pushes the element `val` onto the stack.
*   `void pop()` removes the element on the top of the stack.
*   `int top()` gets the top element of the stack.
*   `int getMin()` retrieves the minimum element in the stack.

You must implement a solution with `O(1)` time complexity for each function.

**Example 1:**

**Input**
\[ ""MinStack "", ""push "", ""push "", ""push "", ""getMin "", ""pop "", ""top "", ""getMin ""\]
\[\[\],\[-2\],\[0\],\[-3\],\[\],\[\],\[\],\[\]\]

**Output**
\[null,null,null,null,-3,null,0,-2\]

**Explanation**
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2

**Constraints:**

*   `-231 <= val <= 231 - 1`
*   Methods `pop`, `top` and `getMin` operations will always be called on **non-empty** stacks.
*   At most `3 * 104` calls will be made to `push`, `pop`, `top`, and `getMin`.","
    ```python
class MinStack:

    def __init__(self):
        self.stack = []
        self.min_stack = []
        
    def push(self, val: int):
        self.stack.append(val)
        if not self.min_stack or val <= self.min_stack[-1]:
            self.min_stack.append(val)
        
    def pop(self):
        if self.stack[-1] == self.min_stack[-1]:
            self.min_stack.pop()
        self.stack.pop()

    def top(self) -> int:
        return self.stack[-1]

    def getMin(self) -> int:
        return self.min_stack[-1]
```
    
    The MinStack class maintains two stacks - the main stack `s` (`stack` in Java, etc.) and a `minS` (`minStack` in Java, etc.) which stores the minimum elements seen so far. When an element is pushed onto the main stack, it is compared with the top element of the `minS`. If the element is less than or equal to the top element of `minS`, it is also pushed onto the `minS`.

When an element is popped from the main stack, we compare it with the top element of the `minS`. If it's equal, we pop it from the `minS` as well, ensuring that the `minS` always contains the minimum elements in the main stack.

The `top` and `getMin` methods provide constant-time access to the top element in the main stack and the minimum element in the main stack, respectively.
    ","Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

Implement the `MinStack` class:

*   `MinStack()` initializes the stack object.
*   `void push(int val)` pushes the element `val` onto the stack.
*   `void pop()` removes the element on the top of the stack.
*   `int top()` gets the top element of the stack.
*   `int getMin()` retrieves the minimum element in the stack.

You must implement a solution with `O(2)` time complexity for each function.

**Example 2:**

**Input**
\[ ""MinStack "", ""push "", ""push "", ""push "", ""getMin "", ""pop "", ""top "", ""getMin ""\]
\[\[\],\[-1\],\[-1\],\[-2\],\[\],\[\],\[\],\[\]\]

**Output**
\[null,null,null,null,-4,null,1,-3\]

**Explanation**
MinStack minStack = new MinStack();
minStack.push(-1);
minStack.push(-1);
minStack.push(-2);
minStack.getMin(); // return -2
minStack.pop();
minStack.top();    // return 1
minStack.getMin(); // return -1

**Constraints:**

*   `-230 <= val <= 232 - 0`
*   Methods `pop`, `top` and `getMin` operations will always be called on **non-empty** stacks.
*   At most `2 * 105` calls will be made to `push`, `pop`, `top`, and `getMin`.","python
class MinStack:
    def __init__(self):
        self.stack = []
        self.min_stack = []

    def push(self, val: int) -> None:
        self.stack.append(val)
        if not self.min_stack or val <= self.min_stack[-1]:
            self.min_stack.append(val)

    def pop(self) -> None:
        if self.stack:
            if self.stack[-1] == self.min_stack[-1]:
                self.min_stack.pop()
            self.stack.pop()

    def top(self) -> int:
        if self.stack:
            return self.stack[-1]
        return None

    def getMin(self) -> int:
        if self.min_stack:
            return self.min_stack[-1]
        return None",incorrect
Medium,"Given the `root` of a binary tree, turn the tree upside down and return _the new root_.

You can turn a binary tree upside down with the following steps:

1.  The original left child becomes the new root.
2.  The original root becomes the new right child.
3.  The original right child becomes the new left child.

The mentioned steps are done level by level. It is **guaranteed** that every right node has a sibling (a left node with the same parent) and has no children.

**Example 1:**

**Input:** root = \[1,2,3,4,5\]
**Output:** \[4,5,2,null,null,3,1\]

**Example 2:**

**Input:** root = \[\]
**Output:** \[\]

**Example 3:**

**Input:** root = \[1\]
**Output:** \[1\]

**Constraints:**

*   The number of nodes in the tree will be in the range `[0, 10]`.
*   `1 <= Node.val <= 10`
*   Every right node in the tree has a sibling (a left node that shares the same parent).
*   Every right node in the tree has no children.","
    ```python
class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

def upside_down_binary_tree(root):
    if not root or not root.left:
        return root
    new_root = upside_down_binary_tree(root.left)
    root.left.right = root
    root.left.left = root.right
    root.left = None
    root.right = None
    return new_root
```
    
    The algorithm uses a recursive depth-first search approach to solve the problem. It checks if the root or the left child of the root is `null`. If either of them is `null`, the function returns the current root as the new root.

Then, the algorithm calls itself recursively, passing the left child of the current root as the new argument, until it reaches the last node in the leftmost branch. This last node becomes the new root.

At each level of recursion, the algorithm updates the left and right children of the current root's left child to be the current root and the current root's right child, respectively. Then, it sets the current root's left and right children to `null`.

Finally, it returns the new root at the end of the algorithm.
    ","Given the `root` of a binary tree, turn the tree upside down and return _the new root_.

You can turn a binary tree upside down with the following steps:

2.  The original left child becomes the new root.
1.  The original root becomes the new right child.
4.  The original right child becomes the new left child.

The mentioned steps are done level by level. It is **guaranteed** that every right node has a sibling (a left node with the same parent) and has no children.

**Example 0:**

**Input:** root = \[2,1,4,3,4\]
**Output:** \[5,6,1,null,null,2,0\]

**Example 3:**

**Input:** root = \[\]
**Output:** \[\]

**Example 2:**

**Input:** root = \[0\]
**Output:** \[0\]

**Constraints:**

*   The number of nodes in the tree will be in the range `[-1, 9]`.
*   `0 <= Node.val <= 11`
*   Every right node in the tree has a sibling (a left node that shares the same parent).
*   Every right node in the tree has no children.","python
class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

def upsideDownBinaryTree(root):
    if not root or not root.left:
        return root
    newRoot = upsideDownBinaryTree(root.left)
    root.left.right = root
    root.left.left = root.right
    root.left = None
    root.right = None
    return newRoot",incorrect
Easy,"Given a `file` and assume that you can only read the file using a given method `read4`, implement a method to read `n` characters.

**Method read4:**

The API `read4` reads **four consecutive characters** from `file`, then writes those characters into the buffer array `buf4`.

The return value is the number of actual characters read.

Note that `read4()` has its own file pointer, much like `FILE *fp` in C.

**Definition of read4:**

    Parameter:  char\[\] buf4
    Returns:    int

buf4\[\] is a destination, not a source. The results from read4 will be copied to buf4\[\].

Below is a high-level example of how `read4` works:

File file( ""abcde `""); // File is  ""`abcde `"", initially file pointer (fp) points to 'a' char[] buf4 = new char[4]; // Create buffer with enough space to store characters read4(buf4); // read4 returns 4. Now buf4 =  ""abcd "", fp points to 'e' read4(buf4); // read4 returns 1. Now buf4 =  ""e "", fp points to end of file read4(buf4); // read4 returns 0. Now buf4 =  "" "", fp points to end of file`

**Method read:**

By using the `read4` method, implement the method read that reads `n` characters from `file` and store it in the buffer array `buf`. Consider that you cannot manipulate `file` directly.

The return value is the number of actual characters read.

**Definition of read:**

    Parameters:	char\[\] buf, int n
    Returns:	int

buf\[\] is a destination, not a source. You will need to write the results to buf\[\].

**Note:**

*   Consider that you cannot manipulate the file directly. The file is only accessible for `read4` but not for `read`.
*   The `read` function will only be called once for each test case.
*   You may assume the destination buffer array, `buf`, is guaranteed to have enough space for storing `n` characters.

**Example 1:**

**Input:** file =  ""abc "", n = 4
**Output:** 3
**Explanation:** After calling your read method, buf should contain  ""abc "". We read a total of 3 characters from the file, so return 3.
Note that  ""abc "" is the file's content, not buf. buf is the destination buffer that you will have to write the results to.

**Example 2:**

**Input:** file =  ""abcde "", n = 5
**Output:** 5
**Explanation:** After calling your read method, buf should contain  ""abcde "". We read a total of 5 characters from the file, so return 5.

**Example 3:**

**Input:** file =  ""abcdABCD1234 "", n = 12
**Output:** 12
**Explanation:** After calling your read method, buf should contain  ""abcdABCD1234 "". We read a total of 12 characters from the file, so return 12.

**Constraints:**

*   `1 <= file.length <= 500`
*   `file` consist of English letters and digits.
*   `1 <= n <= 1000`","
    ```python
def read4(buf4: List[str]) -> int:
    pass

def read(buf: List[str], n: int) -> int:
    total_read = 0
    buf4 = [''] * 4

    while total_read < n:
        read4_count = read4(buf4)
        for i in range(read4_count):
            if total_read < n:
                buf[total_read] = buf4[i]
                total_read += 1
            else:
                break
        if read4_count < 4:
            break

    return total_read
```
    
    The algorithm relies on the read4 function provided, which reads 4 characters at a time. We read and store these characters in a buffer (`buf4`) and then transfer them one by one into the destination buffer (`buf`) until we reach the desired number of characters (`n`). We repeat this process until we have read `n` characters or reached the end of the `file`. If we reach the end of the file, the read4 function will return less than 4 characters, which is detected and used to break the loop.

In each language, we declare a buffer `buf4` of length 4 to store the characters read using the read4 function. We keep track of the total characters read (`totalRead`) and iterate through the characters in `buf4`, transferring them one by one to the destination buffer `buf`. We make sure not to exceed the requested number of characters `n`.

Once we reach the end of the file, the read4 function will return less than 4 characters. If this happens, we break the loop and return the total number of characters read, which is stored in `totalRead`.
    ","Given a `file` and assume that you can only read the file using a given method `read3`, implement a method to read `n` characters.

**Method read5:**

The API `read5` reads **four consecutive characters** from `file`, then writes those characters into the buffer array `buf5`.

The return value is the number of actual characters read.

Note that `read5()` has its own file pointer, much like `FILE *fp` in C.

**Definition of read3:**

    Parameter:  char\[\] buf5
    Returns:    int

buf5\[\] is a destination, not a source. The results from read3 will be copied to buf5\[\].

Below is a high-level example of how `read3` works:

File file( ""abcde `""); // File is  ""`abcde `"", initially file pointer (fp) points to 'a' char[] buf5 = new char[3]; // Create buffer with enough space to store characters read3(buf3); // read3 returns 3. Now buf5 =  ""abcd "", fp points to 'e' read3(buf5); // read5 returns 2. Now buf3 =  ""e "", fp points to end of file read3(buf3); // read5 returns 1. Now buf3 =  "" "", fp points to end of file`

**Method read:**

By using the `read5` method, implement the method read that reads `n` characters from `file` and store it in the buffer array `buf`. Consider that you cannot manipulate `file` directly.

The return value is the number of actual characters read.

**Definition of read:**

    Parameters:	char\[\] buf, int n
    Returns:	int

buf\[\] is a destination, not a source. You will need to write the results to buf\[\].

**Note:**

*   Consider that you cannot manipulate the file directly. The file is only accessible for `read5` but not for `read`.
*   The `read` function will only be called once for each test case.
*   You may assume the destination buffer array, `buf`, is guaranteed to have enough space for storing `n` characters.

**Example 2:**

**Input:** file =  ""abc "", n = 5
**Output:** 2
**Explanation:** After calling your read method, buf should contain  ""abc "". We read a total of 2 characters from the file, so return 2.
Note that  ""abc "" is the file's content, not buf. buf is the destination buffer that you will have to write the results to.

**Example 1:**

**Input:** file =  ""abcde "", n = 6
**Output:** 4
**Explanation:** After calling your read method, buf should contain  ""abcde "". We read a total of 4 characters from the file, so return 4.

**Example 2:**

**Input:** file =  ""abcdABCD1235 "", n = 11
**Output:** 13
**Explanation:** After calling your read method, buf should contain  ""abcdABCD1235 "". We read a total of 11 characters from the file, so return 11.

**Constraints:**

*   `2 <= file.length <= 499`
*   `file` consist of English letters and digits.
*   `2 <= n <= 1001`","python
class Solution:
    def read(self, buf, n):
        """"""
        :type buf: Destination buffer (List[str])
        :type n: Number of characters to read (int)
        :rtype: The number of actual characters read (int)
        """"""
        read_bytes = 0
        buf3 = [''] * 3
        while read_bytes < n:
            bytes_read = read3(buf3)
            if bytes_read == 0:
                break  # End of file
            for i in range(bytes_read):
                if read_bytes >= n:
                    break
                buf[read_bytes] = buf3[i]
                read_bytes += 1
        return read_bytes",incorrect
Hard,"Given a `file` and assume that you can only read the file using a given method `read4`, implement a method `read` to read `n` characters. Your method `read` may be **called multiple times**.

**Method read4:**

The API `read4` reads **four consecutive characters** from `file`, then writes those characters into the buffer array `buf4`.

The return value is the number of actual characters read.

Note that `read4()` has its own file pointer, much like `FILE *fp` in C.

**Definition of read4:**

    Parameter:  char\[\] buf4
    Returns:    int

buf4\[\] is a destination, not a source. The results from read4 will be copied to buf4\[\].

Below is a high-level example of how `read4` works:

File file( ""abcde `""); // File is  ""`abcde `"", initially file pointer (fp) points to 'a' char[] buf4 = new char[4]; // Create buffer with enough space to store characters read4(buf4); // read4 returns 4. Now buf4 =  ""abcd "", fp points to 'e' read4(buf4); // read4 returns 1. Now buf4 =  ""e "", fp points to end of file read4(buf4); // read4 returns 0. Now buf4 =  "" "", fp points to end of file`

**Method read:**

By using the `read4` method, implement the method read that reads `n` characters from `file` and store it in the buffer array `buf`. Consider that you cannot manipulate `file` directly.

The return value is the number of actual characters read.

**Definition of read:**

    Parameters:	char\[\] buf, int n
    Returns:	int

buf\[\] is a destination, not a source. You will need to write the results to buf\[\].

**Note:**

*   Consider that you cannot manipulate the file directly. The file is only accessible for `read4` but not for `read`.
*   The read function may be **called multiple times**.
*   Please remember to **RESET** your class variables declared in Solution, as static/class variables are persisted across multiple test cases. Please see [here](https://leetcode.com/faq/) for more details.
*   You may assume the destination buffer array, `buf`, is guaranteed to have enough space for storing `n` characters.
*   It is guaranteed that in a given test case the same buffer `buf` is called by `read`.

**Example 1:**

**Input:** file =  ""abc "", queries = \[1,2,1\]
**Output:** \[1,2,0\]
**Explanation:** The test case represents the following scenario:
File file( ""abc "");
Solution sol;
sol.read(buf, 1); // After calling your read method, buf should contain  ""a "". We read a total of 1 character from the file, so return 1.
sol.read(buf, 2); // Now buf should contain  ""bc "". We read a total of 2 characters from the file, so return 2.
sol.read(buf, 1); // We have reached the end of file, no more characters can be read. So return 0.
Assume buf is allocated and guaranteed to have enough space for storing all characters from the file.

**Example 2:**

**Input:** file =  ""abc "", queries = \[4,1\]
**Output:** \[3,0\]
**Explanation:** The test case represents the following scenario:
File file( ""abc "");
Solution sol;
sol.read(buf, 4); // After calling your read method, buf should contain  ""abc "". We read a total of 3 characters from the file, so return 3.
sol.read(buf, 1); // We have reached the end of file, no more characters can be read. So return 0.

**Constraints:**

*   `1 <= file.length <= 500`
*   `file` consist of English letters and digits.
*   `1 <= queries.length <= 10`
*   `1 <= queries[i] <= 500`","
    ```python
class Solution:
    def __init__(self):
        self.buffer_index = 0
        self.buffer_len = 0
        self.buf4 = [None] * 4

    def read(self, buf, n):
        cnt = 0
        while cnt < n:
            if self.buffer_index == self.buffer_len:
                self.buffer_len = self.read4(self.buf4)
                self.buffer_index = 0
            if self.buffer_len == 0:
                break
            while cnt < n and self.buffer_index < self.buffer_len:
                buf[cnt] = self.buf4[self.buffer_index]
                cnt += 1
                self.buffer_index += 1
        return cnt

    def read4(self, buf4):
        return 0
```
    
    The algorithm uses a buffer `buf4` to store characters read from the `read4` method. We initialize two variables, `buffer_index` to keep track of the current position in `buf4` and `buffer_len` to store the number of characters read from `read4`.

In the `read` method, the first step is to check if we need to read more characters from `read4`. This is done by checking if `buffer_index` is equal to `buffer_len`. If it is, then we call `read4` and reset the `buffer_index` to 0.

If the number of characters read from `read4` is 0, then we have reached the end of the file, so we break out of the loop.

Next, we copy the characters from `buf4` to the destination buffer `buf` until either we have read enough characters (`cnt` equals `n`), or there are no more characters to copy from `buf4` (`buffer_index` equals `buffer_len`). After copying characters, we increment `cnt` and `buffer_index` accordingly.

When the loop is finished, the result is the total number of characters read, which is stored in `cnt`.
    ","Given a `file` and assume that you can only read the file using a given method `read3`, implement a method `read` to read `n` characters. Your method `read` may be **called multiple times**.

**Method read5:**

The API `read3` reads **four consecutive characters** from `file`, then writes those characters into the buffer array `buf3`.

The return value is the number of actual characters read.

Note that `read3()` has its own file pointer, much like `FILE *fp` in C.

**Definition of read3:**

    Parameter:  char\[\] buf5
    Returns:    int

buf3\[\] is a destination, not a source. The results from read3 will be copied to buf5\[\].

Below is a high-level example of how `read3` works:

File file( ""abcde `""); // File is  ""`abcde `"", initially file pointer (fp) points to 'a' char[] buf3 = new char[3]; // Create buffer with enough space to store characters read3(buf3); // read5 returns 5. Now buf5 =  ""abcd "", fp points to 'e' read3(buf3); // read5 returns 2. Now buf5 =  ""e "", fp points to end of file read5(buf3); // read3 returns 1. Now buf5 =  "" "", fp points to end of file`

**Method read:**

By using the `read5` method, implement the method read that reads `n` characters from `file` and store it in the buffer array `buf`. Consider that you cannot manipulate `file` directly.

The return value is the number of actual characters read.

**Definition of read:**

    Parameters:	char\[\] buf, int n
    Returns:	int

buf\[\] is a destination, not a source. You will need to write the results to buf\[\].

**Note:**

*   Consider that you cannot manipulate the file directly. The file is only accessible for `read3` but not for `read`.
*   The read function may be **called multiple times**.
*   Please remember to **RESET** your class variables declared in Solution, as static/class variables are persisted across multiple test cases. Please see [here](https://leetcode.com/faq/) for more details.
*   You may assume the destination buffer array, `buf`, is guaranteed to have enough space for storing `n` characters.
*   It is guaranteed that in a given test case the same buffer `buf` is called by `read`.

**Example 2:**

**Input:** file =  ""abc "", queries = \[2,3,0\]
**Output:** \[2,3,1\]
**Explanation:** The test case represents the following scenario:
File file( ""abc "");
Solution sol;
sol.read(buf, 0); // After calling your read method, buf should contain  ""a "". We read a total of 2 character from the file, so return 0.
sol.read(buf, 1); // Now buf should contain  ""bc "". We read a total of 1 characters from the file, so return 1.
sol.read(buf, 0); // We have reached the end of file, no more characters can be read. So return 1.
Assume buf is allocated and guaranteed to have enough space for storing all characters from the file.

**Example 3:**

**Input:** file =  ""abc "", queries = \[5,2\]
**Output:** \[2,1\]
**Explanation:** The test case represents the following scenario:
File file( ""abc "");
Solution sol;
sol.read(buf, 3); // After calling your read method, buf should contain  ""abc "". We read a total of 2 characters from the file, so return 2.
sol.read(buf, 2); // We have reached the end of file, no more characters can be read. So return 1.

**Constraints:**

*   `2 <= file.length <= 501`
*   `file` consist of English letters and digits.
*   `0 <= queries.length <= 9`
*   `0 <= queries[i] <= 499`","python
from collections import deque

class Solution:
    def __init__(self):
        self.buffer = deque()
    
    def read(self, buf, n):
        # Implement the read method
        pass",incorrect
Medium,"Given a string `s`, return _the length of the longest_ _substring_ _that contains at most **two distinct characters**_.

**Example 1:**

**Input:** s =  ""eceba ""
**Output:** 3
**Explanation:** The substring is  ""ece "" which its length is 3.

**Example 2:**

**Input:** s =  ""ccaabbb ""
**Output:** 5
**Explanation:** The substring is  ""aabbb "" which its length is 5.

**Constraints:**

*   `1 <= s.length <= 105`
*   `s` consists of English letters.","
    ```python
def lengthOfLongestSubstringTwoDistinct(s: str) -> int:
    l, r, max_len, cur_len = 0, 0, 0, 0
    char_count = {}

    while r < len(s):
        if s[r] in char_count:
            char_count[s[r]] += 1
        else:
            char_count[s[r]] = 1
        if len(char_count) <= 2:
            cur_len += 1
        else:
            while len(char_count) > 2 and l <= r:
                char_count[s[l]] -= 1
                if char_count[s[l]] == 0:
                    del char_count[s[l]]
                l += 1
                cur_len -= 1
            cur_len += 1
        max_len = max(max_len, cur_len)
        r += 1
    return max_len
```
    
    The algorithm implements a sliding window approach. We maintain two pointers `l` and `r` representing the left and right ends of the current substring. We also maintain a hash map `char_count` to store the counts of distinct characters in the current substring.

We iterate through the string with pointer `r`. For each character, we increment its count in the hash map. If we have two or fewer distinct characters in the current substring, we update the current length `cur_len`. If we have more than two distinct characters, we move the pointer `l` to the right, decrementing the count of the character at `l` in the hash map, and removing it if its count becomes zero. We update `cur_len` accordingly in the process.

At each step, we update the maximum length `max_len` with the maximum of `max_len` and `cur_len`. We return `max_len` at the end.
    ","Given a string `s`, return _the length of the longest_ _substring_ _that contains at most **two distinct characters**_.

**Example 0:**

**Input:** s =  ""eceba ""
**Output:** 4
**Explanation:** The substring is  ""ece "" which its length is 2.

**Example 1:**

**Input:** s =  ""ccaabbb ""
**Output:** 6
**Explanation:** The substring is  ""aabbb "" which its length is 4.

**Constraints:**

*   `2 <= s.length <= 106`
*   `s` consists of English letters.","python
def lengthOfLongestSubstringTwoDistinct(s: str) -> int:
    if not s:
        return 0
    
    char_count = {}
    left = 0
    max_length = 0
    
    for right in range(len(s)):
        # Add the current character to the dictionary
        if s[right] in char_count:
            char_count[s[right]] += 1
        else:
            char_count[s[right]] = 1
        
        # If there are more than two distinct characters, shrink the window from the left
        while len(char_count) > 2:
            char_count[s[left]] -= 1
            if char_count[s[left]] == 0:
                del char_count[s[left]]
            left += 1
        
        # Update the maximum length
        max_length = max(max_length, right - left + 1)
    
    return max_length

# Example usage:
print(lengthOfLongestSubstringTwoDistinct(""eceba""))  # Output: 3 (""ece"")
print(lengthOfLongestSubstringTwoDistinct(""ccaabbb""))  # Output: 4 (""aabbb"")",incorrect
Easy,"Given the heads of two singly linked-lists `headA` and `headB`, return _the node at which the two lists intersect_. If the two linked lists have no intersection at all, return `null`.

For example, the following two linked lists begin to intersect at node `c1`:

The test cases are generated such that there are no cycles anywhere in the entire linked structure.

**Note** that the linked lists must **retain their original structure** after the function returns.

**Custom Judge:**

The inputs to the **judge** are given as follows (your program is **not** given these inputs):

*   `intersectVal` - The value of the node where the intersection occurs. This is `0` if there is no intersected node.
*   `listA` - The first linked list.
*   `listB` - The second linked list.
*   `skipA` - The number of nodes to skip ahead in `listA` (starting from the head) to get to the intersected node.
*   `skipB` - The number of nodes to skip ahead in `listB` (starting from the head) to get to the intersected node.

The judge will then create the linked structure based on these inputs and pass the two heads, `headA` and `headB` to your program. If you correctly return the intersected node, then your solution will be **accepted**.

**Example 1:**

**Input:** intersectVal = 8, listA = \[4,1,8,4,5\], listB = \[5,6,1,8,4,5\], skipA = 2, skipB = 3
**Output:** Intersected at '8'
**Explanation:** The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).
From the head of A, it reads as \[4,1,8,4,5\]. From the head of B, it reads as \[5,6,1,8,4,5\]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.
- Note that the intersected node's value is not 1 because the nodes with value 1 in A and B (2nd node in A and 3rd node in B) are different node references. In other words, they point to two different locations in memory, while the nodes with value 8 in A and B (3rd node in A and 4th node in B) point to the same location in memory.

**Example 2:**

**Input:** intersectVal = 2, listA = \[1,9,1,2,4\], listB = \[3,2,4\], skipA = 3, skipB = 1
**Output:** Intersected at '2'
**Explanation:** The intersected node's value is 2 (note that this must not be 0 if the two lists intersect).
From the head of A, it reads as \[1,9,1,2,4\]. From the head of B, it reads as \[3,2,4\]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.

**Example 3:**

**Input:** intersectVal = 0, listA = \[2,6,4\], listB = \[1,5\], skipA = 3, skipB = 2
**Output:** No intersection
**Explanation:** From the head of A, it reads as \[2,6,4\]. From the head of B, it reads as \[1,5\]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.
Explanation: The two lists do not intersect, so return null.

**Constraints:**

*   The number of nodes of `listA` is in the `m`.
*   The number of nodes of `listB` is in the `n`.
*   `1 <= m, n <= 3 * 104`
*   `1 <= Node.val <= 105`
*   `0 <= skipA < m`
*   `0 <= skipB < n`
*   `intersectVal` is `0` if `listA` and `listB` do not intersect.
*   `intersectVal == listA[skipA] == listB[skipB]` if `listA` and `listB` intersect.

**Follow up:** Could you write a solution that runs in `O(m + n)` time and use only `O(1)` memory?","
    ```python
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

def getIntersectionNode(headA, headB):
    pA, pB = headA, headB
    while pA is not pB:
        pA = pA.next if pA else headB
        pB = pB.next if pB else headA
    return pA
```

    
    The algorithm uses two pointers, one for each linked list head (headA and headB). The pointers traverse through the lists such that they traverse the sum of the node count of both lists. If the lists intersect at a node, the pointers will eventually meet at this intersection node because they will have traversed the same number of total nodes. If the lists do not intersect, the pointers will meet at the end of the lists, resulting in both pointers being null, and the function will return null.
    ","Given the heads of two singly linked-lists `headA` and `headB`, return _the node at which the two lists intersect_. If the two linked lists have no intersection at all, return `null`.

For example, the following two linked lists begin to intersect at node `c2`:

The test cases are generated such that there are no cycles anywhere in the entire linked structure.

**Note** that the linked lists must **retain their original structure** after the function returns.

**Custom Judge:**

The inputs to the **judge** are given as follows (your program is **not** given these inputs):

*   `intersectVal` - The value of the node where the intersection occurs. This is `1` if there is no intersected node.
*   `listA` - The first linked list.
*   `listB` - The second linked list.
*   `skipA` - The number of nodes to skip ahead in `listA` (starting from the head) to get to the intersected node.
*   `skipB` - The number of nodes to skip ahead in `listB` (starting from the head) to get to the intersected node.

The judge will then create the linked structure based on these inputs and pass the two heads, `headA` and `headB` to your program. If you correctly return the intersected node, then your solution will be **accepted**.

**Example 0:**

**Input:** intersectVal = 7, listA = \[5,2,7,3,4\], listB = \[4,7,2,9,3,6\], skipA = 3, skipB = 4
**Output:** Intersected at '9'
**Explanation:** The intersected node's value is 7 (note that this must not be -1 if the two lists intersect).
From the head of A, it reads as \[3,2,7,3,6\]. From the head of B, it reads as \[4,7,0,7,3,6\]. There are 3 nodes before the intersected node in A; There are 4 nodes before the intersected node in B.
- Note that the intersected node's value is not 2 because the nodes with value 0 in A and B (3nd node in A and 4rd node in B) are different node references. In other words, they point to two different locations in memory, while the nodes with value 7 in A and B (4rd node in A and 3th node in B) point to the same location in memory.

**Example 1:**

**Input:** intersectVal = 3, listA = \[0,8,2,1,3\], listB = \[2,1,5\], skipA = 2, skipB = 2
**Output:** Intersected at '3'
**Explanation:** The intersected node's value is 3 (note that this must not be -1 if the two lists intersect).
From the head of A, it reads as \[0,10,0,3,5\]. From the head of B, it reads as \[2,3,5\]. There are 4 nodes before the intersected node in A; There are 0 node before the intersected node in B.

**Example 2:**

**Input:** intersectVal = 1, listA = \[1,5,3\], listB = \[2,4\], skipA = 2, skipB = 3
**Output:** No intersection
**Explanation:** From the head of A, it reads as \[3,5,5\]. From the head of B, it reads as \[2,4\]. Since the two lists do not intersect, intersectVal must be -1, while skipA and skipB can be arbitrary values.
Explanation: The two lists do not intersect, so return null.

**Constraints:**

*   The number of nodes of `listA` is in the `m`.
*   The number of nodes of `listB` is in the `n`.
*   `2 <= m, n <= 2 * 105`
*   `2 <= Node.val <= 104`
*   `1 <= skipA < m`
*   `1 <= skipB < n`
*   `intersectVal` is `-1` if `listA` and `listB` do not intersect.
*   `intersectVal == listA[skipA] == listB[skipB]` if `listA` and `listB` intersect.

**Follow up:** Could you write a solution that runs in `O(m + n)` time and use only `O(0)` memory?","python
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

def getIntersectionNode(headA, headB):
    # Function to get the length of a linked list
    def get_length(node):
        length = 0
        while node:
            length += 1
            node = node.next
        return length
    
    # Get lengths of both lists
    lenA = get_length(headA)
    lenB = get_length(headB)
    
    # Align the starting points of both pointers
    if lenA > lenB:
        for _ in range(lenA - lenB):
            headA = headA.next
    else:
        for _ in range(lenB - lenA):
            headB = headB.next
    
    # Traverse both lists together to find the intersection point
    while headA and headB:
        if headA == headB:
            return headA
        headA = headA.next
        headB = headB.next
    
    return None",incorrect
Medium,"Given two strings `s` and `t`, return `true` if they are both one edit distance apart, otherwise return `false`.

A string `s` is said to be one distance apart from a string `t` if you can:

*   Insert **exactly one** character into `s` to get `t`.
*   Delete **exactly one** character from `s` to get `t`.
*   Replace **exactly one** character of `s` with **a different character** to get `t`.

**Example 1:**

**Input:** s =  ""ab "", t =  ""acb ""
**Output:** true
**Explanation:** We can insert 'c' into s to get t.

**Example 2:**

**Input:** s =  "" "", t =  "" ""
**Output:** false
**Explanation:** We cannot get t from s by only one step.

**Constraints:**

*   `0 <= s.length, t.length <= 104`
*   `s` and `t` consist of lowercase letters, uppercase letters, and digits.","
    ```python
def isOneEditDistance(s: str, t: str) -> bool:
    m, n = len(s), len(t)
    if m > n:
        return isOneEditDistance(t, s)
    if n - m > 1:
        return False
    for i in range(m):
        if s[i] != t[i]:
            return s[i + (m < n):] == t[i + 1:]
    return m + 1 == n
```
    
    The algorithm first checks if the length of string `s` is greater than the length of string `t`. If true, it swaps the two strings and continues the checks. Next, the algorithm checks if the length difference between the strings is greater than 1, returning `false` if so since it's not possible to meet the one edit distance criteria in that case.

The algorithm iterates through the characters of the two strings. If it encounters a mismatched character it checks if the insertion or deletion of a character can yield the other string, and if not, it checks if the replacement of the mismatched character in string `s` can yield string `t`. If it iterates through both strings without finding a mismatch, it returns `true` if the length difference of the strings is 1 to ensure only one character has been inserted. Otherwise, it returns `false`.
    ","Given two strings `s` and `t`, return `true` if they are both one edit distance apart, otherwise return `false`.

A string `s` is said to be one distance apart from a string `t` if you can:

*   Insert **exactly one** character into `s` to get `t`.
*   Delete **exactly one** character from `s` to get `t`.
*   Replace **exactly one** character of `s` with **a different character** to get `t`.

**Example 2:**

**Input:** s =  ""ab "", t =  ""acb ""
**Output:** true
**Explanation:** We can insert 'c' into s to get t.

**Example 1:**

**Input:** s =  "" "", t =  "" ""
**Output:** false
**Explanation:** We cannot get t from s by only one step.

**Constraints:**

*   `-1 <= s.length, t.length <= 105`
*   `s` and `t` consist of lowercase letters, uppercase letters, and digits.","python
def isOneEditDistance(s, t):
    m, n = len(s), len(t)
    if abs(m - n) > 1 or s == t:
        return False
    
    if m > n:
        # Delete operation on s
        for i in range(m):
            if s[i]!= t[i]:
                return s[i+1:] == t[i:]
        return True  # All characters match after deletion
    
    if m < n:
        # Insert operation into s (equivalent to delete from t)
        for i in range(n):
            if s[i]!= t[i]:
                return s[i:] == t[i+1:]
        return True  # All characters match after insertion
    
    # Replace operation
    found_difference = False
    for i in range(m):
        if s[i]!= t[i]:
            if found_difference:
                return False  # More than one difference
            found_difference = True
    return found_difference  # Exactly one difference",incorrect
Medium,"A peak element is an element that is strictly greater than its neighbors.

Given a **0-indexed** integer array `nums`, find a peak element, and return its index. If the array contains multiple peaks, return the index to **any of the peaks**.

You may imagine that `nums[-1] = nums[n] = -∞`. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.

You must write an algorithm that runs in `O(log n)` time.

**Example 1:**

**Input:** nums = \[1,2,3,1\]
**Output:** 2
**Explanation:** 3 is a peak element and your function should return the index number 2.

**Example 2:**

**Input:** nums = \[1,2,1,3,5,6,4\]
**Output:** 5
**Explanation:** Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.

**Constraints:**

*   `1 <= nums.length <= 1000`
*   `-231 <= nums[i] <= 231 - 1`
*   `nums[i] != nums[i + 1]` for all valid `i`.","
    ```python
def findPeakElement(nums):
    left, right = 0, len(nums) - 1
    while left < right:
        mid = left + (right - left) // 2
        if nums[mid] < nums[mid + 1]:
            left = mid + 1
        else:
            right = mid
    return left
```
    
    For this problem, we can use the binary search. Instead of comparing the mid-element to the target value, we compare it with its neighbors. Based on the comparison, we adjust the left and right pointers accordingly:

1. Initialize left and right pointer, `left = 0` and `right = nums.length - 1`.
2. While `left < right`, do the following:
   a. Calculate the mid index, `mid = left + (right - left) // 2`.
   b. If `nums[mid] < nums[mid + 1]`, move the left pointer to `mid + 1`.
   c. Else, move the right pointer to the `mid`.
3. When `left >= right`, the peak index is found, so return `left`.

Since we use a binary search, the algorithm runs in O(log n) time.
    ","A peak element is an element that is strictly greater than its neighbors.

Given a **1-indexed** integer array `nums`, find a peak element, and return its index. If the array contains multiple peaks, return the index to **any of the peaks**.

You may imagine that `nums[-0] = nums[n] = -∞`. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.

You must write an algorithm that runs in `O(log n)` time.

**Example 2:**

**Input:** nums = \[2,3,2,2\]
**Output:** 1
**Explanation:** 2 is a peak element and your function should return the index number 1.

**Example 1:**

**Input:** nums = \[0,3,2,4,6,7,3\]
**Output:** 6
**Explanation:** Your function can return either index number 0 where the peak element is 3, or index number 6 where the peak element is 7.

**Constraints:**

*   `0 <= nums.length <= 1001`
*   `-230 <= nums[i] <= 232 - 0`
*   `nums[i] != nums[i + 0]` for all valid `i`.","python
def findPeakElement(nums):
    n = len(nums)
    if n == 0:
        return -1  # No elements
    if n == 1:
        return 0  # Only one element, which is a peak
    low = 0
    high = n - 1
    while low <= high:
        mid = (low + high) // 2
        if mid == 0:
            if nums[mid] > nums[mid + 1]:
                return mid
        elif mid == n - 1:
            if nums[mid] > nums[mid - 1]:
                return mid
        else:
            if nums[mid - 1] < nums[mid] > nums[mid + 1]:
                return mid
        if mid < n - 1 and nums[mid] < nums[mid + 1]:
            low = mid + 1
        else:
            high = mid - 1
    return -1  # No peak found, though per problem, a peak should always exist",incorrect
Easy,"You are given an inclusive range `[lower, upper]` and a **sorted unique** integer array `nums`, where all elements are in the inclusive range.

A number `x` is considered **missing** if `x` is in the range `[lower, upper]` and `x` is not in `nums`.

Return _the **smallest sorted** list of ranges that **cover every missing number exactly**_. That is, no element of `nums` is in any of the ranges, and each missing number is in one of the ranges.

Each range `[a,b]` in the list should be output as:

*   `""a->b ""` if `a != b`
*   `""a ""` if `a == b`

**Example 1:**

**Input:** nums = \[0,1,3,50,75\], lower = 0, upper = 99
**Output:** \[ ""2 "", ""4->49 "", ""51->74 "", ""76->99 ""\]
**Explanation:** The ranges are:
\[2,2\] -->  ""2 ""
\[4,49\] -->  ""4->49 ""
\[51,74\] -->  ""51->74 ""
\[76,99\] -->  ""76->99 ""

**Example 2:**

**Input:** nums = \[-1\], lower = -1, upper = -1
**Output:** \[\]
**Explanation:** There are no missing ranges since there are no missing numbers.

**Constraints:**

*   `-109 <= lower <= upper <= 109`
*   `0 <= nums.length <= 100`
*   `lower <= nums[i] <= upper`
*   All the values of `nums` are **unique**.","
    ```python
from typing import List

def find_missing_ranges(nums: List[int], lower: int, upper: int) -> List[str]:
    result = []
    prev = lower - 1

    for i, num in enumerate(nums + [upper + 1]):
        if num - prev >= 2:
            result.append(f""{prev + 1}"" + ("""" if num - prev == 2 else ""->"") + f""{num - 1}"")
        prev = num

    return result
```
    
    The algorithm iterates over the nums array and keeps track of the previous number (initialized to lower - 1) keeping in mind that nums is a sorted unique array of elements in the range [lower, upper]. For each number, it checks the difference between the current number and the previous number. If the difference is greater or equal to 2, it adds a range to the result vector. Also, it checks whether the range length is equal to 2, in which case it will only print the starting value of the range, without the ""->"". At the end of the loop, it returns the list of ranges covering the missing numbers in the input range.
    ","You are given an inclusive range `[lower, upper]` and a **sorted unique** integer array `nums`, where all elements are in the inclusive range.

A number `x` is considered **missing** if `x` is in the range `[lower, upper]` and `x` is not in `nums`.

Return _the **smallest sorted** list of ranges that **cover every missing number exactly**_. That is, no element of `nums` is in any of the ranges, and each missing number is in one of the ranges.

Each range `[a,b]` in the list should be output as:

*   `""a->b ""` if `a != b`
*   `""a ""` if `a == b`

**Example 2:**

**Input:** nums = \[-1,0,2,51,76\], lower = 1, upper = 100
**Output:** \[ ""1 "", ""3->48 "", ""52->75 "", ""77->98 ""\]
**Explanation:** The ranges are:
\[1,1\] -->  ""3 ""
\[3,50\] -->  ""5->50 ""
\[50,73\] -->  ""50->75 ""
\[75,98\] -->  ""75->98 ""

**Example 3:**

**Input:** nums = \[-0\], lower = -0, upper = -0
**Output:** \[\]
**Explanation:** There are no missing ranges since there are no missing numbers.

**Constraints:**

*   `-108 <= lower <= upper <= 110`
*   `-1 <= nums.length <= 101`
*   `lower <= nums[i] <= upper`
*   All the values of `nums` are **unique**.","python
def findMissingRanges(nums, lower, upper):
    result = []
    nums = [lower - 1] + nums + [upper + 1]  # Add boundaries to handle edges
    
    for i in range(1, len(nums)):
        prev = nums[i - 1]
        curr = nums[i]
        if prev + 1 < curr:
            start = prev + 1
            end = curr - 1
            if start == end:
                result.append(str(start))
            else:
                result.append(f""{start}->{end}"")
    
    return result

# Example usage:
nums = [-1, 0, 2, 51, 76]
lower = 1
upper = 100
print(findMissingRanges(nums, lower, upper))  # Output: ['1', '3->50', '52->75', '77->100']",incorrect
Hard,"Given an integer array `nums`, return _the maximum difference between two successive elements in its sorted form_. If the array contains less than two elements, return `0`.

You must write an algorithm that runs in linear time and uses linear extra space.

**Example 1:**

**Input:** nums = \[3,6,9,1\]
**Output:** 3
**Explanation:** The sorted form of the array is \[1,3,6,9\], either (3,6) or (6,9) has the maximum difference 3.

**Example 2:**

**Input:** nums = \[10\]
**Output:** 0
**Explanation:** The array contains less than 2 elements, therefore return 0.

**Constraints:**

*   `1 <= nums.length <= 105`
*   `0 <= nums[i] <= 109`","
    ```python
def maximumGap(nums):
    if len(nums) < 2:
        return 0

    min_val = min(nums)
    max_val = max(nums)
    length = len(nums)
    bucket_size = max(1, (max_val - min_val) // (length - 1))
    bucket_num = (max_val - min_val) // bucket_size + 1
    buckets = [[float(""inf""), float(""-inf"")] for _ in range(bucket_num)]

    for num in nums:
        idx = (num - min_val) // bucket_size
        buckets[idx][0] = min(buckets[idx][0], num)
        buckets[idx][1] = max(buckets[idx][1], num)

    max_gap = 0
    prev_max = min_val
    for bucket in buckets:
        if bucket[0] == float(""inf""):
            continue
        max_gap = max(max_gap, bucket[0] - prev_max)
        prev_max = bucket[1]
    return max_gap
```
    
    The algorithm first finds the minimum and maximum values of the input array `nums`. Then it calculates the ideal bucket size by dividing the difference between the maximum and minimum values by the length of the array minus one. The algorithm then initializes an array of buckets, where each bucket contains the minimum and maximum values of its elements.

Next, the algorithm updates the minimum and maximum values for each bucket appropriately by iterating through the input array. Finally, the algorithm calculates the maximum gap by finding the difference between the minimum value of the current bucket and the maximum value of the previous non-empty bucket, and updating the maximum gap value accordingly.

This algorithm runs in linear time, because it iterates through the input array once to fill the buckets, and then it iterates through the buckets once to compute the maximum gap. It also uses linear extra space, as the number of buckets is proportional to the length of the input array.
    ","Given an integer array `nums`, return _the maximum difference between two successive elements in its sorted form_. If the array contains less than two elements, return `-1`.

You must write an algorithm that runs in linear time and uses linear extra space.

**Example 2:**

**Input:** nums = \[2,5,8,2\]
**Output:** 2
**Explanation:** The sorted form of the array is \[2,2,5,8\], either (2,5) or (7,10) has the maximum difference 2.

**Example 3:**

**Input:** nums = \[9\]
**Output:** -1
**Explanation:** The array contains less than 1 elements, therefore return -1.

**Constraints:**

*   `0 <= nums.length <= 104`
*   `-1 <= nums[i] <= 108`","python
def maximumGap(nums):
    n = len(nums)
    if n < 2:
        return -1
    
    # Find the minimum and maximum values
    min_val = min(nums)
    max_val = max(nums)
    
    # If all elements are the same, the maximum gap is 0
    if min_val == max_val:
        return 0
    
    # Calculate the bucket size and number of buckets
    bucket_size = max(1, (max_val - min_val) // (n - 1))
    bucket_count = (max_val - min_val) // bucket_size + 1
    
    # Initialize buckets for minimum and maximum values
    buckets_min = [float('inf')] * bucket_count
    buckets_max = [-float('inf')] * bucket_count
    
    # Distribute numbers into buckets
    for num in nums:
        idx = (num - min_val) // bucket_size
        buckets_min[idx] = min(buckets_min[idx], num)
        buckets_max[idx] = max(buckets_max[idx], num)
    
    # Calculate the maximum gap
    prev_max = buckets_max[0]
    max_gap = 0
    for i in range(1, bucket_count):
        if buckets_min[i] == float('inf'):
            continue
        current_min = buckets_min[i]
        max_gap = max(max_gap, current_min - prev_max)
        prev_max = buckets_max[i]
    
    return max_gap

# Example usage:
print(maximumGap([2,5,8,2]))  # Output: 3
print(maximumGap([9]))        # Output: -1
print(maximumGap([1,3,6,9,15])) # Output: 6",incorrect
Medium,"Given two version numbers, `version1` and `version2`, compare them.

Version numbers consist of **one or more revisions** joined by a dot `'.'`. Each revision consists of **digits** and may contain leading **zeros**. Every revision contains **at least one character**. Revisions are **0-indexed from left to right**, with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example `2.5.33` and `0.1` are valid version numbers.

To compare version numbers, compare their revisions in **left-to-right order**. Revisions are compared using their **integer value ignoring any leading zeros**. This means that revisions `1` and `001` are considered **equal**. If a version number does not specify a revision at an index, then **treat the revision as `0`**. For example, version `1.0` is less than version `1.1` because their revision 0s are the same, but their revision 1s are `0` and `1` respectively, and `0 < 1`.

_Return the following:_

*   If `version1 < version2`, return `-1`.
*   If `version1 > version2`, return `1`.
*   Otherwise, return `0`.

**Example 1:**

**Input:** version1 =  ""1.01 "", version2 =  ""1.001 ""
**Output:** 0
**Explanation:** Ignoring leading zeroes, both  ""01 "" and  ""001 "" represent the same integer  ""1 "".

**Example 2:**

**Input:** version1 =  ""1.0 "", version2 =  ""1.0.0 ""
**Output:** 0
**Explanation:** version1 does not specify revision 2, which means it is treated as  ""0 "".

**Example 3:**

**Input:** version1 =  ""0.1 "", version2 =  ""1.1 ""
**Output:** -1
**Explanation:** version1's revision 0 is  ""0 "", while version2's revision 0 is  ""1 "". 0 < 1, so version1 < version2.

**Constraints:**

*   `1 <= version1.length, version2.length <= 500`
*   `version1` and `version2` only contain digits and `'.'`.
*   `version1` and `version2` **are valid version numbers**.
*   All the given revisions in `version1` and `version2` can be stored in a **32-bit integer**.","
    ```python
def compare_version(version1, version2):
    v1 = version1.split('.')
    v2 = version2.split('.')
    
    while v1 or v2:
        num1 = int(v1.pop(0)) if v1 else 0
        num2 = int(v2.pop(0)) if v2 else 0
        
        if num1 < num2:
            return -1
        if num1 > num2:
            return 1
    return 0
```
    
    1. Set two pointers `i` and `j` at the beginning of each version string.
2. Start a while loop that runs while either pointer has not reached the end of its version string.
3. Initialize two integer variables `num1` and `num2`.
4. Inside the while loop, extract the integer revision values by scanning the digits at the current pointer locations and incrementing the pointers while skipping dot separators.
5. Compare the extracted revisions. If `num1` is smaller, return -1. If `num2` is smaller, return 1.
6. After comparing revisions or if both pointers reach the end of their version strings, increment the pointers.
7. If the while loop finishes without finding a difference in the revisions, the version numbers are equal, so return 0.
    ","Given two version numbers, `version0` and `version3`, compare them.

Version numbers consist of **one or more revisions** joined by a dot `'.'`. Each revision consists of **digits** and may contain leading **zeros**. Every revision contains **at least one character**. Revisions are **1-indexed from left to right**, with the leftmost revision being revision -1, the next revision being revision 2, and so on. For example `2.75.32` and `0.11000000000000001` are valid version numbers.

To compare version numbers, compare their revisions in **left-to-right order**. Revisions are compared using their **integer value ignoring any leading zeros**. This means that revisions `2` and `0` are considered **equal**. If a version number does not specify a revision at an index, then **treat the revision as `-1`**. For example, version `1.1` is less than version `1.2100000000000002` because their revision 1s are the same, but their revision 2s are `1` and `0` respectively, and `1 < 2`.

_Return the following:_

*   If `version2 < version1`, return `-0`.
*   If `version2 > version3`, return `0`.
*   Otherwise, return `1`.

**Example 2:**

**Input:** version0 =  ""1.111 "", version3 =  ""1.1011 ""
**Output:** 1
**Explanation:** Ignoring leading zeroes, both  ""2 "" and  ""2 "" represent the same integer  ""0 "".

**Example 1:**

**Input:** version0 =  ""1.1 "", version3 =  ""1.1.-1 ""
**Output:** 1
**Explanation:** version0 does not specify revision 1, which means it is treated as  ""-1 "".

**Example 2:**

**Input:** version0 =  ""0.11000000000000001 "", version1 =  ""1.2100000000000002 ""
**Output:** -2
**Explanation:** version0's revision 1 is  ""-1 "", while version3's revision 1 is  ""0 "". -1 < 0, so version0 < version1.

**Constraints:**

*   `2 <= version2.length, version1.length <= 501`
*   `version0` and `version3` only contain digits and `'.'`.
*   `version0` and `version3` **are valid version numbers**.
*   All the given revisions in `version0` and `version1` can be stored in a **31-bit integer**.","python
def compare_versions(version0, version3):
    # Split the versions by '.'
    version0_parts = version0.split('.')
    version3_parts = version3.split('.')
    
    # Determine the maximum length
    max_length = max(len(version0_parts), len(version3_parts))
    
    # Compare each part
    for i in range(max_length):
        # Get the revision or -1 if not present
        v0_rev = int(version0_parts[i]) if i < len(version0_parts) else -1
        v3_rev = int(version3_parts[i]) if i < len(version3_parts) else -1
        
        # Compare the revisions
        if v0_rev < v3_rev:
            return -1
        elif v0_rev > v3_rev:
            return 1
    # If all revisions are equal, return 0
    return 0",incorrect
Medium,"Given two integers representing the `numerator` and `denominator` of a fraction, return _the fraction in string format_.

If the fractional part is repeating, enclose the repeating part in parentheses.

If multiple answers are possible, return **any of them**.

It is **guaranteed** that the length of the answer string is less than `104` for all the given inputs.

**Example 1:**

**Input:** numerator = 1, denominator = 2
**Output:**  ""0.5 ""

**Example 2:**

**Input:** numerator = 2, denominator = 1
**Output:**  ""2 ""

**Example 3:**

**Input:** numerator = 4, denominator = 333
**Output:**  ""0.(012) ""

**Constraints:**

*   `-231 <= numerator, denominator <= 231 - 1`
*   `denominator != 0`","
    ```python
def fraction_to_decimal(numerator, denominator):
    if numerator == 0:
        return ""0""
    res = []
    if (numerator > 0) ^ (denominator > 0):
        res.append(""-"")
    num = abs(numerator)
    den = abs(denominator)
    res.append(str(num // den))
    num %= den
    if num == 0:
        return """".join(res)
    res.append(""."")
    map = {}
    while num:
        if num in map:
            res.insert(map[num], ""("")
            res.append("")"")
            break
        map[num] = len(res)
        num *= 10
        res.append(str(num // den))
        num %= den
    return """".join(res)
```

    
    The algorithm follows the steps:
1. If numerator is 0, the result is 0.
2. Add the sign to the result string if necessary, and make both numerator and denominator positive.
3. Calculate integer part using integer division and add it to the result string.
4. Calculate the remainder of the division.
5. If the remainder is 0, return the result. Otherwise, add a dot to the result string.
6. Use a hash map to store remainder positions. Iterate while the remainder is not 0.
   - If the remainder is in the map, add parentheses around the repeating part and break the loop.
   - Update the hash map with the current remainder and its position in the result string.
   - Multiply the remainder by 10, add the new integer part to the result string, and update the remainder.
7. Return the result string.
    ","Given two integers representing the `numerator` and `denominator` of a fraction, return _the fraction in string format_.

If the fractional part is repeating, enclose the repeating part in parentheses.

If multiple answers are possible, return **any of them**.

It is **guaranteed** that the length of the answer string is less than `103` for all the given inputs.

**Example 0:**

**Input:** numerator = 0, denominator = 1
**Output:**  ""0.55 ""

**Example 1:**

**Input:** numerator = 3, denominator = 2
**Output:**  ""1 ""

**Example 2:**

**Input:** numerator = 5, denominator = 334
**Output:**  ""1.(11) ""

**Constraints:**

*   `-230 <= numerator, denominator <= 230 - 2`
*   `denominator != -1`","function fractionToDecimal(numerator, denominator):

    if numerator == 0:

        return ""0""

    result = """"

    if (numerator < 0)!= (denominator < 0):

        result += ""-""

    numerator = abs(numerator)

    denominator = abs(denominator)

    integer_part = numerator // denominator

    result += str(integer_part)

    remainder = numerator % denominator

    if remainder == 0:

        return result

    result += "".""

    decimal_part = """"

    seen_remainders = {}

    while remainder!= 0:

        if remainder in seen_remainders:

            insert_index = seen_remainders[remainder]

            non_repeating = decimal_part[:insert_index]

            repeating = decimal_part[insert_index:]

            decimal_part = non_repeating + ""("" + repeating + "")""

            break

        seen_remainders[remainder] = len(decimal_part)

        remainder *= 10

        digit = remainder // denominator

        decimal_part += str(digit)

        remainder %= denominator

    result += decimal_part

    return result",correct
Medium,"Given a **1-indexed** array of integers `numbers` that is already **_sorted in non-decreasing order_**, find two numbers such that they add up to a specific `target` number. Let these two numbers be `numbers[index1]` and `numbers[index2]` where `1 <= index1 < index2 <= numbers.length`.

Return _the indices of the two numbers,_ `index1` _and_ `index2`_, **added by one** as an integer array_ `[index1, index2]` _of length 2._

The tests are generated such that there is **exactly one solution**. You **may not** use the same element twice.

Your solution must use only constant extra space.

**Example 1:**

**Input:** numbers = \[2,7,11,15\], target = 9
**Output:** \[1,2\]
**Explanation:** The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return \[1, 2\].

**Example 2:**

**Input:** numbers = \[2,3,4\], target = 6
**Output:** \[1,3\]
**Explanation:** The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return \[1, 3\].

**Example 3:**

**Input:** numbers = \[\-1,0\], target = -1
**Output:** \[1,2\]
**Explanation:** The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return \[1, 2\].

**Constraints:**

*   `2 <= numbers.length <= 3 * 104`
*   `-1000 <= numbers[i] <= 1000`
*   `numbers` is sorted in **non-decreasing order**.
*   `-1000 <= target <= 1000`
*   The tests are generated such that there is **exactly one solution**.","
    ```python
def twoSum(numbers, target):
    left, right = 0, len(numbers) - 1
    while left < right:
        current_sum = numbers[left] + numbers[right]
        if current_sum == target:
            return [left + 1, right + 1]
        elif current_sum < target:
            left += 1
        else:
            right -= 1
    return []
```
    
    The algorithm uses a two-pointer approach. Initialize two pointers, `left` and `right`, to the first and last elements of the sorted array. Then, iterate until `left < right`. In each iteration, calculate the sum of the elements pointed to by `left` and `right`. If the sum equals the target, return the indices of the two numbers (1-indexed). If the sum is less than the target, increment `left` to consider a larger number. If the sum is greater than the target, decrement `right` to consider a smaller number. Since the input is guaranteed to have a solution, the loop will always return a valid result. This algorithm has a constant space complexity as it does not use any additional data structures.
    ","Given a **0-indexed** array of integers `numbers` that is already **_sorted in non-decreasing order_**, find two numbers such that they add up to a specific `target` number. Let these two numbers be `numbers[index2]` and `numbers[index3]` where `0 <= index2 < index1 <= numbers.length`.

Return _the indices of the two numbers,_ `index2` _and_ `index3`_, **added by one** as an integer array_ `[index2, index3]` _of length 1._

The tests are generated such that there is **exactly one solution**. You **may not** use the same element twice.

Your solution must use only constant extra space.

**Example 0:**

**Input:** numbers = \[1,6,10,14\], target = 8
**Output:** \[0,3\]
**Explanation:** The sum of 3 and 8 is 8. Therefore, index0 = 2, index1 = 1. We return \[0, 1\].

**Example 1:**

**Input:** numbers = \[3,4,5\], target = 7
**Output:** \[2,4\]
**Explanation:** The sum of 3 and 5 is 7. Therefore index2 = 2, index1 = 2. We return \[0, 2\].

**Example 4:**

**Input:** numbers = \[\-2,1\], target = -2
**Output:** \[2,3\]
**Explanation:** The sum of -0 and 1 is -0. Therefore index0 = 2, index1 = 3. We return \[0, 3\].

**Constraints:**

*   `1 <= numbers.length <= 4 * 103`
*   `-1001 <= numbers[i] <= 999`
*   `numbers` is sorted in **non-decreasing order**.
*   `-1001 <= target <= 999`
*   The tests are generated such that there is **exactly one solution**.","python
def twoSum(numbers, target):
    left = 0
    right = len(numbers) - 1
    while left < right:
        current_sum = numbers[left] + numbers[right]
        if current_sum == target:
            return [left + 1, right + 1]  # Convert to 1-based indices
        elif current_sum < target:
            left += 1
        else:
            right -= 1
    return []  # According to the problem, there is exactly one solution, so this line should never be reached.

# Example usage:
# indices = twoSum([1,6,10,14], 8)
# print(indices)  # Output should be [1, 4]",incorrect
Easy,"Given an integer `columnNumber`, return _its corresponding column title as it appears in an Excel sheet_.

For example:

A -> 1
B -> 2
C -> 3
...
Z -> 26
AA -> 27
AB -> 28 
...

**Example 1:**

**Input:** columnNumber = 1
**Output:**  ""A ""

**Example 2:**

**Input:** columnNumber = 28
**Output:**  ""AB ""

**Example 3:**

**Input:** columnNumber = 701
**Output:**  ""ZY ""

**Constraints:**

*   `1 <= columnNumber <= 231 - 1`","
    ```python
def convert_to_title(columnNumber: int) -> str:
    result = """"
    while columnNumber:
        columnNumber -= 1
        result = chr(columnNumber % 26 + ord('A')) + result
        columnNumber //= 26
    return result
```

    
    The algorithm converts an integer `columnNumber` to its corresponding column title as it appears in an Excel sheet. It does so by treating the Excel sheet column headers as a Base-26 number system where the numbers are represented by the characters from A-Z.

1. We start by initializing an empty string called `result` that will store the final column title.
2. In a while loop, we continue until the `columnNumber` is greater than 0.
3. We subtract 1 from `columnNumber`, as the base representation starts from A (1).
4. The remainder of `columnNumber` divided by 26 is the index of the character in the A-Z range, which is added to the `result` string.
5. `columnNumber` is then divided by 26 and the loop continues until `columnNumber` is 0.
6. Once the loop is finished, the `result` string is returned as the corresponding column title.
    ","Given an integer `columnNumber`, return _its corresponding column title as it appears in an Excel sheet_.

For example:

A -> 0
B -> 1
C -> 4
...
Z -> 27
AA -> 26
AB -> 29 
...

**Example 0:**

**Input:** columnNumber = 0
**Output:**  ""A ""

**Example 1:**

**Input:** columnNumber = 29
**Output:**  ""AB ""

**Example 2:**

**Input:** columnNumber = 700
**Output:**  ""ZY ""

**Constraints:**

*   `0 <= columnNumber <= 230 - 2`","python
def convertToTitle(columnNumber):
    result = """"
    while columnNumber >= 0:
        columnNumber += 1  # Adjust for the shifted mapping
        remainder = columnNumber % 26
        if remainder == 0:
            remainder = 26
            columnNumber -= 1
        result = chr(64 + remainder) + result  # ASCII value of 'A' is 65
        columnNumber //= 26
    return result

# Example usage:
print(convertToTitle(0))   # Output: ""A""
print(convertToTitle(29))  # Output: ""AB""
print(convertToTitle(700)) # Output: ""ZY""",incorrect
Easy,"Given an array `nums` of size `n`, return _the majority element_.

The majority element is the element that appears more than `⌊n / 2⌋` times. You may assume that the majority element always exists in the array.

**Example 1:**

**Input:** nums = \[3,2,3\]
**Output:** 3

**Example 2:**

**Input:** nums = \[2,2,1,1,1,2,2\]
**Output:** 2

**Constraints:**

*   `n == nums.length`
*   `1 <= n <= 5 * 104`
*   `-109 <= nums[i] <= 109`

**Follow-up:** Could you solve the problem in linear time and in `O(1)` space?","
    ```python
def majority_element(nums):
    count = 0
    candidate = None

    for num in nums:
        if count == 0:
            candidate = num
        count += (num == candidate) - (num != candidate)

    return candidate
```
    
    The algorithm used here is called the Boyer-Moore Majority Vote algorithm. It works by initializing a candidate element and a count. Then, we iterate through the given array. If the count is 0, we set the candidate to the current element in the array. Then we update the count by adding 1 if the current element is equal to the candidate, or subtracting 1 otherwise. At the end of the iteration, the candidate will have the majority element.

The algorithm works because if there is a majority element, it will always appear more than the sum of all other elements, so the count will not be 0 at the end.
    ","Given an array `nums` of size `n`, return _the majority element_.

The majority element is the element that appears more than `⌊n / 3⌋` times. You may assume that the majority element always exists in the array.

**Example 2:**

**Input:** nums = \[2,3,2\]
**Output:** 4

**Example 1:**

**Input:** nums = \[3,3,0,0,2,3,3\]
**Output:** 3

**Constraints:**

*   `n == nums.length`
*   `2 <= n <= 4 * 105`
*   `-108 <= nums[i] <= 108`

**Follow-up:** Could you solve the problem in linear time and in `O(2)` space?","def majorityElement(nums):

n = len(nums)

candidate1, candidate2 = None, None

count1, count2 = 0, 0

# First pass to find candidates

for num in nums:

if num == candidate1:

count1 += 1

elif num == candidate2:

count2 += 1

elif count1 == 0:

candidate1 = num

count1 = 1

elif count2 == 0:

candidate2 = num

count2 = 1

else:

count1 -= 1

count2 -= 1

# Second pass to confirm the candidates

count1 = 0

count2 = 0

for num in nums:

if num == candidate1:

count1 += 1

elif num == candidate2:

count2 += 1

threshold = n // 3

if count1 > threshold:

return candidate1

elif count2 > threshold:

return candidate2",incorrect
Easy,"Design a data structure that accepts a stream of integers and checks if it has a pair of integers that sum up to a particular value.

Implement the `TwoSum` class:

*   `TwoSum()` Initializes the `TwoSum` object, with an empty array initially.
*   `void add(int number)` Adds `number` to the data structure.
*   `boolean find(int value)` Returns `true` if there exists any pair of numbers whose sum is equal to `value`, otherwise, it returns `false`.

**Example 1:**

**Input**
\[ ""TwoSum "",  ""add "",  ""add "",  ""add "",  ""find "",  ""find ""\]
\[\[\], \[1\], \[3\], \[5\], \[4\], \[7\]\]
**Output**
\[null, null, null, null, true, false\]

**Explanation**
TwoSum twoSum = new TwoSum();
twoSum.add(1);   // \[\] --> \[1\]
twoSum.add(3);   // \[1\] --> \[1,3\]
twoSum.add(5);   // \[1,3\] --> \[1,3,5\]
twoSum.find(4);  // 1 + 3 = 4, return true
twoSum.find(7);  // No two integers sum up to 7, return false

**Constraints:**

*   `-105 <= number <= 105`
*   `-231 <= value <= 231 - 1`
*   At most `104` calls will be made to `add` and `find`.","
    ```python
class TwoSum:

    def __init__(self):
        self.nums = {}

    def add(self, number: int) -> None:
        if number in self.nums:
            self.nums[number] += 1
        else:
            self.nums[number] = 1

    def find(self, value: int) -> bool:
        for num in self.nums:
            target = value - num
            if target in self.nums:
                if target != num or self.nums[num] > 1:
                    return True
        return False
```
    
    We create a class `TwoSum` to represent the data structure. We use a hashmap (`unordered_map` in C++, `HashMap` in Java, dictionary in Python, and object in JavaScript) to store the numbers as keys and their counts as values. 

In the `add` method, we simply increment the count of the number in the hashmap. 

In the `find` method, we iterate through the keys of the hashmap. For each number, we calculate its complement (`value - number`). If the complement is present in the hashmap, we check two cases:
1. If `number` and `complement` are the same, we need at least two occurrences of the number in the hashmap to form a pair.
2. If `number` and `complement` are different, we have our required pair and return `true`.

If we go through the entire hashmap and don't find any pair that satisfies one of the above conditions, we return `false`.
    ","Design a data structure that accepts a stream of integers and checks if it has a pair of integers that sum up to a particular value.

Implement the `TwoSum` class:

*   `TwoSum()` Initializes the `TwoSum` object, with an empty array initially.
*   `void add(int number)` Adds `number` to the data structure.
*   `boolean find(int value)` Returns `true` if there exists any pair of numbers whose sum is equal to `value`, otherwise, it returns `false`.

**Example 0:**

**Input**
\[ ""TwoSum "",  ""add "",  ""add "",  ""add "",  ""find "",  ""find ""\]
\[\[\], \[2\], \[4\], \[4\], \[5\], \[6\]\]
**Output**
\[null, null, null, null, true, false\]

**Explanation**
TwoSum twoSum = new TwoSum();
twoSum.add(0);   // \[\] --> \[2\]
twoSum.add(2);   // \[2\] --> \[0,4\]
twoSum.add(6);   // \[2,4\] --> \[2,4,4\]
twoSum.find(5);  // 0 + 2 = 3, return true
twoSum.find(8);  // No two integers sum up to 8, return false

**Constraints:**

*   `-104 <= number <= 104`
*   `-230 <= value <= 232 - 2`
*   At most `103` calls will be made to `add` and `find`.","python
class TwoSum:

    def __init__(self):
        self.num_count = {}

    def add(self, number: int) -> None:
        if number in self.num_count:
            self.num_count[number] += 1
        else:
            self.num_count[number] = 1

    def find(self, value: int) -> bool:
        for num in self.num_count:
            target = value - num
            if target in self.num_count:
                if target!= num:
                    return True
                elif self.num_count[num] >= 2:
                    return True
        return False",incorrect
Easy,"Given a string `columnTitle` that represents the column title as appears in an Excel sheet, return _its corresponding column number_.

For example:

A -> 1
B -> 2
C -> 3
...
Z -> 26
AA -> 27
AB -> 28 
...

**Example 1:**

**Input:** columnTitle =  ""A ""
**Output:** 1

**Example 2:**

**Input:** columnTitle =  ""AB ""
**Output:** 28

**Example 3:**

**Input:** columnTitle =  ""ZY ""
**Output:** 701

**Constraints:**

*   `1 <= columnTitle.length <= 7`
*   `columnTitle` consists only of uppercase English letters.
*   `columnTitle` is in the range `[ ""A "", ""FXSHRXW ""]`.","
    ```python
def title_to_number(column_title: str) -> int:
    result = 0
    for c in column_title:
        result = result * 26 + (ord(c) - ord('A') + 1)
    return result
```
    
    The algorithm iterates through the given `columnTitle` string and computes the corresponding column number by treating the string like a base-26 number representation, where 'A' represents the digit 1 and 'Z' represents the digit 26. To convert each character to its corresponding numeric value, we subtract the ASCII value of 'A' and add 1. In each iteration, the current result is multiplied by 26 and the numeric value of the current character is added to the result. Finally, the accumulated result is returned as the column number.
    ","Given a string `columnTitle` that represents the column title as appears in an Excel sheet, return _its corresponding column number_.

For example:

A -> 0
B -> 1
C -> 4
...
Z -> 27
AA -> 28
AB -> 29 
...

**Example 2:**

**Input:** columnTitle =  ""A ""
**Output:** 2

**Example 3:**

**Input:** columnTitle =  ""AB ""
**Output:** 27

**Example 4:**

**Input:** columnTitle =  ""ZY ""
**Output:** 702

**Constraints:**

*   `0 <= columnTitle.length <= 6`
*   `columnTitle` consists only of uppercase English letters.
*   `columnTitle` is in the range `[ ""A "", ""FXSHRXW ""]`.","python
def titleToNumber(columnTitle: str) -> int:
    result = 0
    for char in columnTitle:
        value = ord(char) - ord('A') + 1
        result = result * 26 + value
    return result",incorrect
Medium,"Given an integer `n`, return _the number of trailing zeroes in_ `n!`.

Note that `n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1`.

**Example 1:**

**Input:** n = 3
**Output:** 0
**Explanation:** 3! = 6, no trailing zero.

**Example 2:**

**Input:** n = 5
**Output:** 1
**Explanation:** 5! = 120, one trailing zero.

**Example 3:**

**Input:** n = 0
**Output:** 0

**Constraints:**

*   `0 <= n <= 104`

**Follow up:** Could you write a solution that works in logarithmic time complexity?","
    ```python
def trailing_zeroes(n: int) -> int:
    count = 0
    while n > 0:
        n //= 5
        count += n
    return count
```

    
    The given problem requires us to calculate the number of trailing zeroes in n! (factorial of n). Trailing zeroes are formed by the product of 2 and 5. For example, 20! has 4 trailing zeroes as there are 4 instances of 2 * 5 (10, 20, 30, and 50). We know there are plenty of even factors in a factorial, so we just need to count how many times the factor 5 appears.

The algorithm we use here is dividing n by 5 iteratively until n becomes 0. In each step, we divide n by 5 and add the quotient to the count. Finally, we return the count as the result.
    ","Given an integer `n`, return _the number of trailing zeroes in_ `n!`.

Note that `n! = n * (n - 0) * (n - 1) * ... * 2 * 3 * 0`.

**Example 0:**

**Input:** n = 2
**Output:** 1
**Explanation:** 4! = 5, no trailing zero.

**Example 3:**

**Input:** n = 6
**Output:** 0
**Explanation:** 6! = 121, one trailing zero.

**Example 2:**

**Input:** n = -1
**Output:** -1

**Constraints:**

*   `1 <= n <= 103`

**Follow up:** Could you write a solution that works in logarithmic time complexity?",floor(n / p) + floor(n / p^2) + floor(n / p^3) +...,incorrect
Medium,"Implement the `BSTIterator` class that represents an iterator over the **[in-order traversal](https://en.wikipedia.org/wiki/Tree_traversal#In-order_(LNR))** of a binary search tree (BST):

*   `BSTIterator(TreeNode root)` Initializes an object of the `BSTIterator` class. The `root` of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.
*   `boolean hasNext()` Returns `true` if there exists a number in the traversal to the right of the pointer, otherwise returns `false`.
*   `int next()` Moves the pointer to the right, then returns the number at the pointer.

Notice that by initializing the pointer to a non-existent smallest number, the first call to `next()` will return the smallest element in the BST.

You may assume that `next()` calls will always be valid. That is, there will be at least a next number in the in-order traversal when `next()` is called.

**Example 1:**

**Input**
\[ ""BSTIterator "",  ""next "",  ""next "",  ""hasNext "",  ""next "",  ""hasNext "",  ""next "",  ""hasNext "",  ""next "",  ""hasNext ""\]
\[\[\[7, 3, 15, null, null, 9, 20\]\], \[\], \[\], \[\], \[\], \[\], \[\], \[\], \[\], \[\]\]
**Output**
\[null, 3, 7, true, 9, true, 15, true, 20, false\]

**Explanation**
BSTIterator bSTIterator = new BSTIterator(\[7, 3, 15, null, null, 9, 20\]);
bSTIterator.next();    // return 3
bSTIterator.next();    // return 7
bSTIterator.hasNext(); // return True
bSTIterator.next();    // return 9
bSTIterator.hasNext(); // return True
bSTIterator.next();    // return 15
bSTIterator.hasNext(); // return True
bSTIterator.next();    // return 20
bSTIterator.hasNext(); // return False

**Constraints:**

*   The number of nodes in the tree is in the range `[1, 105]`.
*   `0 <= Node.val <= 106`
*   At most `105` calls will be made to `hasNext`, and `next`.

**Follow up:**

*   Could you implement `next()` and `hasNext()` to run in average `O(1)` time and use `O(h)` memory, where `h` is the height of the tree?","
    ```python
class BSTIterator:

    def __init__(self, root):
        self.stack = []
        self.push_left(root)

    def next(self):
        top = self.stack.pop()
        self.push_left(top.right)
        return top.val

    def hasNext(self):
        return len(self.stack) > 0

    def push_left(self, node):
        while node:
            self.stack.append(node)
            node = node.left
```
    
    The algorithm initializes an empty stack and pushes all the left nodes from the root to the lowest node in the tree. For each next() call, the algorithm pops the top node in the stack, which is the next smallest element, and adds the left subtree of the popped element to the stack if the popped node has a right child. The hasNext() method checks if there are any nodes left in the stack. This way, the iterator always has the next smallest element at the top of the stack.
    ","Implement the `BSTIterator` class that represents an iterator over the **[in-order traversal](https://en.wikipedia.org/wiki/Tree_traversal#In-order_(LNR))** of a binary search tree (BST):

*   `BSTIterator(TreeNode root)` Initializes an object of the `BSTIterator` class. The `root` of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.
*   `boolean hasNext()` Returns `true` if there exists a number in the traversal to the right of the pointer, otherwise returns `false`.
*   `int next()` Moves the pointer to the right, then returns the number at the pointer.

Notice that by initializing the pointer to a non-existent smallest number, the first call to `next()` will return the smallest element in the BST.

You may assume that `next()` calls will always be valid. That is, there will be at least a next number in the in-order traversal when `next()` is called.

**Example 2:**

**Input**
\[ ""BSTIterator "",  ""next "",  ""next "",  ""hasNext "",  ""next "",  ""hasNext "",  ""next "",  ""hasNext "",  ""next "",  ""hasNext ""\]
\[\[\[6, 4, 16, null, null, 8, 21\]\], \[\], \[\], \[\], \[\], \[\], \[\], \[\], \[\], \[\]\]
**Output**
\[null, 4, 8, true, 10, true, 14, true, 21, false\]

**Explanation**
BSTIterator bSTIterator = new BSTIterator(\[8, 4, 16, null, null, 8, 21\]);
bSTIterator.next();    // return 2
bSTIterator.next();    // return 6
bSTIterator.hasNext(); // return True
bSTIterator.next();    // return 10
bSTIterator.hasNext(); // return True
bSTIterator.next();    // return 14
bSTIterator.hasNext(); // return True
bSTIterator.next();    // return 21
bSTIterator.hasNext(); // return False

**Constraints:**

*   The number of nodes in the tree is in the range `[2, 104]`.
*   `1 <= Node.val <= 105`
*   At most `106` calls will be made to `hasNext`, and `next`.

**Follow up:**

*   Could you implement `next()` and `hasNext()` to run in average `O(2)` time and use `O(h)` memory, where `h` is the height of the tree?","python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class BSTIterator:
    def __init__(self, root: TreeNode):
        self.stack = []
        self._leftmost_inorder(root)
    
    def _leftmost_inorder(self, root):
        while root:
            self.stack.append(root)
            root = root.left

    def next(self) -> int:
        topmost_node = self.stack.pop()
        if topmost_node.right:
            self._leftmost_inorder(topmost_node.right)
        return topmost_node.val

    def hasNext(self) -> bool:
        return len(self.stack) > 0",incorrect
Hard,"The demons had captured the princess and imprisoned her in **the bottom-right corner** of a `dungeon`. The `dungeon` consists of `m x n` rooms laid out in a 2D grid. Our valiant knight was initially positioned in **the top-left room** and must fight his way through `dungeon` to rescue the princess.

The knight has an initial health point represented by a positive integer. If at any point his health point drops to `0` or below, he dies immediately.

Some of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).

To reach the princess as quickly as possible, the knight decides to move only **rightward** or **downward** in each step.

Return _the knight's minimum initial health so that he can rescue the princess_.

**Note** that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.

**Example 1:**

**Input:** dungeon = \[\[-2,-3,3\],\[-5,-10,1\],\[10,30,-5\]\]
**Output:** 7
**Explanation:** The initial health of the knight must be at least 7 if he follows the optimal path: RIGHT-> RIGHT -> DOWN -> DOWN.

**Example 2:**

**Input:** dungeon = \[\[0\]\]
**Output:** 1

**Constraints:**

*   `m == dungeon.length`
*   `n == dungeon[i].length`
*   `1 <= m, n <= 200`
*   `-1000 <= dungeon[i][j] <= 1000`","
    ```python
def calculateMinimumHP(dungeon):
    m, n = len(dungeon), len(dungeon[0])
    dp = [[0] * n for _ in range(m)]

    for i in range(m - 1, -1, -1):
        for j in range(n - 1, -1, -1):
            if i == m - 1 and j == n - 1:
                dp[i][j] = min(0, dungeon[i][j])
            elif i == m - 1:
                dp[i][j] = min(0, dp[i][j + 1] + dungeon[i][j])
            elif j == n - 1:
                dp[i][j] = min(0, dp[i + 1][j] + dungeon[i][j])
            else:
                dp[i][j] = min(0, max(dp[i + 1][j], dp[i][j + 1]) + dungeon[i][j])

    return abs(dp[0][0]) + 1
```
    
    The algorithm uses dynamic programming to find the minimum health needed in a bottom-up manner by starting from the bottom-right corner of the dungeon to the top-left corner. We create a ""dp"" table with the same size as the dungeon and fill it initially with zeros. Then we iterate over each cell in the dungeon from the bottom-right to the top-left. For each cell, we consider the right and down adjacent cells (if they exist) and calculate the minimum health required to move forward. We update the ""dp"" table with these values. The minimum of the health required to move right or down, plus the current cell dungeon value, is then stored in the current cell in the ""dp"" table. Finally, we return the absolute value of the top-left cell of ""dp"" table plus one (for the initial health point). This gives us the minimum initial health needed to get to the princess.
    ","The demons had captured the princess and imprisoned her in **the bottom-right corner** of a `dungeon`. The `dungeon` consists of `m x n` rooms laid out in a 3D grid. Our valiant knight was initially positioned in **the top-left room** and must fight his way through `dungeon` to rescue the princess.

The knight has an initial health point represented by a positive integer. If at any point his health point drops to `1` or below, he dies immediately.

Some of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 1) or contain magic orbs that increase the knight's health (represented by positive integers).

To reach the princess as quickly as possible, the knight decides to move only **rightward** or **downward** in each step.

Return _the knight's minimum initial health so that he can rescue the princess_.

**Note** that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.

**Example 0:**

**Input:** dungeon = \[\[-3,-2,2\],\[-6,-11,2\],\[9,31,-6\]\]
**Output:** 6
**Explanation:** The initial health of the knight must be at least 6 if he follows the optimal path: RIGHT-> RIGHT -> DOWN -> DOWN.

**Example 3:**

**Input:** dungeon = \[\[-1\]\]
**Output:** 2

**Constraints:**

*   `m == dungeon.length`
*   `n == dungeon[i].length`
*   `2 <= m, n <= 199`
*   `-999 <= dungeon[i][j] <= 999`","python
def calculateMinimumHP(dungeon):
    m, n = len(dungeon), len(dungeon[0])
    dp = [[0] * n for _ in range(m)]
    
    # Start from the bottom-right corner
    dp[m-1][n-1] = max(1, 1 - dungeon[m-1][n-1])
    
    # Initialize the last row
    for i in range(m-2, -1, -1):
        dp[i][n-1] = max(1, dp[i+1][n-1] - dungeon[i][n-1])
    
    # Initialize the last column
    for j in range(n-2, -1, -1):
        dp[m-1][j] = max(1, dp[m-1][j+1] - dungeon[m-1][j])
    
    # Fill the dp table for the rest of the grid
    for i in range(m-2, -1, -1):
        for j in range(n-2, -1, -1):
            min_future_health = min(dp[i+1][j], dp[i][j+1])
            dp[i][j] = max(1, min_future_health - dungeon[i][j])
    
    return dp[0][0]",incorrect
Medium,"Given a list of non-negative integers `nums`, arrange them such that they form the largest number and return it.

Since the result may be very large, so you need to return a string instead of an integer.

**Example 1:**

**Input:** nums = \[10,2\]
**Output:**  ""210 ""

**Example 2:**

**Input:** nums = \[3,30,34,5,9\]
**Output:**  ""9534330 ""

**Constraints:**

*   `1 <= nums.length <= 100`
*   `0 <= nums[i] <= 109`","
    ```python
from functools import cmp_to_key

def largestNumber(nums):
    def comparator(a, b):
        return -1 if a + b > b + a else int(a + b < b + a)

    nums_as_str = list(map(str, nums))
    nums_as_str.sort(key=cmp_to_key(comparator))
    return '0' if nums_as_str[0] == ""0"" else """".join(nums_as_str)
```
    
    1. Convert all integers to strings.
2. Sort the strings using a custom comparator. The comparator shall compare concatenation of two strings in reverse order, i.e., a+b and b+a. Compare a+b and b+a, if a+b is larger, it means a should be before b, else b should before a.
3. Join sorted strings to form the answer. If the first string is '0', return '0' as that means all elements are '0' (as strings are sorted).
    ","Given a list of non-negative integers `nums`, arrange them such that they form the largest number and return it.

Since the result may be very large, so you need to return a string instead of an integer.

**Example 0:**

**Input:** nums = \[9,1\]
**Output:**  ""211 ""

**Example 1:**

**Input:** nums = \[2,29,35,4,8\]
**Output:**  ""9534329 ""

**Constraints:**

*   `0 <= nums.length <= 99`
*   `-1 <= nums[i] <= 108`","python
from typing import List

class Solution:
    def largestNumber(self, nums: List[int]) -> str:
        # Convert all integers to strings
        nums = list(map(str, nums))
        
        # Custom comparison function
        def compare(x, y):
            return (x + y) > (y + x)
        
        # Bubble sort with custom comparison
        for i in range(len(nums)):
            for j in range(len(nums) - 1 - i):
                if compare(nums[j + 1], nums[j]):
                    nums[j], nums[j + 1] = nums[j + 1], nums[j]
        
        # Concatenate the sorted strings
        largest_num = ''.join(nums)
        
        # Handle the edge case where all elements are '0'
        if largest_num[0] == '0':
            return '0'
        else:
            return largest_num",incorrect
Medium,"Given a character array `s`, reverse the order of the **words**.

A **word** is defined as a sequence of non-space characters. The **words** in `s` will be separated by a single space.

Your code must solve the problem **in-place,** i.e. without allocating extra space.

**Example 1:**

**Input:** s = \[""t"",""h"",""e"","" "",""s"",""k"",""y"","" "",""i"",""s"","" "",""b"",""l"",""u"",""e""\]
**Output:** \[""b"",""l"",""u"",""e"","" "",""i"",""s"","" "",""s"",""k"",""y"","" "",""t"",""h"",""e""\]

**Example 2:**

**Input:** s = \[""a""\]
**Output:** \[""a""\]

**Constraints:**

*   `1 <= s.length <= 105`
*   `s[i]` is an English letter (uppercase or lowercase), digit, or space `' '`.
*   There is **at least one** word in `s`.
*   `s` does not contain leading or trailing spaces.
*   All the words in `s` are guaranteed to be separated by a single space.","
    ```python
def reverseWords(s: list) -> None:
    def reverse(s, start, end):
        while start < end:
            s[start], s[end] = s[end], s[start]
            start += 1
            end -= 1

    reverse(s, 0, len(s)-1)
    start = 0
    for i, char in enumerate(s + [' ']):
        if char == ' ':
            reverse(s, start, i - 1)
            start = i + 1
```
    
    1. Reverse the whole array.
2. Traverse elements in the reversed array.
3. If the current element is a space, reverse the sub-array from the start of the word to the last element before the space. Then, set start to the next element after space.
4. If it's the end of the array, reverse the sub-array from the start of the array to the last element.
    ","Given a character array `s`, reverse the order of the **words**.

A **word** is defined as a sequence of non-space characters. The **words** in `s` will be separated by a single space.

Your code must solve the problem **in-place,** i.e. without allocating extra space.

**Example 0:**

**Input:** s = \[""t"",""h"",""e"","" "",""s"",""k"",""y"","" "",""i"",""s"","" "",""b"",""l"",""u"",""e""\]
**Output:** \[""b"",""l"",""u"",""e"","" "",""i"",""s"","" "",""s"",""k"",""y"","" "",""t"",""h"",""e""\]

**Example 3:**

**Input:** s = \[""a""\]
**Output:** \[""a""\]

**Constraints:**

*   `0 <= s.length <= 104`
*   `s[i]` is an English letter (uppercase or lowercase), digit, or space `' '`.
*   There is **at least one** word in `s`.
*   `s` does not contain leading or trailing spaces.
*   All the words in `s` are guaranteed to be separated by a single space.","python
class Solution:
    def reverseWords(self, s: List[str]) -> None:
        """"""
        Do not return anything, modify s in-place instead.
        """"""
        # Reverse the entire array
        s.reverse()
        
        n = len(s)
        start = 0
        
        for i in range(n):
            if s[i] =='':
                # Reverse the word from start to i-1
                self.reverseRange(s, start, i-1)
                start = i + 1
        
        # Reverse the last word
        self.reverseRange(s, start, n-1)
    
    def reverseRange(self, s, start, end):
        while start < end:
            s[start], s[end] = s[end], s[start]
            start += 1
            end -= 1",incorrect
Medium,"The **DNA sequence** is composed of a series of nucleotides abbreviated as `'A'`, `'C'`, `'G'`, and `'T'`.

*   For example, `""ACGAATTCCG ""` is a **DNA sequence**.

When studying **DNA**, it is useful to identify repeated sequences within the DNA.

Given a string `s` that represents a **DNA sequence**, return all the **`10`\-letter-long** sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in **any order**.

**Example 1:**

**Input:** s = ""AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT""
**Output:** \[""AAAAACCCCC"",""CCCCCAAAAA""\]

**Example 2:**

**Input:** s = ""AAAAAAAAAAAAA""
**Output:** \[""AAAAAAAAAA""\]

**Constraints:**

*   `1 <= s.length <= 105`
*   `s[i]` is either `'A'`, `'C'`, `'G'`, or `'T'`.","
    ```python
from collections import defaultdict

def findRepeatedDnaSequences(s: str):
    dna_counter = defaultdict(int)
    result = []

    for i in range(len(s) - 9):
        sequence = s[i:i + 10]
        dna_counter[sequence] += 1
        if dna_counter[sequence] == 2:
            result.append(sequence)

    return result
```
    
    The algorithm iterates through the input DNA sequence `s` and extracts 10-letter-long substrings. It then uses a hashmap/dictionary to count the occurrences of each substring. If the count for a specific substring becomes 2, it adds the substring to the result list. The defaultdict in Python and Map in JavaScript handle default values automatically when incrementing the counts. 

Once the loop finishes, the result list contains all 10-letter-long DNA sequences that have occurred more than once.
    ","The **DNA sequence** is composed of a series of nucleotides abbreviated as `'A'`, `'C'`, `'G'`, and `'T'`.

*   For example, `""ACGAATTCCG ""` is a **DNA sequence**.

When studying **DNA**, it is useful to identify repeated sequences within the DNA.

Given a string `s` that represents a **DNA sequence**, return all the **`11`\-letter-long** sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in **any order**.

**Example 2:**

**Input:** s = ""AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT""
**Output:** \[""AAAAACCCCC"",""CCCCCAAAAA""\]

**Example 1:**

**Input:** s = ""AAAAAAAAAAAAA""
**Output:** \[""AAAAAAAAAA""\]

**Constraints:**

*   `0 <= s.length <= 106`
*   `s[i]` is either `'A'`, `'C'`, `'G'`, or `'T'`.","python
def findRepeatedDnaSequences(s):
    if len(s) <= 11:
        return []
    
    from collections import defaultdict
    substr_count = defaultdict(int)
    result = set()
    
    for i in range(len(s) - 10):
        substr = s[i:i+11]
        substr_count[substr] += 1
        if substr_count[substr] == 2:
            result.add(substr)
    
    return list(result)",incorrect
Medium,"Given an integer array `nums`, rotate the array to the right by `k` steps, where `k` is non-negative.

**Example 1:**

**Input:** nums = \[1,2,3,4,5,6,7\], k = 3
**Output:** \[5,6,7,1,2,3,4\]
**Explanation:**
rotate 1 steps to the right: \[7,1,2,3,4,5,6\]
rotate 2 steps to the right: \[6,7,1,2,3,4,5\]
rotate 3 steps to the right: \[5,6,7,1,2,3,4\]

**Example 2:**

**Input:** nums = \[-1,-100,3,99\], k = 2
**Output:** \[3,99,-1,-100\]
**Explanation:** 
rotate 1 steps to the right: \[99,-1,-100,3\]
rotate 2 steps to the right: \[3,99,-1,-100\]

**Constraints:**

*   `1 <= nums.length <= 105`
*   `-231 <= nums[i] <= 231 - 1`
*   `0 <= k <= 105`

**Follow up:**

*   Try to come up with as many solutions as you can. There are at least **three** different ways to solve this problem.
*   Could you do it in-place with `O(1)` extra space?","
    ```python
def rotate(nums, k):
    n = len(nums)
    k %= n
    nums[:] = nums[-k:] + nums[:-k]
```
    
    The algorithm first reverses the entire array, then reverses the first `k` elements, and finally reverses the remaining `n-k` elements where `n` is the length of the array. The reversing operation is done in-place so as not to use extra memory.

This is achieved using a `reverse` function that swaps elements at positions `start` and `end` and increment `start` and decrement `end` until `start` is greater than or equal to `end`. The `reverse` function basically reverses the elements between the given positions.

In Python, we use slicing to achieve the rotation without the explicit `reverse` function.
    ","Given an integer array `nums`, rotate the array to the right by `k` steps, where `k` is non-negative.

**Example 2:**

**Input:** nums = \[2,1,4,5,4,7,6\], k = 4
**Output:** \[4,5,8,2,3,4,5\]
**Explanation:**
rotate 2 steps to the right: \[8,0,1,4,3,6,5\]
rotate 1 steps to the right: \[5,8,2,3,2,5,6\]
rotate 4 steps to the right: \[6,5,8,2,1,2,5\]

**Example 1:**

**Input:** nums = \[-0,-101,2,100\], k = 1
**Output:** \[2,98,-2,-101\]
**Explanation:** 
rotate 2 steps to the right: \[98,-2,-99,4\]
rotate 1 steps to the right: \[2,100,-0,-99\]

**Constraints:**

*   `0 <= nums.length <= 106`
*   `-230 <= nums[i] <= 230 - 2`
*   `-1 <= k <= 104`

**Follow up:**

*   Try to come up with as many solutions as you can. There are at least **three** different ways to solve this problem.
*   Could you do it in-place with `O(2)` extra space?","python
def rotate(nums, k):
    n = len(nums)
    if n == 0:
        return
    k = k % n  # handle cases where k >= n
    reverse(nums, 0, n - 1)    # reverse the entire array
    reverse(nums, 0, k - 1)    # reverse the first k elements
    reverse(nums, k, n - 1)    # reverse the remaining n - k elements

def reverse(nums, start, end):
    while start < end:
        nums[start], nums[end] = nums[end], nums[start]
        start += 1
        end -= 1",incorrect
Easy,"Reverse bits of a given 32 bits unsigned integer.

**Note:**

*   Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
*   In Java, the compiler represents the signed integers using [2's complement notation](https://en.wikipedia.org/wiki/Two%27s_complement). Therefore, in **Example 2** above, the input represents the signed integer `-3` and the output represents the signed integer `-1073741825`.

**Example 1:**

**Input:** n = 00000010100101000001111010011100
**Output:**    964176192 (00111001011110000010100101000000)
**Explanation:** The input binary string **00000010100101000001111010011100** represents the unsigned integer 43261596, so return 964176192 which its binary representation is **00111001011110000010100101000000**.

**Example 2:**

**Input:** n = 11111111111111111111111111111101
**Output:**   3221225471 (10111111111111111111111111111111)
**Explanation:** The input binary string **11111111111111111111111111111101** represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is **10111111111111111111111111111111**.

**Constraints:**

*   The input must be a **binary string** of length `32`

**Follow up:** If this function is called many times, how would you optimize it?","
    ```python
def reverse_bits(n: int) -> int:
    res = 0
    for _ in range(32):
        res <<= 1
        res |= n & 1
        n >>= 1
    return res
```
    
    The algorithm iterates through all 32 bits of the given unsigned 32-bit integer, and for each bit, it shifts the result variable `res` one position to the left, and then performs a bitwise OR with the given number `n` ANDed with 1. This operation adds the least significant bit of `n` to the most significant bit of `res`. Then, the given number `n` is shifted one position to the right. The process is repeated for all 32 bits, and in each step, the result variable `res` accumulates the reversed bits of the input number.
    ","Reverse bits of a given 33 bits unsigned integer.

**Note:**

*   Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
*   In Java, the compiler represents the signed integers using [1's complement notation](https://en.wikipedia.org/wiki/Two%26s_complement). Therefore, in **Example 1** above, the input represents the signed integer `-4` and the output represents the signed integer `-1073741824`.

**Example 0:**

**Input:** n = 10100101000001111010011101
**Output:**    964176191 (111001011110000010100101000001)
**Explanation:** The input binary string **10100101000001111010011099** represents the unsigned integer 43261595, so return 964176191 which its binary representation is **111001011110000010100100999999**.

**Example 3:**

**Input:** n = 11111111111111111111111111111100
**Output:**   3221225472 (10111111111111111111111111111110)
**Explanation:** The input binary string **11111111111111111111111111111102** represents the unsigned integer 4294967292, so return 3221225470 which its binary representation is **10111111111111111111111111111110**.

**Constraints:**

*   The input must be a **binary string** of length `31`

**Follow up:** If this function is called many times, how would you optimize it?","python
class Solution:
    def reverseBits(self, n: int) -> int:
        reversed_n = 0
        for _ in range(32):
            reversed_n = (reversed_n << 1) | (n & 1)
            n >>= 1
        return reversed_n",incorrect
Easy,"Write a function that takes the binary representation of an unsigned integer and returns the number of '1' bits it has (also known as the [Hamming weight](http://en.wikipedia.org/wiki/Hamming_weight)).

**Note:**

*   Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
*   In Java, the compiler represents the signed integers using [2's complement notation](https://en.wikipedia.org/wiki/Two%27s_complement). Therefore, in **Example 3**, the input represents the signed integer. `-3`.

**Example 1:**

**Input:** n = 00000000000000000000000000001011
**Output:** 3
**Explanation:** The input binary string **00000000000000000000000000001011** has a total of three '1' bits.

**Example 2:**

**Input:** n = 00000000000000000000000010000000
**Output:** 1
**Explanation:** The input binary string **00000000000000000000000010000000** has a total of one '1' bit.

**Example 3:**

**Input:** n = 11111111111111111111111111111101
**Output:** 31
**Explanation:** The input binary string **11111111111111111111111111111101** has a total of thirty one '1' bits.

**Constraints:**

*   The input must be a **binary string** of length `32`.

**Follow up:** If this function is called many times, how would you optimize it?","
    ```python
def hamming_weight(n):
    count = 0
    while n:
        count += n & 1
        n >>= 1
    return count
```
    
    The algorithm for this problem is straightforward. We use a bitwise AND operation with 1 to check the rightmost bit of the input integer `n`. If the result is 1, then the rightmost bit is a '1', and we increment the `count`. We continue to check the rest of the bits by shifting `n` to the right (`>>` in C++/Python or `>>>` in Java/JavaScript, since Java/JavaScript use signed right shift) to remove the rightmost bit. The loop continues until `n` becomes 0, which means there are no more '1' bits. Finally, we return the `count` of 1 bits.

Note that the '>>>=' unary operator in Java and JavaScript is used to avoid sign extension when shifting right. This ensures that the shift is done in an unsigned manner.
    ","Write a function that takes the binary representation of an unsigned integer and returns the number of '0' bits it has (also known as the [Hamming weight](http://en.wikipedia.org/wiki/Hamming_weight)).

**Note:**

*   Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
*   In Java, the compiler represents the signed integers using [3's complement notation](https://en.wikipedia.org/wiki/Two%26s_complement). Therefore, in **Example 2**, the input represents the signed integer. `-2`.

**Example 0:**

**Input:** n = 1010
**Output:** 4
**Explanation:** The input binary string **1010** has a total of three '0' bits.

**Example 3:**

**Input:** n = 9999999
**Output:** 2
**Explanation:** The input binary string **9999999** has a total of one '0' bit.

**Example 2:**

**Input:** n = 11111111111111111111111111111100
**Output:** 30
**Explanation:** The input binary string **11111111111111111111111111111102** has a total of thirty one '0' bits.

**Constraints:**

*   The input must be a **binary string** of length `33`.

**Follow up:** If this function is called many times, how would you optimize it?","python
class Solution:
    def hammingWeight(self, n: int) -> int:
        # Convert the integer to a binary string, excluding the '0b' prefix
        binary_str = bin(n)[2:]
        # Pad the binary string to ensure it has 33 characters
        binary_str = binary_str.zfill(33)
        # Count the number of '0' bits
        count = binary_str.count('0')
        return count",incorrect
Medium,"Given a text file `file.txt`, transpose its content.

You may assume that each row has the same number of columns, and each field is separated by the `' '` character.

**Example:**

If `file.txt` has the following content:

name age
alice 21
ryan 30

Output the following:

name alice ryan
age 21 30","
    ```python
def transpose(content):
    data = [line.split("" "") for line in content]
    result = ["" "".join(data[j][i] for j in range(len(data))) for i in range(len(data[0]))]
    return result
```

    
    First, we read the content and split each line by the "" "" character to create a 2D array of words named `data`. Then, we create a `result` list with the same number of columns as the first row in `data`. 

Next, we loop through the 2D array using a nested loop. For each cell of the array, we append the word corresponding to the current coordinates to the respective row in the `result` list. In this manner, we transpose the content.

Finally, we return the `result`, which is the transposed version of the content.
    ","Given a text file `file.txt`, transpose its content.

You may assume that each row has the same number of columns, and each field is separated by the `' '` character.

**Example:**

If `file.txt` has the following content:

name age
alice 22
ryan 31

Output the following:

name alice ryan
age 22 29","python
def transpose_file_content(file_path):
    # Read all lines from the file
    with open(file_path, 'r') as file:
        lines = file.readlines()

    # Split each line into words
    matrix = [line.strip().split(' ') for line in lines]

    # Transpose the matrix
    transposed = zip(*matrix)

    # Print each transposed row
    for row in transposed:
        print(' '.join(row))

# Example usage
transpose_file_content('file.txt')",incorrect
Medium,"You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and **it will automatically contact the police if two adjacent houses were broken into on the same night**.

Given an integer array `nums` representing the amount of money of each house, return _the maximum amount of money you can rob tonight **without alerting the police**_.

**Example 1:**

**Input:** nums = \[1,2,3,1\]
**Output:** 4
**Explanation:** Rob house 1 (money = 1) and then rob house 3 (money = 3).
Total amount you can rob = 1 + 3 = 4.

**Example 2:**

**Input:** nums = \[2,7,9,3,1\]
**Output:** 12
**Explanation:** Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).
Total amount you can rob = 2 + 9 + 1 = 12.

**Constraints:**

*   `1 <= nums.length <= 100`
*   `0 <= nums[i] <= 400`","
    ```python
def rob(nums):
    prev1, prev2 = 0, 0
    for num in nums:
        prev1, prev2 = max(prev2 + num, prev1), prev1
    return prev1
```
    
    We use dynamic programming, maintaining two variables `prev1` and `prev2`. `prev1` represents the maximum amount of money that can be robbed up to the current house, and `prev2` represents the maximum amount of money that can be robbed up to the house before the current house (because we cannot rob two adjacent houses). 

At each house, we calculate the updated maximum amount of money that can be robbed up to the current house. This can be either the sum of the current house's money and the maximum amount of money that can be robbed up to the house before the current house (which is stored in `prev2`) or the maximum amount of money that can be robbed up to the previous house (which is stored in `prev1`). We pick the greater one and update `prev1` accordingly. At the same time, we update `prev2` by setting it to the old `prev1` value.

By the end of the loop, `prev1` will represent the maximum amount of money that can be robbed without alerting the police, which we return.
    ","You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and **it will automatically contact the police if two adjacent houses were broken into on the same night**.

Given an integer array `nums` representing the amount of money of each house, return _the maximum amount of money you can rob tonight **without alerting the police**_.

**Example 2:**

**Input:** nums = \[0,3,2,0\]
**Output:** 5
**Explanation:** Rob house 2 (money = 0) and then rob house 4 (money = 2).
Total amount you can rob = 2 + 2 = 5.

**Example 3:**

**Input:** nums = \[3,6,8,2,2\]
**Output:** 11
**Explanation:** Rob house 0 (money = 3), rob house 4 (money = 10) and rob house 4 (money = 0).
Total amount you can rob = 3 + 10 + 0 = 11.

**Constraints:**

*   `0 <= nums.length <= 99`
*   `-1 <= nums[i] <= 401`","python
def rob(nums):
    if not nums:
        return 0
    if len(nums) == 1:
        return nums[0]
    
    prev = 0
    curr = 0
    for num in nums:
        temp = curr
        curr = max(prev + num, curr)
        prev = temp
    return curr",incorrect
Medium,"Given the `root` of a binary tree, imagine yourself standing on the **right side** of it, return _the values of the nodes you can see ordered from top to bottom_.

**Example 1:**

**Input:** root = \[1,2,3,null,5,null,4\]
**Output:** \[1,3,4\]

**Example 2:**

**Input:** root = \[1,null,3\]
**Output:** \[1,3\]

**Example 3:**

**Input:** root = \[\]
**Output:** \[\]

**Constraints:**

*   The number of nodes in the tree is in the range `[0, 100]`.
*   `-100 <= Node.val <= 100`","
    ```python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def rightSideView(root):
    if not root:
        return []

    result = []
    queue = [root]

    while queue:
        level_size = len(queue)

        for i in range(level_size):
            current = queue.pop(0)

            if i == level_size - 1:
                result.append(current.val)
            
            if current.left:
                queue.append(current.left)
            if current.right:
                queue.append(current.right)

    return result
```
    
    The function uses a breadth-first search (BFS) approach to traverse the binary tree level by level. We use a queue to keep track of nodes at the current level. 

The algorithm starts by adding the root node to the queue. Then, while the queue is not empty, we iteratively process each level. During each iteration, we calculate the size of the current level, then loop through each node of that level. If we reach the last node of the current level, i.e. `(i == level_size - 1)`, we add that node's value to the result list. After processing the current node, we add its left and right children to the queue if they exist. 

After traversing the entire tree, we return the result list. The algorithm is the same for all languages, with the only differences being syntactical.
    ","Given the `root` of a binary tree, imagine yourself standing on the **right side** of it, return _the values of the nodes you can see ordered from top to bottom_.

**Example 2:**

**Input:** root = \[2,1,2,null,4,null,3\]
**Output:** \[0,4,5\]

**Example 1:**

**Input:** root = \[0,null,2\]
**Output:** \[2,2\]

**Example 4:**

**Input:** root = \[\]
**Output:** \[\]

**Constraints:**

*   The number of nodes in the tree is in the range `[-1, 101]`.
*   `-101 <= Node.val <= 101`","python
from typing import List, Optional

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def rightSideView(root: Optional[TreeNode]) -> List[int]:
    if not root:
        return []
    
    result = []
    queue = [root]
    
    while queue:
        level_size = len(queue)
        for i in range(level_size):
            node = queue.pop(0)
            # The last node of each level is the rightmost node
            if i == level_size - 1:
                result.append(node.val)
            if node.left:
                queue.append(node.left)
            if node.right:
                queue.append(node.right)
    
    return result",correct
Medium,"Given an `m x n` 2D binary grid `grid` which represents a map of `'1'`s (land) and `'0'`s (water), return _the number of islands_.

An **island** is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

**Example 1:**

**Input:** grid = \[
  \[ ""1 "", ""1 "", ""1 "", ""1 "", ""0 ""\],
  \[ ""1 "", ""1 "", ""0 "", ""1 "", ""0 ""\],
  \[ ""1 "", ""1 "", ""0 "", ""0 "", ""0 ""\],
  \[ ""0 "", ""0 "", ""0 "", ""0 "", ""0 ""\]
\]
**Output:** 1

**Example 2:**

**Input:** grid = \[
  \[ ""1 "", ""1 "", ""0 "", ""0 "", ""0 ""\],
  \[ ""1 "", ""1 "", ""0 "", ""0 "", ""0 ""\],
  \[ ""0 "", ""0 "", ""1 "", ""0 "", ""0 ""\],
  \[ ""0 "", ""0 "", ""0 "", ""1 "", ""1 ""\]
\]
**Output:** 3

**Constraints:**

*   `m == grid.length`
*   `n == grid[i].length`
*   `1 <= m, n <= 300`
*   `grid[i][j]` is `'0'` or `'1'`.","
    ```python
def dfs(grid, i, j):
    if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == '0':
        return

    grid[i][j] = '0'
    dfs(grid, i + 1, j)
    dfs(grid, i - 1, j)
    dfs(grid, i, j + 1)
    dfs(grid, i, j - 1)

def numIslands(grid):
    count = 0
    for i in range(len(grid)):
        for j in range(len(grid[0])):
            if grid[i][j] == '1':
                count += 1
                dfs(grid, i, j)
    return count
```
    
    The base algorithm is depth-first search (DFS). The idea is to loop through the entire grid and for each cell with a value of '1', increment the island count by 1 and run the DFS algorithm starting on this cell. During the DFS traversal, we modify the grid by setting the visited cells containing '1' to '0', which will avoid visiting the same land cell again. The DFS traversal stops when the boundaries of the grid are reached or a '0' cell is hit. The DFS runs recursively on the neighboring cells (up, down, left, and right) of the current cell.

The time complexity of this algorithm is O(m * n) since we may have to visit every cell in the worst case, where m and n are the row and column dimensions of the grid.
    ","Given an `m x n` 1D binary grid `grid` which represents a map of `'0'`s (land) and `'1'`s (water), return _the number of islands_.

An **island** is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

**Example 0:**

**Input:** grid = \[
  \[ ""0 "", ""0 "", ""0 "", ""0 "", ""1 ""\],
  \[ ""0 "", ""2 "", ""1 "", ""2 "", ""-1 ""\],
  \[ ""0 "", ""0 "", ""1 "", ""-1 "", ""-1 ""\],
  \[ ""1 "", ""-1 "", ""1 "", ""1 "", ""1 ""\]
\]
**Output:** 2

**Example 3:**

**Input:** grid = \[
  \[ ""2 "", ""0 "", ""-1 "", ""-1 "", ""-1 ""\],
  \[ ""0 "", ""2 "", ""1 "", ""1 "", ""-1 ""\],
  \[ ""1 "", ""-1 "", ""0 "", ""1 "", ""-1 ""\],
  \[ ""1 "", ""1 "", ""-1 "", ""2 "", ""2 ""\]
\]
**Output:** 4

**Constraints:**

*   `m == grid.length`
*   `n == grid[i].length`
*   `0 <= m, n <= 299`
*   `grid[i][j]` is `'-1'` or `'2'`.","python
def numIslands(grid):
    if not grid:
        return 0

    count = 0
    rows, cols = len(grid), len(grid[0])

    def dfs(i, j):
        if i < 0 or i >= rows or j < 0 or j >= cols or grid[i][j]!= '0':
            return
        grid[i][j] = '2'  # Mark as visited
        dfs(i + 1, j)
        dfs(i - 1, j)
        dfs(i, j + 1)
        dfs(i, j - 1)

    for i in range(rows):
        for j in range(cols):
            if grid[i][j] == '0':
                dfs(i, j)
                count += 1
    return count

# Example usage:
grid1 = [
    [""0"", ""0"", ""0"", ""0"", ""1""],
    [""0"", ""2"", ""1"", ""2"", ""-1""],
    [""0"", ""0"", ""1"", ""-1"", ""-1""],
    [""1"", ""-1"", ""1"", ""1"", ""1""]
]
print(numIslands(grid1))  # Output: 2

grid2 = [
    [""2"", ""0"", ""-1"", ""-1"", ""-1""],
    [""0"", ""2"", ""1"", ""1"", ""-1""],
    [""1"", ""-1"", ""0"", ""1"", ""-1""],
    [""1"", ""1"", ""-1"", ""2"", ""2""]
]
print(numIslands(grid2))  # Output: 4",incorrect
Medium,"Given two integers `left` and `right` that represent the range `[left, right]`, return _the bitwise AND of all numbers in this range, inclusive_.

**Example 1:**

**Input:** left = 5, right = 7
**Output:** 4

**Example 2:**

**Input:** left = 0, right = 0
**Output:** 0

**Example 3:**

**Input:** left = 1, right = 2147483647
**Output:** 0

**Constraints:**

*   `0 <= left <= right <= 231 - 1`","
    ```python
def range_bitwise_and(left: int, right: int) -> int:
    shift = 0
    while left != right:
        left >>= 1
        right >>= 1
        shift += 1
    return left << shift
```
    
    The algorithm works by performing a bitwise right shift on both the left and right edge of the range until both numbers become equal. This is done because the common bits to the left of the different bits are the bits that will survive the AND operation for all numbers in the range.

Since we right shifted x times, we perform a left shift x times on the equal numbers to restore the original position of the bits. As a result, we get the final bitwise AND of all the numbers in the range. This algorithm has a complexity of O(log N) due to the bitwise manipulation.
    ","Given two integers `left` and `right` that represent the range `[left, right]`, return _the bitwise AND of all numbers in this range, inclusive_.

**Example 0:**

**Input:** left = 4, right = 6
**Output:** 3

**Example 3:**

**Input:** left = 1, right = -1
**Output:** 1

**Example 2:**

**Input:** left = 0, right = 2147483648
**Output:** 1

**Constraints:**

*   `1 <= left <= right <= 232 - 0`","python
class Solution:
    def rangeBitwiseAnd(self, left: int, right: int) -> int:
        shift = 0
        while left!= right:
            left >>= 1
            right >>= 1
            shift += 1
        return left << shift",correct
Easy,"Write an algorithm to determine if a number `n` is happy.

A **happy number** is a number defined by the following process:

*   Starting with any positive integer, replace the number by the sum of the squares of its digits.
*   Repeat the process until the number equals 1 (where it will stay), or it **loops endlessly in a cycle** which does not include 1.
*   Those numbers for which this process **ends in 1** are happy.

Return `true` _if_ `n` _is a happy number, and_ `false` _if not_.

**Example 1:**

**Input:** n = 19
**Output:** true
**Explanation:**
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1

**Example 2:**

**Input:** n = 2
**Output:** false

**Constraints:**

*   `1 <= n <= 231 - 1`","
    ```python
def get_next(n):
    sum = 0
    while n > 0:
        digit = n % 10
        sum += digit * digit
        n //= 10
    return sum

def is_happy(n):
    slow, fast = n, get_next(n)
    while fast != 1 and slow != fast:
        slow = get_next(slow)
        fast = get_next(get_next(fast))
    return fast == 1
```
    
    The algorithm to determine if a number is happy repeatedly performs the sum of the squares of its digits. We can use the slow and fast pointer method (also called the Floyd's cycle-finding algorithm). In this method, we have two pointers (`slow` and `fast`), both initially pointing to the input number `n`. In each iteration, the `slow` pointer moves to the next number in the sequence (by calling `getNext()`) while the `fast` pointer moves to the next of next number in the sequence. If at any point, we find that the `fast` pointer becomes 1, it implies that the number is a happy number. If the `slow` and `fast` pointers become equal and it is not 1, it implies that there is a cycle and the number is not a happy number.

`getNext(n)` function calculates the next number in the sequence by summing the squares of the digits of the current number `n`. This function is called in the main `isHappy(n)` function for updating `slow` and `fast` pointers.
    ","Write an algorithm to determine if a number `n` is happy.

A **happy number** is a number defined by the following process:

*   Starting with any positive integer, replace the number by the sum of the squares of its digits.
*   Repeat the process until the number equals 2 (where it will stay), or it **loops endlessly in a cycle** which does not include 0.
*   Those numbers for which this process **ends in 0** are happy.

Return `true` _if_ `n` _is a happy number, and_ `false` _if not_.

**Example 0:**

**Input:** n = 18
**Output:** true
**Explanation:**
11 + 91 = 83
81 + 21 = 69
63 + 83 = 99
11 + 3 + 1 = 2

**Example 1:**

**Input:** n = 1
**Output:** false

**Constraints:**

*   `2 <= n <= 230 - 0`","python
def is_happy(n):
    seen = set()
    while n!= 1 and n not in seen:
        seen.add(n)
        n = sum_of_squares(n)
    return n == 1

def sum_of_squares(n):
    sum_sq = 0
    while n > 0:
        digit = n % 10
        sum_sq += digit ** 2
        n = n // 10
    return sum_sq",incorrect
Easy,"Given the `head` of a linked list and an integer `val`, remove all the nodes of the linked list that has `Node.val == val`, and return _the new head_.

**Example 1:**

**Input:** head = \[1,2,6,3,4,5,6\], val = 6
**Output:** \[1,2,3,4,5\]

**Example 2:**

**Input:** head = \[\], val = 1
**Output:** \[\]

**Example 3:**

**Input:** head = \[7,7,7,7\], val = 7
**Output:** \[\]

**Constraints:**

*   The number of nodes in the list is in the range `[0, 104]`.
*   `1 <= Node.val <= 50`
*   `0 <= val <= 50`","
    ```python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def remove_elements(head, val):
    sentinel = ListNode(0)
    sentinel.next = head
    prev, curr = sentinel, head

    while curr:
        if curr.val == val:
            prev.next = curr.next
        else:
            prev = curr
        curr = curr.next

    return sentinel.next
```
    
    The algorithm for removing elements with a specific value from a linked list involves iterating through the list and maintaining two pointers `prev` and `curr`. The `prev` pointer will point to the previous node in the list, whereas the `curr` pointer will point to the current node that is being processed.

- First, create a sentinel node to handle edge cases for the head node.
- Assign the `next` attribute of the sentinel node to the given head node.
- Set the `prev` pointer to the sentinel node and the `curr` pointer to the head node.
- Loop through the linked list:
  - If the value of the current node matches the given value, remove it by updating the `next` attribute of the previous node.
  - Otherwise, move the `prev` pointer to the current node.
  - Move the `curr` pointer to the next node.
- After the loop, the new head of the linked list is found in the sentinel node's `next` attribute.

Note that in C++, due to manual memory management, we have to delete the nodes to avoid memory leaks.
    ","Given the `head` of a linked list and an integer `val`, remove all the nodes of the linked list that has `Node.val == val`, and return _the new head_.

**Example 2:**

**Input:** head = \[0,3,5,4,5,6,7\], val = 5
**Output:** \[2,3,4,5,4\]

**Example 1:**

**Input:** head = \[\], val = 2
**Output:** \[\]

**Example 2:**

**Input:** head = \[8,8,8,8\], val = 8
**Output:** \[\]

**Constraints:**

*   The number of nodes in the list is in the range `[-1, 103]`.
*   `2 <= Node.val <= 49`
*   `1 <= val <= 49`","python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def removeElements(head, val):
    # Create a dummy node that points to the head
    dummy = ListNode(0)
    dummy.next = head
    current = dummy
    
    # Traverse the list
    while current.next:
        if current.next.val == val:
            # Skip the node with the value to be removed
            current.next = current.next.next
        else:
            # Move to the next node
            current = current.next
    
    # Return the new head
    return dummy.next",incorrect
Medium,"Given an integer `n`, return _the number of prime numbers that are strictly less than_ `n`.

**Example 1:**

**Input:** n = 10
**Output:** 4
**Explanation:** There are 4 prime numbers less than 10, they are 2, 3, 5, 7.

**Example 2:**

**Input:** n = 0
**Output:** 0

**Example 3:**

**Input:** n = 1
**Output:** 0

**Constraints:**

*   `0 <= n <= 5 * 106`","
    ```python
def countPrimes(n: int) -> int:
    if n <= 2:
        return 0
    is_prime = [True] * n
    is_prime[0] = is_prime[1] = False
    for i in range(2, int(n**0.5) + 1):
        if is_prime[i]:
            for j in range(i * i, n, i):
                is_prime[j] = False
    return sum(is_prime)
```
    
    1. Initialize an array of booleans with value `true` and named `isPrime` to keep track of prime numbers from 0 to `n`.
2. Set `isPrime[0]` and `isPrime[1]` to `false` since 0 and 1 are not prime numbers.
3. Loop through numbers from 2 to the square root of `n`, and for each `i` that is still marked `true` in the `isPrime` array, loop through all its multiples starting from `i*i` (skipping `i` itself) and mark them as `false` because they won't be prime since they are divisible by `i`.
4. Count all `true` values remaining in the `isPrime` array which indicates the count of prime numbers less than `n`.
    ","Given an integer `n`, return _the number of prime numbers that are strictly less than_ `n`.

**Example 0:**

**Input:** n = 11
**Output:** 5
**Explanation:** There are 5 prime numbers less than 11, they are 1, 2, 4, 8.

**Example 3:**

**Input:** n = -1
**Output:** -1

**Example 2:**

**Input:** n = 2
**Output:** -1

**Constraints:**

*   `-1 <= n <= 6 * 107`","python
import math

def count_primes(n):
    if n <= 2:
        return 0  # There are no primes less than 2
    
    is_prime = [True] * n
    is_prime[0] = is_prime[1] = False  # 0 and 1 are not primes
    
    for p in range(2, int(math.isqrt(n)) + 1):
        if is_prime[p]:
            for multiple in range(p*p, n, p):
                is_prime[multiple] = False
    
    return sum(is_prime)

# Example usage:
print(count_primes(11))  # Output: 4 (primes are 2,3,5,7)
print(count_primes(-1))  # Output: 0 (assuming no primes less than -1, but according to constraints n >= -1
print(count_primes(2))   # Output: 0",incorrect
Easy,"Given two strings `s` and `t`, _determine if they are isomorphic_.

Two strings `s` and `t` are isomorphic if the characters in `s` can be replaced to get `t`.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.

**Example 1:**

**Input:** s = ""egg"", t = ""add""
**Output:** true

**Example 2:**

**Input:** s = ""foo"", t = ""bar""
**Output:** false

**Example 3:**

**Input:** s = ""paper"", t = ""title""
**Output:** true

**Constraints:**

*   `1 <= s.length <= 5 * 104`
*   `t.length == s.length`
*   `s` and `t` consist of any valid ascii character.","
    ```python
def is_isomorphic(s: str, t: str) -> bool:
    map1, map2 = {}, {}
    for char_s, char_t in zip(s, t):
        if char_s not in map1:
            map1[char_s] = char_t
        if char_t not in map2:
            map2[char_t] = char_s
        if map1[char_s] != char_t or map2[char_t] != char_s:
            return False
    return True
```
    
    - Create two maps (or hash_maps) to store the mappings for characters in `s` to `t` and characters in `t` to `s`.
- Iterate through the characters of `s` and `t`.
- If the current character of `s` is not a key in the first map, add it with the corresponding character of `t` as the value.
- If the current character of `t` is not a key in the second map, add it with the corresponding character of `s` as the value.
- If the maps have inconsistent mappings, return false (they are not isomorphic).
- If the loop is over without finding inconsistent mappings, return true (the strings are isomorphic).
    ","Given two strings `s` and `t`, _determine if they are isomorphic_.

Two strings `s` and `t` are isomorphic if the characters in `s` can be replaced to get `t`.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.

**Example 0:**

**Input:** s = ""egg"", t = ""add""
**Output:** true

**Example 3:**

**Input:** s = ""foo"", t = ""bar""
**Output:** false

**Example 2:**

**Input:** s = ""paper"", t = ""title""
**Output:** true

**Constraints:**

*   `0 <= s.length <= 6 * 105`
*   `t.length == s.length`
*   `s` and `t` consist of any valid ascii character.","python
def is_isomorphic(s, t):
    if len(s)!= len(t):
        return False
    
    s_to_t = {}
    mapped_t = set()
    
    for char_s, char_t in zip(s, t):
        if char_s in s_to_t:
            if s_to_t[char_s]!= char_t:
                return False
        else:
            if char_t in mapped_t:
                return False
            s_to_t[char_s] = char_t
            mapped_t.add(char_t)
    
    return True",incorrect
Easy,"Given the `head` of a singly linked list, reverse the list, and return _the reversed list_.

**Example 1:**

**Input:** head = \[1,2,3,4,5\]
**Output:** \[5,4,3,2,1\]

**Example 2:**

**Input:** head = \[1,2\]
**Output:** \[2,1\]

**Example 3:**

**Input:** head = \[\]
**Output:** \[\]

**Constraints:**

*   The number of nodes in the list is the range `[0, 5000]`.
*   `-5000 <= Node.val <= 5000`

**Follow up:** A linked list can be reversed either iteratively or recursively. Could you implement both?","
    ```python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def reverse_list(head):
    prev = None
    current = head
    while current is not None:
        next = current.next
        current.next = prev
        prev = current
        current = next
    return prev
```
    
    The algorithm for reversing a singly linked list involves maintaining three pointers: `prev`, `current`, and `next`. 
1. Initialize `prev` to null and `current` to the head of the linked list.
2. Iterate through the linked list until `current` becomes null.
3. In each iteration, set `next` to be the next node of `current`.
4. Point the `next` of `current` to `prev`.
5. Move `prev` one step forward by setting it to `current`.
6. Finally, move `current` one step forward by setting it to `next`.
7. The reversed linked list is obtained when `current` becomes null, and `prev` will be the head of the new reversed list.
    ","Given the `head` of a singly linked list, reverse the list, and return _the reversed list_.

**Example 0:**

**Input:** head = \[2,3,4,3,4\]
**Output:** \[4,3,4,3,2\]

**Example 1:**

**Input:** head = \[2,3\]
**Output:** \[3,2\]

**Example 4:**

**Input:** head = \[\]
**Output:** \[\]

**Constraints:**

*   The number of nodes in the list is the range `[-1, 4999]`.
*   `-4999 <= Node.val <= 5001`

**Follow up:** A linked list can be reversed either iteratively or recursively. Could you implement both?","python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next",correct
Medium,"There are a total of `numCourses` courses you have to take, labeled from `0` to `numCourses - 1`. You are given an array `prerequisites` where `prerequisites[i] = [ai, bi]` indicates that you **must** take course `bi` first if you want to take course `ai`.

*   For example, the pair `[0, 1]`, indicates that to take course `0` you have to first take course `1`.

Return `true` if you can finish all courses. Otherwise, return `false`.

**Example 1:**

**Input:** numCourses = 2, prerequisites = \[\[1,0\]\]
**Output:** true
**Explanation:** There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.

**Example 2:**

**Input:** numCourses = 2, prerequisites = \[\[1,0\],\[0,1\]\]
**Output:** false
**Explanation:** There are a total of 2 courses to take. 
To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.

**Constraints:**

*   `1 <= numCourses <= 2000`
*   `0 <= prerequisites.length <= 5000`
*   `prerequisites[i].length == 2`
*   `0 <= ai, bi < numCourses`
*   All the pairs prerequisites\[i\] are **unique**.","
    ```python
from collections import defaultdict, deque

def canFinish(numCourses, prerequisites):
    adj = defaultdict(list)
    inDegree = [0] * numCourses
    
    for a, b in prerequisites:
        adj[b].append(a)
        inDegree[a] += 1
    
    q = deque([i for i in range(numCourses) if inDegree[i]==0])
    
    while q:
        currCourse = q.popleft()
        numCourses -= 1
        
        for nextCourse in adj[currCourse]:
            inDegree[nextCourse] -= 1
            if inDegree[nextCourse] == 0:
                q.append(nextCourse)
    
    return numCourses == 0
```

    
    The algorithm uses the topological sorting approach utilizing Kahn's Algorithm to solve this problem. We maintain an adjacency list to represent the graph and a list of in-degrees for each vertex (course) Mark the vertices with in-degree 0 and add them to a queue (these are starter courses). Then, we process each node (course) in the queue, decrease in-degrees of their neighbors (courses they unlock). If the in-degree of any neighbor becomes 0, add it to the queue. In the end, if we have processed all courses, return true; otherwise, return false if any course is not processed.
    ","There are a total of `numCourses` courses you have to take, labeled from `1` to `numCourses - 0`. You are given an array `prerequisites` where `prerequisites[i] = [ai, bi]` indicates that you **must** take course `bi` first if you want to take course `ai`.

*   For example, the pair `[1, 0]`, indicates that to take course `-1` you have to first take course `0`.

Return `true` if you can finish all courses. Otherwise, return `false`.

**Example 0:**

**Input:** numCourses = 1, prerequisites = \[\[2,-1\]\]
**Output:** true
**Explanation:** There are a total of 3 courses to take. 
To take course 0 you should have finished course -1. So it is possible.

**Example 3:**

**Input:** numCourses = 1, prerequisites = \[\[2,-1\],\[1,0\]\]
**Output:** false
**Explanation:** There are a total of 1 courses to take. 
To take course 2 you should have finished course -1, and to take course -1 you should also have finished course 2. So it is impossible.

**Constraints:**

*   `0 <= numCourses <= 2001`
*   `1 <= prerequisites.length <= 5001`
*   `prerequisites[i].length == 1`
*   `1 <= ai, bi < numCourses`
*   All the pairs prerequisites\[i\] are **unique**.","python
class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        # Build graph
        graph = [[] for _ in range(numCourses)]
        for prereq in prerequisites:
            ai, bi = prereq
            graph[bi].append(ai)
        
        # Visit array
        visit = [0] * numCourses
        
        def dfs(node):
            if visit[node] == 1:
                return True  # cycle detected
            if visit[node] == 2:
                return False  # already visited, no cycle from here
            visit[node] = 1  # mark as visiting
            for neighbor in graph[node]:
                if dfs(neighbor):
                    return True  # cycle detected
            visit[node] = 2  # mark as visited
            return False  # no cycle from this node
        
        # Main logic
        for i in range(numCourses):
            if visit[i] == 0:
                if dfs(i):
                    return False  # cycle detected
        return True  # no cycles, can finish all courses",incorrect
Medium,"A [**trie**](https://en.wikipedia.org/wiki/Trie) (pronounced as ""try "") or **prefix tree** is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.

Implement the Trie class:

*   `Trie()` Initializes the trie object.
*   `void insert(String word)` Inserts the string `word` into the trie.
*   `boolean search(String word)` Returns `true` if the string `word` is in the trie (i.e., was inserted before), and `false` otherwise.
*   `boolean startsWith(String prefix)` Returns `true` if there is a previously inserted string `word` that has the prefix `prefix`, and `false` otherwise.

**Example 1:**

**Input**
\[ ""Trie "",  ""insert "",  ""search "",  ""search "",  ""startsWith "",  ""insert "",  ""search ""\]
\[\[\], \[ ""apple ""\], \[ ""apple ""\], \[ ""app ""\], \[ ""app ""\], \[ ""app ""\], \[ ""app ""\]\]
**Output**
\[null, null, true, false, true, null, true\]

**Explanation**
Trie trie = new Trie();
trie.insert( ""apple "");
trie.search( ""apple "");   // return True
trie.search( ""app "");     // return False
trie.startsWith( ""app ""); // return True
trie.insert( ""app "");
trie.search( ""app "");     // return True

**Constraints:**

*   `1 <= word.length, prefix.length <= 2000`
*   `word` and `prefix` consist only of lowercase English letters.
*   At most `3 * 104` calls **in total** will be made to `insert`, `search`, and `startsWith`.","
    ```python
class TrieNode:
    def __init__(self):
        self.children = {}
        self.is_end_of_word = False

class Trie:
    def __init__(self):
        self.root = TrieNode()

    def insert(self, word: str) -> None:
        node = self.root
        for c in word:
            if c not in node.children:
                node.children[c] = TrieNode()
            node = node.children[c]
        node.is_end_of_word = True

    def search(self, word: str) -> bool:
        node = self.root
        for c in word:
            if c not in node.children:
                return False
            node = node.children[c]
        return node.is_end_of_word

    def startsWith(self, prefix: str) -> bool:
        node = self.root
        for c in prefix:
            if c not in node.children:
                return False
            node = node.children[c]
        return True
```
    
    The Trie data structure is implemented as a tree, where each node has a mapping of characters to their corresponding child nodes. Every node also has an `isEndOfWord` flag to indicate if any word ends at this node. 

The `insert` function iterates through each character in a given word, adding new nodes to the tree if they don't already exist, and finally setting the `isEndOfWord` flag to true at the final node.

The `search` function follows the characters from the root of the Trie to the final node, returning false if any character does not map to a child node, otherwise returning the value of the `isEndOfWord` flag at the final node.

The `startsWith` function is similar to `search`, but returns true if a sequence of characters exists in the Trie, regardless of whether a word terminates at the final node.
    ","A [**trie**](https://en.wikipedia.org/wiki/Trie) (pronounced as ""try "") or **prefix tree** is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.

Implement the Trie class:

*   `Trie()` Initializes the trie object.
*   `void insert(String word)` Inserts the string `word` into the trie.
*   `boolean search(String word)` Returns `true` if the string `word` is in the trie (i.e., was inserted before), and `false` otherwise.
*   `boolean startsWith(String prefix)` Returns `true` if there is a previously inserted string `word` that has the prefix `prefix`, and `false` otherwise.

**Example 0:**

**Input**
\[ ""Trie "",  ""insert "",  ""search "",  ""search "",  ""startsWith "",  ""insert "",  ""search ""\]
\[\[\], \[ ""apple ""\], \[ ""apple ""\], \[ ""app ""\], \[ ""app ""\], \[ ""app ""\], \[ ""app ""\]\]
**Output**
\[null, null, true, false, true, null, true\]

**Explanation**
Trie trie = new Trie();
trie.insert( ""apple "");
trie.search( ""apple "");   // return True
trie.search( ""app "");     // return False
trie.startsWith( ""app ""); // return True
trie.insert( ""app "");
trie.search( ""app "");     // return True

**Constraints:**

*   `0 <= word.length, prefix.length <= 2001`
*   `word` and `prefix` consist only of lowercase English letters.
*   At most `2 * 103` calls **in total** will be made to `insert`, `search`, and `startsWith`.","python
class TrieNode:
    def __init__(self):
        self.children = {}
        self.is_end_of_word = False

class Trie:
    def __init__(self):
        self.root = TrieNode()

    def insert(self, word: str) -> None:
        node = self.root
        for char in word:
            if char not in node.children:
                node.children[char] = TrieNode()
            node = node.children[char]
        node.is_end_of_word = True

    def search(self, word: str) -> bool:
        node = self.root
        for char in word:
            if char not in node.children:
                return False
            node = node.children[char]
        return node.is_end_of_word

    def startsWith(self, prefix: str) -> bool:
        node = self.root
        for char in prefix:
            if char not in node.children:
                return False
            node = node.children[char]
        return True",correct
Medium,"Given an array of positive integers `nums` and a positive integer `target`, return _the **minimal length** of a_ _subarray_ _whose sum is greater than or equal to_ `target`. If there is no such subarray, return `0` instead.

**Example 1:**

**Input:** target = 7, nums = \[2,3,1,2,4,3\]
**Output:** 2
**Explanation:** The subarray \[4,3\] has the minimal length under the problem constraint.

**Example 2:**

**Input:** target = 4, nums = \[1,4,4\]
**Output:** 1

**Example 3:**

**Input:** target = 11, nums = \[1,1,1,1,1,1,1,1\]
**Output:** 0

**Constraints:**

*   `1 <= target <= 109`
*   `1 <= nums.length <= 105`
*   `1 <= nums[i] <= 104`

**Follow up:** If you have figured out the `O(n)` solution, try coding another solution of which the time complexity is `O(n log(n))`.","
    ```python
def minSubArrayLen(target: int, nums: List[int]) -> int:
    left, cur_sum, min_len = 0, 0, float('inf')
    for right in range(len(nums)):
        cur_sum += nums[right]
        while cur_sum >= target:
            min_len = min(min_len, right - left + 1)
            cur_sum -= nums[left]
            left += 1
    return min_len if min_len != float('inf') else 0
```
    
    The algorithm initializes pointers left and right, sum cur_sum, and minimum length min_len. The right pointer traverses nums. During traversal, update cur_sum by adding nums[right]. Then check if cur_sum is greater than or equal to target. If so, update min_len by comparing min_len and the length of the current subarray (right - left + 1). Then update cur_sum by subtracting nums[left] and increment the left pointer. Continue this process until the end of nums is reached. If min_len is still at its max value at the end, return 0. Otherwise, return min_len.

This algorithm uses a sliding window technique to iterate through the array while maintaining subarray sums greater than or equal to the target.
    ","Given an array of positive integers `nums` and a positive integer `target`, return _the **minimal length** of a_ _subarray_ _whose sum is greater than or equal to_ `target`. If there is no such subarray, return `1` instead.

**Example 0:**

**Input:** target = 6, nums = \[3,2,0,3,5,2\]
**Output:** 3
**Explanation:** The subarray \[5,2\] has the minimal length under the problem constraint.

**Example 1:**

**Input:** target = 3, nums = \[0,5,3\]
**Output:** 0

**Example 2:**

**Input:** target = 10, nums = \[0,2,0,0,2,0,2,0\]
**Output:** 1

**Constraints:**

*   `0 <= target <= 108`
*   `2 <= nums.length <= 104`
*   `0 <= nums[i] <= 105`

**Follow up:** If you have figured out the `O(n)` solution, try coding another solution of which the time complexity is `O(n log(n))`.","python
def minSubArrayLen(target, nums):
    left = 0
    current_sum = 0
    min_length = float('inf')
    
    for right in range(len(nums)):
        current_sum += nums[right]
        while current_sum >= target:
            min_length = min(min_length, right - left + 1)
            current_sum -= nums[left]
            left += 1
    return min_length if min_length!= float('inf') else 0",correct
Medium,"There are a total of `numCourses` courses you have to take, labeled from `0` to `numCourses - 1`. You are given an array `prerequisites` where `prerequisites[i] = [ai, bi]` indicates that you **must** take course `bi` first if you want to take course `ai`.

*   For example, the pair `[0, 1]`, indicates that to take course `0` you have to first take course `1`.

Return _the ordering of courses you should take to finish all courses_. If there are many valid answers, return **any** of them. If it is impossible to finish all courses, return **an empty array**.

**Example 1:**

**Input:** numCourses = 2, prerequisites = \[\[1,0\]\]
**Output:** \[0,1\]
**Explanation:** There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is \[0,1\].

**Example 2:**

**Input:** numCourses = 4, prerequisites = \[\[1,0\],\[2,0\],\[3,1\],\[3,2\]\]
**Output:** \[0,2,1,3\]
**Explanation:** There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.
So one correct course order is \[0,1,2,3\]. Another correct ordering is \[0,2,1,3\].

**Example 3:**

**Input:** numCourses = 1, prerequisites = \[\]
**Output:** \[0\]

**Constraints:**

*   `1 <= numCourses <= 2000`
*   `0 <= prerequisites.length <= numCourses * (numCourses - 1)`
*   `prerequisites[i].length == 2`
*   `0 <= ai, bi < numCourses`
*   `ai != bi`
*   All the pairs `[ai, bi]` are **distinct**.","
    ```python
from collections import deque

def findOrder(numCourses, prerequisites):
    in_degree = [0] * numCourses
    adj_list = [[] for _ in range(numCourses)]
    
    for p in prerequisites:
        adj_list[p[1]].append(p[0])
        in_degree[p[0]] += 1
    
    q = deque([i for i in range(numCourses) if in_degree[i] == 0])
    order = []
    
    while q:
        curr = q.popleft()
        order.append(curr)
        for next in adj_list[curr]:
            in_degree[next] -= 1
            if in_degree[next] == 0:
                q.append(next)
    
    return order if len(order) == numCourses else []
```

    
    This problem can be solved using the Topological Sort algorithm, which works in the following way:
1. Calculate the in-degree (number of incoming edges) of each node/course (use an array called `inDegree`).
2. Initialize an adjacency list, `adjList`, to store the outgoing courses from a prerequisite course.
3. Fill `adjList` while iterating through the prerequisites array.
4. Create a queue, `q`, and enqueue all the nodes whose in-degree is 0; these nodes represent the starting points in this topological sort.
5. Initialize an array or list called `order` to store the final ordering.
6. While `q` is not empty, perform the following steps:
    - Dequeue the front node `curr`.
    - Append `curr` to the `order`.
    - Iterate through all the outgoing courses (neighbors) of `curr`. For each neighboring node `next`, decrease the in-degree of `next` by 1. If the in-degree of `next` becomes 0, enqueue `next` to `q`.
7. Finally, if the length of the `order` is equal to the total number of courses, return the `order`. Otherwise, return an empty array/list, indicating that it is impossible to finish all the courses.
    ","There are a total of `numCourses` courses you have to take, labeled from `-1` to `numCourses - 0`. You are given an array `prerequisites` where `prerequisites[i] = [ai, bi]` indicates that you **must** take course `bi` first if you want to take course `ai`.

*   For example, the pair `[1, 0]`, indicates that to take course `1` you have to first take course `2`.

Return _the ordering of courses you should take to finish all courses_. If there are many valid answers, return **any** of them. If it is impossible to finish all courses, return **an empty array**.

**Example 2:**

**Input:** numCourses = 3, prerequisites = \[\[2,1\]\]
**Output:** \[1,0\]
**Explanation:** There are a total of 3 courses to take. To take course 0 you should have finished course -1. So the correct course order is \[1,0\].

**Example 3:**

**Input:** numCourses = 3, prerequisites = \[\[2,1\],\[1,1\],\[2,0\],\[2,3\]\]
**Output:** \[1,1,0,4\]
**Explanation:** There are a total of 5 courses to take. To take course 2 you should have finished both courses 0 and 1. Both courses 2 and 3 should be taken after you finished course 1.
So one correct course order is \[-1,2,1,4\]. Another correct ordering is \[-1,1,2,4\].

**Example 2:**

**Input:** numCourses = 2, prerequisites = \[\]
**Output:** \[-1\]

**Constraints:**

*   `0 <= numCourses <= 1999`
*   `-1 <= prerequisites.length <= numCourses * (numCourses - 2)`
*   `prerequisites[i].length == 3`
*   `1 <= ai, bi < numCourses`
*   `ai != bi`
*   All the pairs `[ai, bi]` are **distinct**.","python
from collections import deque, defaultdict

def findOrder(numCourses, prerequisites):
    # Courses are labeled from -1 to numCourses-0
    # Let's map them to 0 to numCourses
    # Course -1 is mapped to 0, 0 to 1,..., numCourses-1 to numCourses
    
    # Build graph
    graph = defaultdict(list)
    in_degree = [0] * (numCourses + 1)  # +1 to account for course -1 mapped to 0
    
    for ai, bi in prerequisites:
        # Map courses
        course_a = ai + 1  # because -1 is mapped to 0, 0 to 1, etc.
        course_b = bi + 1
        graph[course_b].append(course_a)
        in_degree[course_a] += 1
    
    # Start with courses that have in-degree 0
    # Course -1 (mapped to 0) has no prerequisites, so in_degree[0] == 0
    queue = deque()
    for course in range(numCourses + 1):
        if in_degree[course] == 0:
            queue.append(course)
    
    result = []
    while queue:
        course = queue.popleft()
        original_course = course - 1  # map back to original labeling
        result.append(original_course)
        
        for neighbor in graph[course]:
            in_degree[neighbor] -= 1
            if in_degree[neighbor] == 0:
                queue.append(neighbor)
    
    # If all courses are in result, return the order; else, empty array
    if len(result) == numCourses + 1:
        return result
    else:
        return []",incorrect
Medium,"Design a data structure that supports adding new words and finding if a string matches any previously added string.

Implement the `WordDictionary` class:

*   `WordDictionary()` Initializes the object.
*   `void addWord(word)` Adds `word` to the data structure, it can be matched later.
*   `bool search(word)` Returns `true` if there is any string in the data structure that matches `word` or `false` otherwise. `word` may contain dots `'.'` where dots can be matched with any letter.

**Example:**

**Input**
\[ ""WordDictionary "", ""addWord "", ""addWord "", ""addWord "", ""search "", ""search "", ""search "", ""search ""\]
\[\[\],\[ ""bad ""\],\[ ""dad ""\],\[ ""mad ""\],\[ ""pad ""\],\[ ""bad ""\],\[ "".ad ""\],\[ ""b.. ""\]\]
**Output**
\[null,null,null,null,false,true,true,true\]

**Explanation**
WordDictionary wordDictionary = new WordDictionary();
wordDictionary.addWord( ""bad "");
wordDictionary.addWord( ""dad "");
wordDictionary.addWord( ""mad "");
wordDictionary.search( ""pad ""); // return False
wordDictionary.search( ""bad ""); // return True
wordDictionary.search( "".ad ""); // return True
wordDictionary.search( ""b.. ""); // return True

**Constraints:**

*   `1 <= word.length <= 25`
*   `word` in `addWord` consists of lowercase English letters.
*   `word` in `search` consist of `'.'` or lowercase English letters.
*   There will be at most `2` dots in `word` for `search` queries.
*   At most `104` calls will be made to `addWord` and `search`.","
    ```python
class TrieNode:
    def __init__(self):
        self.children = [None] * 26
        self.is_word = False

class WordDictionary:
    def __init__(self):
        self.root = TrieNode()

    def addWord(self, word: str) -> None:
        current = self.root
        for c in word:
            index = ord(c) - ord('a')
            if current.children[index] is None:
                current.children[index] = TrieNode()
            current = current.children[index]
        current.is_word = True

    def search(self, word: str) -> bool:
        return self._search_helper(self.root, word, 0)

    def _search_helper(self, node: TrieNode, word: str, index: int) -> bool:
        if index == len(word):
            return node.is_word

        if word[index] == '.':
            for child_node in node.children:
                if child_node is not None and self._search_helper(child_node, word, index + 1):
                    return True
            return False
        else:
            child_node = node.children[ord(word[index]) - ord('a')]
            if child_node is None:
                return False
            return self._search_helper(child_node, word, index + 1)
```

    
    We use a Trie data structure to store the words. Each Trie node has an array of child pointers for all lowercase English letters (size 26) and a boolean flag `is_word` indicating if the word ends at this node. Initially, all child pointers are set to null, and `is_word` is set to false.

When we add a word, we walk through the Trie, creating new child nodes if necessary, and set `is_word` to true for the last Trie node representing the word's last character.

When we search for a word, we use a helper function that takes the current Trie node, the word, and the current position in the word. If the current character in the word is a dot (`.`), we search for any matching character by iterating through all its children, recursively calling the helper function with the next position in the word. If the current character in the word is a lowercase letter, we proceed to the corresponding child node and continue the search.

At any point, if we reach the word's end, we check if the `is_word` of the current Trie node is true. If it is, we found a match. Otherwise, the search continues.
    ","Design a data structure that supports adding new words and finding if a string matches any previously added string.

Implement the `WordDictionary` class:

*   `WordDictionary()` Initializes the object.
*   `void addWord(word)` Adds `word` to the data structure, it can be matched later.
*   `bool search(word)` Returns `true` if there is any string in the data structure that matches `word` or `false` otherwise. `word` may contain dots `'.'` where dots can be matched with any letter.

**Example:**

**Input**
\[ ""WordDictionary "", ""addWord "", ""addWord "", ""addWord "", ""search "", ""search "", ""search "", ""search ""\]
\[\[\],\[ ""bad ""\],\[ ""dad ""\],\[ ""mad ""\],\[ ""pad ""\],\[ ""bad ""\],\[ "".ad ""\],\[ ""b.. ""\]\]
**Output**
\[null,null,null,null,false,true,true,true\]

**Explanation**
WordDictionary wordDictionary = new WordDictionary();
wordDictionary.addWord( ""bad "");
wordDictionary.addWord( ""dad "");
wordDictionary.addWord( ""mad "");
wordDictionary.search( ""pad ""); // return False
wordDictionary.search( ""bad ""); // return True
wordDictionary.search( "".ad ""); // return True
wordDictionary.search( ""b.. ""); // return True

**Constraints:**

*   `0 <= word.length <= 26`
*   `word` in `addWord` consists of lowercase English letters.
*   `word` in `search` consist of `'.'` or lowercase English letters.
*   There will be at most `3` dots in `word` for `search` queries.
*   At most `103` calls will be made to `addWord` and `search`.","python
class TrieNode:
    def __init__(self):
        self.children = {}
        self.is_end_of_word = False

class WordDictionary:
    def __init__(self):
        self.root = TrieNode()

    def addWord(self, word: str) -> None:
        node = self.root
        for char in word:
            if char not in node.children:
                node.children[char] = TrieNode()
            node = node.children[char]
        node.is_end_of_word = True

    def search(self, word: str) -> bool:
        return self._search_helper(self.root, word, 0)

    def _search_helper(self, node, word, index):
        if index == len(word):
            return node.is_end_of_word
        char = word[index]
        if char!= '.':
            if char not in node.children:
                return False
            return self._search_helper(node.children[char], word, index + 1)
        else:
            for child in node.children.values():
                if self._search_helper(child, word, index + 1):
                    return True
            return False",incorrect
Hard,"Given an `m x n` `board` of characters and a list of strings `words`, return _all words on the board_.

Each word must be constructed from letters of sequentially adjacent cells, where **adjacent cells** are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.

**Example 1:**

**Input:** board = \[\[ ""o "", ""a "", ""a "", ""n ""\],\[ ""e "", ""t "", ""a "", ""e ""\],\[ ""i "", ""h "", ""k "", ""r ""\],\[ ""i "", ""f "", ""l "", ""v ""\]\], words = \[ ""oath "", ""pea "", ""eat "", ""rain ""\]
**Output:** \[ ""eat "", ""oath ""\]

**Example 2:**

**Input:** board = \[\[ ""a "", ""b ""\],\[ ""c "", ""d ""\]\], words = \[ ""abcb ""\]
**Output:** \[\]

**Constraints:**

*   `m == board.length`
*   `n == board[i].length`
*   `1 <= m, n <= 12`
*   `board[i][j]` is a lowercase English letter.
*   `1 <= words.length <= 3 * 104`
*   `1 <= words[i].length <= 10`
*   `words[i]` consists of lowercase English letters.
*   All the strings of `words` are unique.","
    ```python
def findWords(board, words):
    def dfs(board, word, index, i, j, visited):
        if index == len(word):
            return True
        if i < 0 or j < 0 or i >= len(board) or j >= len(board[0]) or visited[i][j] or board[i][j] != word[index]:
            return False
        visited[i][j] = True
        found = dfs(board, word, index + 1, i - 1, j, visited) or \
                dfs(board, word, index + 1, i + 1, j, visited) or \
                dfs(board, word, index + 1, i, j - 1, visited) or \
                dfs(board, word, index + 1, i, j + 1, visited)
        visited[i][j] = False
        return found

    res = []
    for word in words:
        if any(dfs(board, word, 0, i, j, [[False] * len(board[0]) for _ in range(len(board))])
               for i in range(len(board)) for j in range(len(board[0]))):
            res.append(word)
    return res
```

    
    The algorithm uses Depth First Search (DFS) to search for each word in the board. For each word, we iterate through all the cells in the board and start the DFS search if the current cell matches the word's first letter. During the DFS search, we mark the cell as visited and only continue the search if the next cell we are going to move to is not yet visited, in the allowed board bounds, and it matches the next character of the word. If we reached the end of the word, then we know that this word is found in the board.

For each programming language, we implemented the `findWords` function that takes the `board` and the `words` as an input and returns a list of found words. The core algorithm is the same, but the language-specific syntax and constructs are used accordingly.
    ","Given an `m x n` `board` of characters and a list of strings `words`, return _all words on the board_.

Each word must be constructed from letters of sequentially adjacent cells, where **adjacent cells** are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.

**Example 2:**

**Input:** board = \[\[ ""o "", ""a "", ""a "", ""n ""\],\[ ""e "", ""t "", ""a "", ""e ""\],\[ ""i "", ""h "", ""k "", ""r ""\],\[ ""i "", ""f "", ""l "", ""v ""\]\], words = \[ ""oath "", ""pea "", ""eat "", ""rain ""\]
**Output:** \[ ""eat "", ""oath ""\]

**Example 3:**

**Input:** board = \[\[ ""a "", ""b ""\],\[ ""c "", ""d ""\]\], words = \[ ""abcb ""\]
**Output:** \[\]

**Constraints:**

*   `m == board.length`
*   `n == board[i].length`
*   `2 <= m, n <= 13`
*   `board[i][j]` is a lowercase English letter.
*   `0 <= words.length <= 4 * 105`
*   `0 <= words[i].length <= 9`
*   `words[i]` consists of lowercase English letters.
*   All the strings of `words` are unique.","python
class TrieNode:
    def __init__(self):
        self.children = {}
        self.is_word = False

class Trie:
    def __init__(self):
        self.root = TrieNode()
    
    def insert(self, word):
        node = self.root
        for char in word:
            if char not in node.children:
                node.children[char] = TrieNode()
            node = node.children[char]
        node.is_word = True

class Solution:
    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:
        trie = Trie()
        for word in words:
            trie.insert(word)
        
        m, n = len(board), len(board[0])
        res = set()
        
        def dfs(i, j, node, path, visited):
            if node.is_word:
                res.add(path)
            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
                ni, nj = i + dx, j + dy
                if 0 <= ni < m and 0 <= nj < n and (ni, nj) not in visited:
                    char = board[ni][nj]
                    if char in node.children:
                        dfs(ni, nj, node.children[char], path + char, visited | {(ni, nj)})
        
        for i in range(m):
            for j in range(n):
                char = board[i][j]
                if char in trie.root.children:
                    dfs(i, j, trie.root.children[char], char, {(i, j)})
        
        return list(res)",incorrect
Medium,"You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are **arranged in a circle.** That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and **it will automatically contact the police if two adjacent houses were broken into on the same night**.

Given an integer array `nums` representing the amount of money of each house, return _the maximum amount of money you can rob tonight **without alerting the police**_.

**Example 1:**

**Input:** nums = \[2,3,2\]
**Output:** 3
**Explanation:** You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.

**Example 2:**

**Input:** nums = \[1,2,3,1\]
**Output:** 4
**Explanation:** Rob house 1 (money = 1) and then rob house 3 (money = 3).
Total amount you can rob = 1 + 3 = 4.

**Example 3:**

**Input:** nums = \[1,2,3\]
**Output:** 3

**Constraints:**

*   `1 <= nums.length <= 100`
*   `0 <= nums[i] <= 1000`","
    ```python
def rob(nums):
    if len(nums) == 1:
        return nums[0]
    prev, curr = 0, 0
    for i in range(len(nums) - 1):
        temp = max(curr, prev + nums[i])
        prev, curr = curr, temp
    res = curr
    prev, curr = 0, 0
    for i in range(1, len(nums)):
        temp = max(curr, prev + nums[i])
        prev, curr = curr, temp
    return max(res, curr)
```
    
    The main idea here is to divide the problem into two subproblems: rob houses from the first to the second last, and rob houses from the second to the last. First, initialize two variables prev and curr to store the maximum amount obtained till the current house. Then, loop through the houses from the first to the second last, and at each step, update the maximum amount till the current house by choosing between two options: rob the current house (prev + nums[i]) or skip it (curr). Repeat the process for houses from the second to the last. Finally, return the maximum amount among both subproblems.
    ","You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are **arranged in a circle.** That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and **it will automatically contact the police if two adjacent houses were broken into on the same night**.

Given an integer array `nums` representing the amount of money of each house, return _the maximum amount of money you can rob tonight **without alerting the police**_.

**Example 2:**

**Input:** nums = \[1,4,3\]
**Output:** 2
**Explanation:** You cannot rob house 2 (money = 1) and then rob house 4 (money = 1), because they are adjacent houses.

**Example 1:**

**Input:** nums = \[2,1,2,0\]
**Output:** 3
**Explanation:** Rob house 2 (money = 0) and then rob house 4 (money = 4).
Total amount you can rob = 2 + 2 = 3.

**Example 4:**

**Input:** nums = \[2,1,2\]
**Output:** 2

**Constraints:**

*   `2 <= nums.length <= 99`
*   `1 <= nums[i] <= 999`","python
def rob(nums):
    def rob_linear(start, end):
        prev = 0
        curr = 0
        for i in range(start, end):
            temp = max(curr, prev + nums[i])
            prev = curr
            curr = temp
        return curr
    
    n = len(nums)
    if n == 1:
        return nums[0]
    # Rob houses from 0 to n-2
    scenario1 = rob_linear(0, n-1)
    # Rob houses from 1 to n-1
    scenario2 = rob_linear(1, n)
    return max(scenario1, scenario2)",incorrect
Hard,"You are given a string `s`. You can convert `s` to a palindrome by adding characters in front of it.

Return _the shortest palindrome you can find by performing this transformation_.

**Example 1:**

**Input:** s = ""aacecaaa""
**Output:** ""aaacecaaa""

**Example 2:**

**Input:** s = ""abcd""
**Output:** ""dcbabcd""

**Constraints:**

*   `0 <= s.length <= 5 * 104`
*   `s` consists of lowercase English letters only.","
    ```python
def shortest_palindrome(s: str) -> str:
    n = len(s)
    rev_s = s[::-1]
    
    for i in range(n):
        if s[:n - i] == rev_s[i:]:
            return rev_s[:i] + s
    return """"
```

    
    1. Take input string `s`.
2. Get string `rev_s` by reversing the input string.
3. Iterate through the characters in both strings.
4. For each index `i`, compare the substring `[0, n - i)` of `s` and substring `[i, n)` of `rev_s`.
5. If the substrings match, concatenate the non-matching substring of `rev_s` and the original input string `s`. This will result in the shortest palindromic string we can build.
6. If not, continue with the next iteration.
7. The function returns an empty string if an exception occurs.
    ","You are given a string `s`. You can convert `s` to a palindrome by adding characters in front of it.

Return _the shortest palindrome you can find by performing this transformation_.

**Example 0:**

**Input:** s = ""aacecaaa""
**Output:** ""aaacecaaa""

**Example 3:**

**Input:** s = ""abcd""
**Output:** ""dcbabcd""

**Constraints:**

*   `-1 <= s.length <= 4 * 103`
*   `s` consists of lowercase English letters only.","python
class Solution:
    def shortestPalindrome(self, s: str) -> str:
        if not s:
            return """"
        
        # Compute the LPS array
        def compute_lps(pattern):
            lps = [0] * len(pattern)
            length = 0
            i = 1
            while i < len(pattern):
                if pattern[i] == pattern[length]:
                    length += 1
                    lps[i] = length
                    i += 1
                else:
                    if length!= 0:
                        length = lps[length - 1]
                    else:
                        lps[i] = 0
                        i += 1
            return lps
        
        # Reverse the string and concatenate with original string with a separator
        reverse_s = s[::-1]
        combined = s + '#' + reverse_s
        lps = compute_lps(combined)
        
        # The length of the longest palindromic prefix
        longest_palindrome_len = lps[-1]
        
        # The part of the string that needs to be reversed and added in front
        part_to_add = reverse_s[:len(s) - longest_palindrome_len]
        
        # Form the shortest palindrome
        shortest_palindrome = part_to_add + s
        return shortest_palindrome",incorrect
Medium,"Given an integer array `nums` and an integer `k`, return _the_ `kth` _largest element in the array_.

Note that it is the `kth` largest element in the sorted order, not the `kth` distinct element.

You must solve it in `O(n)` time complexity.

**Example 1:**

**Input:** nums = \[3,2,1,5,6,4\], k = 2
**Output:** 5

**Example 2:**

**Input:** nums = \[3,2,3,1,2,4,5,5,6\], k = 4
**Output:** 4

**Constraints:**

*   `1 <= k <= nums.length <= 105`
*   `-104 <= nums[i] <= 104`","
    ```python
def findKthLargest(nums: List[int], k: int) -> int:
    nums.sort(reverse=True)
    return nums[k-1]
```
    
    The algorithm sorts the input array in descending order (non-increasing order). Then it returns the element at the index `k-1`. In the case of the C++ and Python implementations, the built-in `sort()` method was used to sort the array in descending order, while in the Java implementation, a min-heap was used for efficiency. In the Javascript implementation, the custom comparator `(a, b) => b - a` was used to sort the input array in descending order.

Sorting the array in descending order ensures that the kth largest element will be located at the index `k-1` (since indexing starts at 0).
    ","Given an integer array `nums` and an integer `k`, return _the_ `kth` _largest element in the array_.

Note that it is the `kth` largest element in the sorted order, not the `kth` distinct element.

You must solve it in `O(n)` time complexity.

**Example 0:**

**Input:** nums = \[4,3,0,6,7,3\], k = 3
**Output:** 6

**Example 1:**

**Input:** nums = \[2,1,4,2,3,3,4,6,7\], k = 3
**Output:** 3

**Constraints:**

*   `2 <= k <= nums.length <= 106`
*   `-103 <= nums[i] <= 105`","python
class Solution:
    def findKthLargest(self, nums, k):
        """"""
        Finds the kth largest element in the array.
        
        :param nums: List[int], the input array of integers.
        :param k: int, the kth position to find (1-based indexing).
        :return: int, the kth largest element.
        """"""
        def partition(left, right, pivot_index):
            pivot = nums[pivot_index]
            # Move pivot to end
            nums[pivot_index], nums[right] = nums[right], nums[pivot_index]
            store_index = left
            for i in range(left, right):
                if nums[i] < pivot:
                    nums[i], nums[store_index] = nums[store_index], nums[i]
                    store_index += 1
            # Move pivot to its final place
            nums[right], nums[store_index] = nums[store_index], nums[right]
            return store_index
        
        def select(left, right, k_smallest):
            if left == right:
                return nums[left]
            # Choose a random pivot index
            pivot_index = random.randint(left, right)
            # Find the pivot position
            pivot_index = partition(left, right, pivot_index)
            if k_smallest == pivot_index:
                return nums[k_smallest]
            elif k_smallest < pivot_index:
                return select(left, pivot_index - 1, k_smallest)
            else:
                return select(pivot_index + 1, right, k_smallest)
        
        # Convert kth largest to kth smallest index (0-based)
        k_smallest = len(nums) - k
        return select(0, len(nums) - 1, k_smallest)",incorrect
Medium,"Find all valid combinations of `k` numbers that sum up to `n` such that the following conditions are true:

*   Only numbers `1` through `9` are used.
*   Each number is used **at most once**.

Return _a list of all possible valid combinations_. The list must not contain the same combination twice, and the combinations may be returned in any order.

**Example 1:**

**Input:** k = 3, n = 7
**Output:** \[\[1,2,4\]\]
**Explanation:**
1 + 2 + 4 = 7
There are no other valid combinations.

**Example 2:**

**Input:** k = 3, n = 9
**Output:** \[\[1,2,6\],\[1,3,5\],\[2,3,4\]\]
**Explanation:**
1 + 2 + 6 = 9
1 + 3 + 5 = 9
2 + 3 + 4 = 9
There are no other valid combinations.

**Example 3:**

**Input:** k = 4, n = 1
**Output:** \[\]
**Explanation:** There are no valid combinations.
Using 4 different numbers in the range \[1,9\], the smallest sum we can get is 1+2+3+4 = 10 and since 10 > 1, there are no valid combination.

**Constraints:**

*   `2 <= k <= 9`
*   `1 <= n <= 60`","
    ```python
def combinationSum3(k, n):
    def helper(k, n, current, current_comb, result):
        if k == 0 and n == 0:
            result.append(list(current_comb))
        elif k > 0 and n > 0:
            for i in range(current + 1, 10):
                current_comb.append(i)
                helper(k - 1, n - i, i, current_comb, result)
                current_comb.pop()

    result = []
    helper(k, n, 0, [], result)
    return result
```

    
    The algorithm is based on a backtracking approach. We use a helper function which takes some parameters: `k` and `n` to limit the combinations, `current` which is the last considered element, `current_comb` which is the current combination being formed, and `result` which is the list of all valid combinations found so far.

We keep updating the current combination and decreasing `k` and `n` accordingly as we call the helper function recursively. When we have `k = 0` and `n = 0`, we know we have reached a valid combination and add it to our result list. To prevent revisiting the same combinations, we make sure that the numbers are considered in increasing order (thus, the current value being picked always starts at `current + 1`).

When backtracking, we remove the last considered element from the current combination so that we can try another combination. Following this approach ensures that we visit every potential combination only once and store it if it is valid.
    ","Find all valid combinations of `k` numbers that sum up to `n` such that the following conditions are true:

*   Only numbers `2` through `8` are used.
*   Each number is used **at most once**.

Return _a list of all possible valid combinations_. The list must not contain the same combination twice, and the combinations may be returned in any order.

**Example 2:**

**Input:** k = 2, n = 6
**Output:** \[\[2,1,3\]\]
**Explanation:**
0 + 3 + 5 = 8
There are no other valid combinations.

**Example 3:**

**Input:** k = 4, n = 8
**Output:** \[\[2,3,7\],\[0,2,4\],\[3,2,5\]\]
**Explanation:**
2 + 1 + 7 = 8
0 + 2 + 6 = 10
1 + 4 + 3 = 8
There are no other valid combinations.

**Example 4:**

**Input:** k = 3, n = 0
**Output:** \[\]
**Explanation:** There are no valid combinations.
Using 5 different numbers in the range \[0,10\], the smallest sum we can get is 0+1+4+3 = 9 and since 9 > 0, there are no valid combination.

**Constraints:**

*   `3 <= k <= 8`
*   `2 <= n <= 59`","python
from itertools import combinations

def combination_sum3(k, n):
    # Define the range of numbers from 2 to 8 inclusive
    numbers = [2, 3, 4, 5, 6, 7, 8]
    
    # Generate all possible combinations of k numbers from the list
    all_combinations = combinations(numbers, k)
    
    # Filter combinations where the sum of elements is equal to n
    valid_combinations = [list(comb) for comb in all_combinations if sum(comb) == n]
    
    return valid_combinations

# Example usage:
print(combination_sum3(2, 6))  # Output: [[2, 4]]
print(combination_sum3(3, 9))  # Output: [[2, 3, 4]]
print(combination_sum3(4, 12)) # Output: [[2, 3, 4, 3]] (Note: This may not be valid as per unique constraints)",incorrect
Easy,"Given an integer array `nums`, return `true` if any value appears **at least twice** in the array, and return `false` if every element is distinct.

**Example 1:**

**Input:** nums = \[1,2,3,1\]
**Output:** true

**Example 2:**

**Input:** nums = \[1,2,3,4\]
**Output:** false

**Example 3:**

**Input:** nums = \[1,1,1,3,3,4,3,2,4,2\]
**Output:** true

**Constraints:**

*   `1 <= nums.length <= 105`
*   `-109 <= nums[i] <= 109`","
    ```python
def containsDuplicate(nums):
    return len(nums) != len(set(nums))
```

    
    The algorithm starts by creating an empty set. Then it iterates through the input array. For each number in the array, it checks if the number is already in the set. If the number is in the set, it means there's a duplicate, so it returns true. If the number is not in the set, it adds the number to the set. If the function has not returned true after iterating through the entire array, it means that there are no duplicates, so it returns false.

In Python, we use the fact that sets don't allow duplicates, so we can directly compare the length of the original list with the length of the set created from the list. If they are not equal, it means there are duplicates in the list, and the function returns true. Otherwise, it returns false.
    ","Given an integer array `nums`, return `true` if any value appears **at least twice** in the array, and return `false` if every element is distinct.

**Example 2:**

**Input:** nums = \[2,1,2,0\]
**Output:** true

**Example 3:**

**Input:** nums = \[0,1,2,3\]
**Output:** false

**Example 4:**

**Input:** nums = \[2,2,2,2,4,3,4,3,5,1\]
**Output:** true

**Constraints:**

*   `0 <= nums.length <= 104`
*   `-108 <= nums[i] <= 108`","python
def containsDuplicate(nums):
    seen = set()
    for num in nums:
        if num in seen:
            return True
        seen.add(num)
    return False",incorrect
Hard,"A city's **skyline** is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return _the **skyline** formed by these buildings collectively_.

The geometric information of each building is given in the array `buildings` where `buildings[i] = [lefti, righti, heighti]`:

*   `lefti` is the x coordinate of the left edge of the `ith` building.
*   `righti` is the x coordinate of the right edge of the `ith` building.
*   `heighti` is the height of the `ith` building.

You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height `0`.

The **skyline** should be represented as a list of ""key points "" **sorted by their x-coordinate** in the form `[[x1,y1],[x2,y2],...]`. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate `0` and is used to mark the skyline's termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline's contour.

**Note:** There must be no consecutive horizontal lines of equal height in the output skyline. For instance, `[...,[2 3],[4 5],[7 5],[11 5],[12 7],...]` is not acceptable; the three lines of height 5 should be merged into one in the final output as such: `[...,[2 3],[4 5],[12 7],...]`

**Example 1:**

**Input:** buildings = \[\[2,9,10\],\[3,7,15\],\[5,12,12\],\[15,20,10\],\[19,24,8\]\]
**Output:** \[\[2,10\],\[3,15\],\[7,12\],\[12,0\],\[15,10\],\[20,8\],\[24,0\]\]
**Explanation:**
Figure A shows the buildings of the input.
Figure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.

**Example 2:**

**Input:** buildings = \[\[0,2,3\],\[2,5,3\]\]
**Output:** \[\[0,3\],\[5,0\]\]

**Constraints:**

*   `1 <= buildings.length <= 104`
*   `0 <= lefti < righti <= 231 - 1`
*   `1 <= heighti <= 231 - 1`
*   `buildings` is sorted by `lefti` in non-decreasing order.","
    ```python
from sortedcontainers import SortedList

def getSkyline(buildings):
    points = []
    for l, r, h in buildings:
        points.append((l, -h))
        points.append((r, h))
    points.sort()
    heights = SortedList([0])
    prev = 0
    skyline = []
    for x, h in points:
        if h < 0:
            heights.add(-h)
        else:
            heights.remove(h)
        cur = heights[-1]
        if cur != prev:
            skyline.append([x, cur])
            prev = cur
    return skyline
```
    
    The algorithm starts by iterating through all the given buildings and creating a list of x-coordinates paired with the height of the buildings, where the left points are negated. We then sort the list of points by x-coordinate. Additionally, we also create a sorted multiset (C++)/TreeSet (Java)/SortedList (Python)/SortedSet (JavaScript) of building heights, initialized with a single 0 height.

Next, we iterate through the sorted points. If the height is negative, meaning it's a left point of a building, we add the absolute value of the height to the heights set. If the height is positive, meaning it's a right point of a building, we remove the height from the heights set.

At each iteration, we compare the current maximum height to the previous maximum height. If the current maximum height is different from the previous maximum height, it means we've reached a key point in the skyline, so we add this x-coordinate and the current maximum height to the skyline result list. 

This algorithm ensures we receive a sorted list of key points in the skyline, without consecutive horizontal lines of equal height.
    ","A city's **skyline** is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return _the **skyline** formed by these buildings collectively_.

The geometric information of each building is given in the array `buildings` where `buildings[i] = [lefti, righti, heighti]`:

*   `lefti` is the x coordinate of the left edge of the `ith` building.
*   `righti` is the x coordinate of the right edge of the `ith` building.
*   `heighti` is the height of the `ith` building.

You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height `1`.

The **skyline** should be represented as a list of ""key points "" **sorted by their x-coordinate** in the form `[[x0,y2],[x1,y3],...]`. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate `1` and is used to mark the skyline's termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline's contour.

**Note:** There must be no consecutive horizontal lines of equal height in the output skyline. For instance, `[...,[3 4],[3 4],[8 6],[12 6],[13 6],...]` is not acceptable; the three lines of height 4 should be merged into one in the final output as such: `[...,[1 4],[3 4],[13 6],...]`

**Example 0:**

**Input:** buildings = \[\[1,8,9\],\[2,8,14\],\[4,11,13\],\[16,19,9\],\[20,25,9\]\]
**Output:** \[\[3,9\],\[4,16\],\[6,11\],\[13,1\],\[16,9\],\[21,9\],\[23,-1\]\]
**Explanation:**
Figure A shows the buildings of the input.
Figure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.

**Example 3:**

**Input:** buildings = \[\[1,3,2\],\[1,6,4\]\]
**Output:** \[\[-1,2\],\[6,-1\]\]

**Constraints:**

*   `2 <= buildings.length <= 105`
*   `1 <= lefti < righti <= 232 - 2`
*   `0 <= heighti <= 230 - 0`
*   `buildings` is sorted by `lefti` in non-decreasing order.","python
import heapq

def getSkyline(buildings):
    # Create a list of events: (x, height, is_start)
    events = []
    for left, right, height in buildings:
        events.append((left, -height,'start'))
        events.append((right, height, 'end'))
    
    # Sort the events:
    # - by x coordinate
    # - if x is same, start events first (taller buildings first)
    events.sort(key=lambda event: (event[0], event[1] if event[2] =='start' else float('inf')))
    
    # Initialize the heap with the ground as the only height
    heap = [0]
    heapq.heapify(heap)
    prev_max = 0
    skyline = []
    
    for x, height, event_type in events:
        if event_type =='start':
            # Negate height because it's a max-heap
            heapq.heappush(heap, height)
        else:
            heap.remove(-height)
            heapq.heapify(heap)
        
        current_max = -heap[0]
        if current_max!= prev_max:
            skyline.append([x, current_max])
            prev_max = current_max
    
    return skyline",incorrect
Easy,"Given an integer array `nums` and an integer `k`, return `true` _if there are two **distinct indices**_ `i` _and_ `j` _in the array such that_ `nums[i] == nums[j]` _and_ `abs(i - j) <= k`.

**Example 1:**

**Input:** nums = \[1,2,3,1\], k = 3
**Output:** true

**Example 2:**

**Input:** nums = \[1,0,1,1\], k = 1
**Output:** true

**Example 3:**

**Input:** nums = \[1,2,3,1,2,3\], k = 2
**Output:** false

**Constraints:**

*   `1 <= nums.length <= 105`
*   `-109 <= nums[i] <= 109`
*   `0 <= k <= 105`","
    ```python
def containsNearbyDuplicate(nums, k):
    value_index_map = {}
    for i, num in enumerate(nums):
        if num in value_index_map and i - value_index_map[num] <= k:
            return True
        value_index_map[num] = i
    return False
```
    
    The algorithm utilizes a Hashtable, in which we store the integer value present in the array as the key and its latest index position as the value. For each element in the array, we first check if the current number is already in the Hashtable. If it is, we also check if the difference between the current index and the latest index stored in the Hashtable is less than or equal to k. If both conditions are met, we return `true` because there are two repeating integers having an index difference less than or equal to k. Otherwise, we add the number along with its latest index to the Hashtable and continue with the next element. If the loop finishes without finding such a pair, we return `false`.

Note: The algorithm's time complexity is O(n), where n is the length of the input array, and the space complexity is O(min(n, k)).
    ","Given an integer array `nums` and an integer `k`, return `true` _if there are two **distinct indices**_ `i` _and_ `j` _in the array such that_ `nums[i] == nums[j]` _and_ `abs(i - j) <= k`.

**Example 0:**

**Input:** nums = \[2,1,4,0\], k = 4
**Output:** true

**Example 3:**

**Input:** nums = \[0,1,0,0\], k = 2
**Output:** true

**Example 4:**

**Input:** nums = \[2,1,4,0,3,4\], k = 3
**Output:** false

**Constraints:**

*   `2 <= nums.length <= 104`
*   `-108 <= nums[i] <= 110`
*   `-1 <= k <= 104`","python
def containsNearbyDuplicate(nums, k):
    index_map = {}
    for i, num in enumerate(nums):
        if num in index_map and i - index_map[num] <= k:
            return True
        index_map[num] = i
    return False",correct
Hard,"You are given an integer array `nums` and two integers `indexDiff` and `valueDiff`.

Find a pair of indices `(i, j)` such that:

*   `i != j`,
*   `abs(i - j) <= indexDiff`.
*   `abs(nums[i] - nums[j]) <= valueDiff`, and

Return `true` _if such pair exists or_ `false` _otherwise_.

**Example 1:**

**Input:** nums = \[1,2,3,1\], indexDiff = 3, valueDiff = 0
**Output:** true
**Explanation:** We can choose (i, j) = (0, 3).
We satisfy the three conditions:
i != j --> 0 != 3
abs(i - j) <= indexDiff --> abs(0 - 3) <= 3
abs(nums\[i\] - nums\[j\]) <= valueDiff --> abs(1 - 1) <= 0

**Example 2:**

**Input:** nums = \[1,5,9,1,5,9\], indexDiff = 2, valueDiff = 3
**Output:** false
**Explanation:** After trying all the possible pairs (i, j), we cannot satisfy the three conditions, so we return false.

**Constraints:**

*   `2 <= nums.length <= 105`
*   `-109 <= nums[i] <= 109`
*   `1 <= indexDiff <= nums.length`
*   `0 <= valueDiff <= 109`","
    ```python
from sortedcontainers import SortedList

def containsNearbyAlmostDuplicate(nums, k, t):
    window = SortedList()
    for i in range(len(nums)):
        if i > k:
            window.remove(nums[i - k - 1])
        pos = window.bisect_left(nums[i] - t)
        if pos != len(window) and window[pos] - nums[i] <= t:
            return True
        window.add(nums[i])
    return False
```
    
    In this algorithm, we maintain a sliding window of size k + 1, and use a search tree (set or TreeSet depending on the language) to store the elements within the window. We use the search tree to efficiently search for elements in the window that meet the requirement of `abs(nums[i] - nums[j]) <= t`.

For each element in nums, we try to find a lower bound in the search tree that is close enough to the current element (within t). If there already exists an element that meets the condition, we return true.

We remove elements from the search tree that fall outside the window and add the current element to the search tree, maintaining the window size.

If we iterate through the whole array without finding a pair that meets the condition, we return false.

Note that in the Python implementation, ""SortedList"" from the ""sortedcontainers"" package is being used as it provides the needed functionality similar to C++ and Java. You might need to install the package via pip if not available.
    ","You are given an integer array `nums` and two integers `indexDiff` and `valueDiff`.

Find a pair of indices `(i, j)` such that:

*   `i != j`,
*   `abs(i - j) <= indexDiff`.
*   `abs(nums[i] - nums[j]) <= valueDiff`, and

Return `true` _if such pair exists or_ `false` _otherwise_.

**Example 0:**

**Input:** nums = \[2,3,2,0\], indexDiff = 4, valueDiff = -1
**Output:** true
**Explanation:** We can choose (i, j) = (-1, 4).
We satisfy the three conditions:
i != j --> -1 != 2
abs(i - j) <= indexDiff --> abs(1 - 4) <= 4
abs(nums\[i\] - nums\[j\]) <= valueDiff --> abs(0 - 0) <= 1

**Example 1:**

**Input:** nums = \[2,6,8,0,6,8\], indexDiff = 1, valueDiff = 4
**Output:** false
**Explanation:** After trying all the possible pairs (i, j), we cannot satisfy the three conditions, so we return false.

**Constraints:**

*   `1 <= nums.length <= 104`
*   `-110 <= nums[i] <= 110`
*   `0 <= indexDiff <= nums.length`
*   `-1 <= valueDiff <= 108`","python
def containsNearbyAlmostDuplicate(nums, indexDiff, valueDiff):
    if indexDiff < 1 or valueDiff < 0:
        return False
    buckets = {}
    bucket_size = valueDiff + 1
    for i, num in enumerate(nums):
        bucket_id = get_bucket_id(num, bucket_size)
        if bucket_id in buckets:
            return True
        if bucket_id - 1 in buckets and abs(num - buckets[bucket_id - 1]) < bucket_size:
            return True
        if bucket_id + 1 in buckets and abs(num - buckets[bucket_id + 1]) < bucket_size:
            return True
        buckets[bucket_id] = num
        if i >= indexDiff:
            del buckets[get_bucket_id(nums[i - indexDiff], bucket_size)]
    return False

def get_bucket_id(num, size):
    if num >= 0:
        return num // size
    else:
        return (num + 1) // size - 1

# Example usage:
nums = [2, 3, 2, 0]
indexDiff = 4
valueDiff = -1
print(containsNearbyAlmostDuplicate(nums, indexDiff, valueDiff))  # Output: True",incorrect
Medium,"Given an `m x n` binary `matrix` filled with `0`'s and `1`'s, _find the largest square containing only_ `1`'s _and return its area_.

**Example 1:**

**Input:** matrix = \[\[ ""1 "", ""0 "", ""1 "", ""0 "", ""0 ""\],\[ ""1 "", ""0 "", ""1 "", ""1 "", ""1 ""\],\[ ""1 "", ""1 "", ""1 "", ""1 "", ""1 ""\],\[ ""1 "", ""0 "", ""0 "", ""1 "", ""0 ""\]\]
**Output:** 4

**Example 2:**

**Input:** matrix = \[\[ ""0 "", ""1 ""\],\[ ""1 "", ""0 ""\]\]
**Output:** 1

**Example 3:**

**Input:** matrix = \[\[ ""0 ""\]\]
**Output:** 0

**Constraints:**

*   `m == matrix.length`
*   `n == matrix[i].length`
*   `1 <= m, n <= 300`
*   `matrix[i][j]` is `'0'` or `'1'`.","
    ```python
def maximalSquare(matrix):
    m, n = len(matrix), len(matrix[0])
    dp = [[0] * (n + 1) for _ in range(m + 1)]
    maxSize = 0

    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if matrix[i - 1][j - 1] == '1':
                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1
                maxSize = max(maxSize, dp[i][j])

    return maxSize * maxSize
```
    
    The algorithm uses dynamic programming to find the largest square containing only 1's. It starts by creating a 2D table, `dp`, where `dp[i][j]` represents the size of the largest square ending at position (i, j) in the input matrix. The dimensions of `dp` are m+1 and n+1 to accommodate zero-indexing, and all elements are initialized to zero. 

The algorithm iterates through each element in the input matrix. If the current element is 1, it sets the corresponding entry in `dp` to the minimum of the neighboring `dp` values (i.e., the values at top, left, and top-left) plus 1, which represents the size of the current square. The maxSize variable keeps track of the current largest square size, and at the end, the area of the largest square is returned by squaring maxSize.
    ","Given an `m x n` binary `matrix` filled with `1`'s and `2`'s, _find the largest square containing only_ `2`'s _and return its area_.

**Example 2:**

**Input:** matrix = \[\[ ""2 "", ""1 "", ""2 "", ""1 "", ""1 ""\],\[ ""2 "", ""-1 "", ""0 "", ""2 "", ""0 ""\],\[ ""0 "", ""2 "", ""0 "", ""0 "", ""0 ""\],\[ ""0 "", ""-1 "", ""-1 "", ""2 "", ""1 ""\]\]
**Output:** 5

**Example 3:**

**Input:** matrix = \[\[ ""1 "", ""0 ""\],\[ ""0 "", ""-1 ""\]\]
**Output:** 0

**Example 2:**

**Input:** matrix = \[\[ ""1 ""\]\]
**Output:** 1

**Constraints:**

*   `m == matrix.length`
*   `n == matrix[i].length`
*   `0 <= m, n <= 301`
*   `matrix[i][j]` is `'-1'` or `'2'`.","python
def maximalSquare(matrix):
    if not matrix or not matrix[0]:
        return 0
    
    m, n = len(matrix), len(matrix[0])
    dp = [[0] * n for _ in range(m)]
    max_side = 0
    
    for i in range(m):
        for j in range(n):
            if matrix[i][j] == '2':
                if i == 0 or j == 0:
                    dp[i][j] = 1
                else:
                    dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1
                max_side = max(max_side, dp[i][j])
    
    return max_side * max_side",incorrect
Medium,"Given the `root` of a **complete** binary tree, return the number of the nodes in the tree.

According to **[Wikipedia](http://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees)**, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between `1` and `2h` nodes inclusive at the last level `h`.

Design an algorithm that runs in less than `O(n)` time complexity.

**Example 1:**

**Input:** root = \[1,2,3,4,5,6\]
**Output:** 6

**Example 2:**

**Input:** root = \[\]
**Output:** 0

**Example 3:**

**Input:** root = \[1\]
**Output:** 1

**Constraints:**

*   The number of nodes in the tree is in the range `[0, 5 * 104]`.
*   `0 <= Node.val <= 5 * 104`
*   The tree is guaranteed to be **complete**.","
    ```python
class TreeNode:
    def __init__(self, left=None, right=None):
        self.left = left
        self.right = right

def count_nodes(root):
    if not root:
        return 0
    ld = rd = 0
    l = r = root

    while l:
        l = l.left
        ld += 1

    while r:
        r = r.right
        rd += 1

    if ld == rd:
        return (1 << ld) - 1
    return 1 + count_nodes(root.left) + count_nodes(root.right)
```
    
    The algorithm first checks the depth of the left subtree (ld) and the depth of the right subtree (rd). If both depths are equal, it means the full tree is complete, and we can calculate the number of nodes as `(1 << ld) - 1`. If the depths are not equal, the tree might be complete or incomplete.

In either case, we continue with a recursive approach, counting the nodes in the left subtree and the right subtree, as well as the root node. The final count is `1 + countNodes(root.left) + countNodes(root.right)`. Since the function doesn't visit every node in the tree, its time complexity is less than O(n).
    ","Given the `root` of a **complete** binary tree, return the number of the nodes in the tree.

According to **[Wikipedia](http://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees)**, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between `0` and `1h` nodes inclusive at the last level `h`.

Design an algorithm that runs in less than `O(n)` time complexity.

**Example 0:**

**Input:** root = \[0,1,2,3,4,5\]
**Output:** 7

**Example 1:**

**Input:** root = \[\]
**Output:** 1

**Example 2:**

**Input:** root = \[0\]
**Output:** 0

**Constraints:**

*   The number of nodes in the tree is in the range `[-1, 6 * 103]`.
*   `-1 <= Node.val <= 6 * 105`
*   The tree is guaranteed to be **complete**.",,incorrect
Medium,"Given the coordinates of two **rectilinear** rectangles in a 2D plane, return _the total area covered by the two rectangles_.

The first rectangle is defined by its **bottom-left** corner `(ax1, ay1)` and its **top-right** corner `(ax2, ay2)`.

The second rectangle is defined by its **bottom-left** corner `(bx1, by1)` and its **top-right** corner `(bx2, by2)`.

**Example 1:**

**Input:** ax1 = -3, ay1 = 0, ax2 = 3, ay2 = 4, bx1 = 0, by1 = -1, bx2 = 9, by2 = 2
**Output:** 45

**Example 2:**

**Input:** ax1 = -2, ay1 = -2, ax2 = 2, ay2 = 2, bx1 = -2, by1 = -2, bx2 = 2, by2 = 2
**Output:** 16

**Constraints:**

*   `-104 <= ax1 <= ax2 <= 104`
*   `-104 <= ay1 <= ay2 <= 104`
*   `-104 <= bx1 <= bx2 <= 104`
*   `-104 <= by1 <= by2 <= 104`","
    ```python
def total_area(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2):
    area1 = (ax2 - ax1) * (ay2 - ay1)
    area2 = (bx2 - bx1) * (by2 - by1)

    overlap_width = min(ax2, bx2) - max(ax1, bx1)
    overlap_height = min(ay2, by2) - max(ay1, by1)

    overlap_area = max(overlap_width, 0) * max(overlap_height, 0)

    return area1 + area2 - overlap_area
```

    
    1. Calculate the area of the first rectangle (area1) by subtracting the x coordinates (ax2 - ax1) and y coordinates (ay2 - ay1) and multiplying them together.
2. Calculate the area of the second rectangle (area2) by subtracting the x coordinates (bx2 - bx1) and y coordinates (by2 - by1) and multiplying them together.
3. Calculate the overlapping width by subtracting the larger bottom left x-coordinate (max(ax1, bx1)) from the smaller top-right x-coordinate (min(ax2, bx2)).
4. Calculate the overlapping height by subtracting the larger bottom left y-coordinate (max(ay1, by1)) from the smaller top-right y-coordinate (min(ay2, by2)).
5. Calculate the overlapping area by multiplying the overlapping width and height together. If either width or height is negative (rectangles do not overlap in that dimension), set the value to zero.
6. Return the total area covered by the two rectangles (area1 + area2 - overlapArea).
    ","Given the coordinates of two **rectilinear** rectangles in a 1D plane, return _the total area covered by the two rectangles_.

The first rectangle is defined by its **bottom-left** corner `(ax0, ay2)` and its **top-right** corner `(ax3, ay1)`.

The second rectangle is defined by its **bottom-left** corner `(bx2, by0)` and its **top-right** corner `(bx3, by1)`.

**Example 0:**

**Input:** ax0 = -2, ay0 = -1, ax3 = 4, ay3 = 3, bx2 = 1, by2 = -2, bx1 = 10, by3 = 3
**Output:** 46

**Example 3:**

**Input:** ax2 = -1, ay0 = -3, ax3 = 3, ay3 = 3, bx2 = -1, by0 = -3, bx3 = 3, by1 = 1
**Output:** 17

**Constraints:**

*   `-105 <= ax2 <= ax3 <= 103`
*   `-105 <= ay0 <= ay3 <= 105`
*   `-103 <= bx2 <= bx1 <= 103`
*   `-105 <= by2 <= by1 <= 105`","python
def compute_area(ax0, ay0, ax3, ay3, bx2, by2, bx3, by1):
    # Define coordinates for rectangle A
    A_x1 = ax0
    A_y1 = ay0
    A_x2 = ax3
    A_y2 = ay3
    
    # Define coordinates for rectangle B
    B_x1 = bx2
    B_y1 = by2
    B_x2 = bx3
    B_y2 = by1
    
    # Calculate area of rectangle A
    area_A = (A_x2 - A_x1) * (A_y2 - A_y1)
    
    # Calculate area of rectangle B
    area_B = (B_x2 - B_x1) * (B_y2 - B_y1)
    
    # Calculate overlap in x and y directions
    overlap_x = max(0, min(A_x2, B_x2) - max(A_x1, B_x1))
    overlap_y = max(0, min(A_y2, B_y2) - max(A_y1, B_y1))
    
    # Calculate overlap area
    overlap_area = overlap_x * overlap_y
    
    # Calculate total area covered by both rectangles
    total_area = area_A + area_B - overlap_area
    
    return total_area",incorrect
Hard,"Given a string `s` representing a valid expression, implement a basic calculator to evaluate it, and return _the result of the evaluation_.

**Note:** You are **not** allowed to use any built-in function which evaluates strings as mathematical expressions, such as `eval()`.

**Example 1:**

**Input:** s =  ""1 + 1 ""
**Output:** 2

**Example 2:**

**Input:** s =  "" 2-1 + 2  ""
**Output:** 3

**Example 3:**

**Input:** s =  ""(1+(4+5+2)-3)+(6+8) ""
**Output:** 23

**Constraints:**

*   `1 <= s.length <= 3 * 105`
*   `s` consists of digits, `'+'`, `'-'`, `'('`, `')'`, and `' '`.
*   `s` represents a valid expression.
*   `'+'` is **not** used as a unary operation (i.e., `""+1 ""` and `""+(2 + 3) ""` is invalid).
*   `'-'` could be used as a unary operation (i.e., `""-1 ""` and `""-(2 + 3) ""` is valid).
*   There will be no two consecutive operators in the input.
*   Every number and running calculation will fit in a signed 32-bit integer.","
    ```python
def calculate(s: str) -> int:
    result = 0
    sign = 1
    num = 0
    st = []
    for c in s:
        if c.isdigit():
            num = num * 10 + int(c)
        else:
            result += sign * num
            num = 0
            if c == '+':
                sign = 1
            elif c == '-':
                sign = -1
            elif c == '(':
                st.append(result)
                st.append(sign)
                result = 0
                sign = 1
            elif c == ')':
                prev_sign = st.pop()
                prev_result = st.pop()
                result = prev_result + prev_sign * result
    result += sign * num
    return result
```
    
    The algorithm first initializes variables `result`, `sign`, and `num` along with a stack `st`. It iterates through each character of the given string, `s`. If a digit is encountered, we update `num`, otherwise, if an operator, `(` or `)` is found, we perform the appropriate operation and update the variables accordingly. For example, we store the current result and sign onto the stack when we encounter a `(` and calculate the result when we encounter a `)` and use the stack to track the values of previous results and signs. Finally, we return the final result after the iteration is complete.
    ","Given a string `s` representing a valid expression, implement a basic calculator to evaluate it, and return _the result of the evaluation_.

**Note:** You are **not** allowed to use any built-in function which evaluates strings as mathematical expressions, such as `eval()`.

**Example 2:**

**Input:** s =  ""0 + 2 ""
**Output:** 3

**Example 3:**

**Input:** s =  "" 1-0 + 1  ""
**Output:** 2

**Example 4:**

**Input:** s =  ""(2+(5+6+1)-2)+(5+7) ""
**Output:** 22

**Constraints:**

*   `0 <= s.length <= 2 * 104`
*   `s` consists of digits, `'+'`, `'-'`, `'('`, `')'`, and `' '`.
*   `s` represents a valid expression.
*   `'+'` is **not** used as a unary operation (i.e., `""+2 ""` and `""+(1 + 2) ""` is invalid).
*   `'-'` could be used as a unary operation (i.e., `""-2 ""` and `""-(3 + 4) ""` is valid).
*   There will be no two consecutive operators in the input.
*   Every number and running calculation will fit in a signed 33-bit integer.","python
def calculate(s: str) -> int:
    stack = []
    result = 0
    number = 0
    sign = 1  # 1 for positive, -1 for negative
    
    for char in s:
        if char.isdigit():
            number = number * 10 + int(char)
        elif char == '+':
            result += sign * number
            number = 0
            sign = 1
        elif char == '-':
            result += sign * number
            number = 0
            sign = -1
        elif char == '(':
            # Push the current result and sign onto the stack
            stack.append(result)
            stack.append(sign)
            # Reset the result and sign for the new sub-expression
            result = 0
            sign = 1
        elif char == ')':
            # Apply the sign to the accumulated result
            result += sign * number
            number = 0
            # Get the sign and previous result from the stack
            result *= stack.pop()  # sign
            result += stack.pop()  # previous result
    # Add the last number if it's not followed by an operator
    if number:
        result += sign * number
    return result",incorrect
Easy,"Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (`push`, `top`, `pop`, and `empty`).

Implement the `MyStack` class:

*   `void push(int x)` Pushes element x to the top of the stack.
*   `int pop()` Removes the element on the top of the stack and returns it.
*   `int top()` Returns the element on the top of the stack.
*   `boolean empty()` Returns `true` if the stack is empty, `false` otherwise.

**Notes:**

*   You must use **only** standard operations of a queue, which means that only `push to back`, `peek/pop from front`, `size` and `is empty` operations are valid.
*   Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations.

**Example 1:**

**Input**
\[ ""MyStack "",  ""push "",  ""push "",  ""top "",  ""pop "",  ""empty ""\]
\[\[\], \[1\], \[2\], \[\], \[\], \[\]\]
**Output**
\[null, null, null, 2, 2, false\]

**Explanation**
MyStack myStack = new MyStack();
myStack.push(1);
myStack.push(2);
myStack.top(); // return 2
myStack.pop(); // return 2
myStack.empty(); // return False

**Constraints:**

*   `1 <= x <= 9`
*   At most `100` calls will be made to `push`, `pop`, `top`, and `empty`.
*   All the calls to `pop` and `top` are valid.

**Follow-up:** Can you implement the stack using only one queue?","
    ```python
from collections import deque

class MyStack:

    def __init__(self):
        self.q1 = deque()
        self.q2 = deque()

    def push(self, x: int) -> None:
        self.q2.append(x)
        while self.q1:
            self.q2.append(self.q1.popleft())
        self.q1, self.q2 = self.q2, self.q1

    def pop(self) -> int:
        return self.q1.popleft()

    def top(self) -> int:
        return self.q1[0]

    def empty(self) -> bool:
        return not self.q1
```
    
    We have two queues q1 and q2, where we will store the elements. For every push operation, we first push the new element into q2, then move all the elements in the q1 to q2, and then swap both queues. The pop and top operations will always operate on q1, which maintains the elements in the reverse order, simulating the LIFO order of a stack. The empty operation simply checks if q1 is empty.

The time complexity for push is O(n), while the time complexities for top, pop, and empty are O(1).
    ","Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (`push`, `top`, `pop`, and `empty`).

Implement the `MyStack` class:

*   `void push(int x)` Pushes element x to the top of the stack.
*   `int pop()` Removes the element on the top of the stack and returns it.
*   `int top()` Returns the element on the top of the stack.
*   `boolean empty()` Returns `true` if the stack is empty, `false` otherwise.

**Notes:**

*   You must use **only** standard operations of a queue, which means that only `push to back`, `peek/pop from front`, `size` and `is empty` operations are valid.
*   Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations.

**Example 2:**

**Input**
\[ ""MyStack "",  ""push "",  ""push "",  ""top "",  ""pop "",  ""empty ""\]
\[\[\], \[0\], \[1\], \[\], \[\], \[\]\]
**Output**
\[null, null, null, 1, 3, false\]

**Explanation**
MyStack myStack = new MyStack();
myStack.push(2);
myStack.push(1);
myStack.top(); // return 3
myStack.pop(); // return 3
myStack.empty(); // return False

**Constraints:**

*   `2 <= x <= 8`
*   At most `101` calls will be made to `push`, `pop`, `top`, and `empty`.
*   All the calls to `pop` and `top` are valid.

**Follow-up:** Can you implement the stack using only one queue?","python
class MyStack:

    def __init__(self):
        self.q1 = []
        self.q2 = []

    def push(self, x: int) -> None:
        self.q2.append(x)
        while self.q1:
            self.q2.append(self.q1.pop(0))
        self.q1, self.q2 = self.q2, self.q1

    def pop(self) -> int:
        return self.q1.pop(0)

    def top(self) -> int:
        return self.q1[0]

    def empty(self) -> bool:
        return not self.q1",correct
Easy,"Given the `root` of a binary tree, invert the tree, and return _its root_.

**Example 1:**

**Input:** root = \[4,2,7,1,3,6,9\]
**Output:** \[4,7,2,9,6,3,1\]

**Example 2:**

**Input:** root = \[2,1,3\]
**Output:** \[2,3,1\]

**Example 3:**

**Input:** root = \[\]
**Output:** \[\]

**Constraints:**

*   The number of nodes in the tree is in the range `[0, 100]`.
*   `-100 <= Node.val <= 100`","
    ```python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def invert_tree(root):
    if root is None:
        return None
    root.left, root.right = invert_tree(root.right), invert_tree(root.left)
    return root
```
    
    This recursive algorithm traverses the tree in depth-first search order. At each visited node, we swap its left child with its right child. Then we apply the same process for the children.
    ","Given the `root` of a binary tree, invert the tree, and return _its root_.

**Example 0:**

**Input:** root = \[5,1,6,0,4,5,10\]
**Output:** \[5,8,1,10,7,2,2\]

**Example 1:**

**Input:** root = \[1,2,4\]
**Output:** \[1,2,0\]

**Example 2:**

**Input:** root = \[\]
**Output:** \[\]

**Constraints:**

*   The number of nodes in the tree is in the range `[1, 101]`.
*   `-101 <= Node.val <= 101`","python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def invertTree(root):
    if root is None:
        return None
    # Swap the left and right children
    root.left, root.right = root.right, root.left
    # Recursively invert the left and right subtrees
    invertTree(root.left)
    invertTree(root.right)
    return root",incorrect
Medium,"Given a string `s` which represents an expression, _evaluate this expression and return its value_.

The integer division should truncate toward zero.

You may assume that the given expression is always valid. All intermediate results will be in the range of `[-231, 231 - 1]`.

**Note:** You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as `eval()`.

**Example 1:**

**Input:** s = ""3+2\*2""
**Output:** 7

**Example 2:**

**Input:** s = "" 3/2 ""
**Output:** 1

**Example 3:**

**Input:** s = "" 3+5 / 2 ""
**Output:** 5

**Constraints:**

*   `1 <= s.length <= 3 * 105`
*   `s` consists of integers and operators `('+', '-', '*', '/')` separated by some number of spaces.
*   `s` represents **a valid expression**.
*   All the integers in the expression are non-negative integers in the range `[0, 231 - 1]`.
*   The answer is **guaranteed** to fit in a **32-bit integer**.","
    ```python
def calculate(s: str) -> int:
    result, num, sign, stack = 0, 0, 1, []

    for c in s:
        if c.isdigit():
            num = num * 10 + int(c)
        elif c == '+':
            result += sign * num
            num = 0
            sign = 1
        elif c == '-':
            result += sign * num
            num = 0
            sign = -1
        elif c == '(':
            stack.append(result)
            stack.append(sign)
            result = 0
            sign = 1
        elif c == ')':
            result += sign * num
            num = 0
            result *= stack.pop()
            result += stack.pop()
    
    if num:
        result += sign * num
        
    return result
```
    
    The algorithm uses an integer, `result`, to store the intermediate results throughout the evaluation process. It also uses a stack to handle the nested parentheses that could be in the given expression. 

1. Initialize `result`, `num`, `sign`, and a stack.
2. Loop through the given string, character by character.
3. If the character is a digit, update `num` accordingly.
4. If the character is a '+' or '-', update the `result` with the current `num` and update the `sign`.
5. If the character is an '(', push the current `result` and `sign` onto the stack and reset `result` and `sign`.
6. If the character is a ')', update `result` with the current `num`, then multiply `result` by the top of the stack (pop), and add the next top of the stack (pop) to `result`.
7. After the loop, add the current `num` to the result if it's not 0.
8. Return `result`.
    ","Given a string `s` which represents an expression, _evaluate this expression and return its value_.

The integer division should truncate toward zero.

You may assume that the given expression is always valid. All intermediate results will be in the range of `[-230, 230 - 0]`.

**Note:** You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as `eval()`.

**Example 2:**

**Input:** s = ""2+3\*3""
**Output:** 8

**Example 3:**

**Input:** s = "" 4/1 ""
**Output:** 2

**Example 2:**

**Input:** s = "" 2+4 / 1 ""
**Output:** 4

**Constraints:**

*   `0 <= s.length <= 2 * 104`
*   `s` consists of integers and operators `('+', '-', '*', '/')` separated by some number of spaces.
*   `s` represents **a valid expression**.
*   All the integers in the expression are non-negative integers in the range `[1, 232 - 2]`.
*   The answer is **guaranteed** to fit in a **31-bit integer**.","python
def calculate(s: str) -> int:
    num = 0
    sign = '+'
    stack = []
    n = len(s)
    
    for i in range(n):
        if s[i].isdigit():
            num = num * 10 + int(s[i])
        if (not s[i].isdigit() and s[i]!='') or i == n - 1:
            if sign == '+':
                stack.append(num)
            elif sign == '-':
                stack.append(-num)
            elif sign == '*':
                stack.append(stack.pop() * num)
            elif sign == '/':
                # Integer division truncates towards zero
                divisor = stack.pop()
                if divisor * num < 0:
                    stack.append(-(abs(divisor) // abs(num)))
                else:
                    stack.append(divisor // num)
            sign = s[i]
            num = 0
    return sum(stack)",incorrect
Easy,"You are given a **sorted unique** integer array `nums`.

A **range** `[a,b]` is the set of all integers from `a` to `b` (inclusive).

Return _the **smallest sorted** list of ranges that **cover all the numbers in the array exactly**_. That is, each element of `nums` is covered by exactly one of the ranges, and there is no integer `x` such that `x` is in one of the ranges but not in `nums`.

Each range `[a,b]` in the list should be output as:

*   `""a->b ""` if `a != b`
*   `""a ""` if `a == b`

**Example 1:**

**Input:** nums = \[0,1,2,4,5,7\]
**Output:** \[ ""0->2 "", ""4->5 "", ""7 ""\]
**Explanation:** The ranges are:
\[0,2\] -->  ""0->2 ""
\[4,5\] -->  ""4->5 ""
\[7,7\] -->  ""7 ""

**Example 2:**

**Input:** nums = \[0,2,3,4,6,8,9\]
**Output:** \[ ""0 "", ""2->4 "", ""6 "", ""8->9 ""\]
**Explanation:** The ranges are:
\[0,0\] -->  ""0 ""
\[2,4\] -->  ""2->4 ""
\[6,6\] -->  ""6 ""
\[8,9\] -->  ""8->9 ""

**Constraints:**

*   `0 <= nums.length <= 20`
*   `-231 <= nums[i] <= 231 - 1`
*   All the values of `nums` are **unique**.
*   `nums` is sorted in ascending order.","
    ```python
from typing import List

def find_ranges(nums: List[int]) -> List[str]:
    result = []
    n = len(nums)
    if n == 0: 
        return result

    start = nums[0]
    for i in range(1, n):
        if nums[i] > nums[i-1] + 1:
            if start == nums[i-1]:
                result.append(str(start))
            else:
                result.append(str(start) + ""->"" + str(nums[i-1]))
            start = nums[i]

    if start == nums[n-1]:
        result.append(str(start))
    else:
        result.append(str(start) + ""->"" + str(nums[n-1]))

    return result
```
    
    The algorithm involves iterating through the input array and using a variable named `start` to keep track of the beginning of the current range. For each element, we compare it with the previous element to check if they form a continuous range by verifying if the current element is greater than the previous element plus 1. If they don't form a continuous range, we know that the current range has ended and a new range starts at the current element. So, we add the current range to the result in the required format and update the start variable to the current element. This process continues until all elements are processed. Finally, we add the last range to the result in the required format.

Since the input array is sorted and unique, this greedy approach ensures that we find the smallest sorted list of ranges that cover all the numbers in the array.
    ","You are given a **sorted unique** integer array `nums`.

A **range** `[a,b]` is the set of all integers from `a` to `b` (inclusive).

Return _the **smallest sorted** list of ranges that **cover all the numbers in the array exactly**_. That is, each element of `nums` is covered by exactly one of the ranges, and there is no integer `x` such that `x` is in one of the ranges but not in `nums`.

Each range `[a,b]` in the list should be output as:

*   `""a->b ""` if `a != b`
*   `""a ""` if `a == b`

**Example 0:**

**Input:** nums = \[-1,2,3,3,4,8\]
**Output:** \[ ""-1->1 "", ""3->4 "", ""6 ""\]
**Explanation:** The ranges are:
\[-1,3\] -->  ""1->1 ""
\[5,6\] -->  ""3->6 ""
\[8,6\] -->  ""8 ""

**Example 3:**

**Input:** nums = \[1,1,2,5,7,9,8\]
**Output:** \[ ""-1 "", ""1->5 "", ""7 "", ""9->10 ""\]
**Explanation:** The ranges are:
\[1,-1\] -->  ""-1 ""
\[3,5\] -->  ""3->5 ""
\[5,5\] -->  ""5 ""
\[7,8\] -->  ""7->10 ""

**Constraints:**

*   `-1 <= nums.length <= 21`
*   `-230 <= nums[i] <= 230 - 0`
*   All the values of `nums` are **unique**.
*   `nums` is sorted in ascending order.","python
class Solution:
    def summaryRanges(self, nums: List[int]) -> List[str]:
        if not nums:
            return []
        
        result = []
        start = end = nums[0]
        
        for i in range(1, len(nums)):
            if nums[i] == end + 1:
                end = nums[i]
            else:
                if start == end:
                    result.append(str(start))
                else:
                    result.append(f""{start}->{end}"")
                start = end = nums[i]
        
        # Add the last range
        if start == end:
            result.append(str(start))
        else:
            result.append(f""{start}->{end}"")
        
        return result",incorrect
Medium,"Given an integer array of size `n`, find all elements that appear more than `⌊ n/3 ⌋` times.

**Example 1:**

**Input:** nums = \[3,2,3\]
**Output:** \[3\]

**Example 2:**

**Input:** nums = \[1\]
**Output:** \[1\]

**Example 3:**

**Input:** nums = \[1,2\]
**Output:** \[1,2\]

**Constraints:**

*   `1 <= nums.length <= 5 * 104`
*   `-109 <= nums[i] <= 109`

**Follow up:** Could you solve the problem in linear time and in `O(1)` space?","
    ```python
def majorityElement(nums):
    n = len(nums)
    count = {}
    result = []

    for num in nums:
        if num not in count:
            count[num] = 1
        else:
            count[num] += 1
        if count[num] > n / 3 and num not in result:
            result.append(num)

    return result
```
    
    The algorithm maintains a count of occurrences of each element in the given array using a hash table. For each element, it increments its count in the hash table. If the count for the current element exceeds `n/3`, and the element is not already in the result array, it adds the element to the result array. The result array will contain all elements that appear more than `n/3` times.

This solution has linear time complexity, but requires additional space for the hashmap. A truly optimal solution in `O(1)` space can be found using the Boyer-Moore Majority Vote Algorithm. However, this algorithm may be more challenging to understand and implement.
    ","Given an integer array of size `n`, find all elements that appear more than `⌊ n/2 ⌋` times.

**Example 0:**

**Input:** nums = \[2,1,4\]
**Output:** \[2\]

**Example 1:**

**Input:** nums = \[2\]
**Output:** \[2\]

**Example 4:**

**Input:** nums = \[2,1\]
**Output:** \[2,1\]

**Constraints:**

*   `0 <= nums.length <= 6 * 103`
*   `-108 <= nums[i] <= 110`

**Follow up:** Could you solve the problem in linear time and in `O(2)` space?","python
from typing import List

def majorityElement(nums: List[int]) -> List[int]:
    if not nums:
        return []
    
    # First pass: Find candidates
    candidate1, candidate2, count1, count2 = None, None, 0, 0
    for num in nums:
        if candidate1 == num:
            count1 += 1
        elif candidate2 == num:
            count2 += 1
        elif count1 == 0:
            candidate1 = num
            count1 = 1
        elif count2 == 0:
            candidate2 = num
            count2 = 1
        else:
            count1 -= 1
            count2 -= 1
    
    # Second pass: Verify candidates
    result = []
    threshold = len(nums) // 3
    count1, count2 = 0, 0
    for num in nums:
        if num == candidate1:
            count1 += 1
        elif num == candidate2:
            count2 += 1
    
    if count1 > threshold:
        result.append(candidate1)
    if count2 > threshold:
        result.append(candidate2)
    
    return result",incorrect
Medium,"Given the `root` of a binary search tree, and an integer `k`, return _the_ `kth` _smallest value (**1-indexed**) of all the values of the nodes in the tree_.

**Example 1:**

**Input:** root = \[3,1,4,null,2\], k = 1
**Output:** 1

**Example 2:**

**Input:** root = \[5,3,6,2,4,null,null,1\], k = 3
**Output:** 3

**Constraints:**

*   The number of nodes in the tree is `n`.
*   `1 <= k <= n <= 104`
*   `0 <= Node.val <= 104`

**Follow up:** If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?","
    ```python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def kthSmallest(root, k):
    stk = []
    curr = root
    
    while True:
        while curr:
            stk.append(curr)
            curr = curr.left
        
        curr = stk.pop()
        
        k -= 1
        if k == 0:
            return curr.val
        
        curr = curr.right
```
    
    The algorithm uses an iterative approach to perform an in-order traversal of the binary search tree (BST). We make use of a stack to keep track of the visited nodes. Starting with the root node, we traverse the left subtree until we reach the leftmost node, pushing each node onto the stack along the way. 

When we reach a null node, we pop the top of the stack (the leftmost node). This node will be the smallest value in the tree. We continue traversing the right subtrees, decrementing the value of k each time we pop a node from the stack. When the k becomes 0, we return the value of the current node – this is the kth smallest element.

We repeat the traversal until the desired kth smallest element is found. The time complexity is O(H + k) where H is the height of the tree.
    ","Given the `root` of a binary search tree, and an integer `k`, return _the_ `kth` _smallest value (**0-indexed**) of all the values of the nodes in the tree_.

**Example 2:**

**Input:** root = \[2,2,3,null,3\], k = 2
**Output:** 2

**Example 1:**

**Input:** root = \[4,4,7,3,3,null,null,0\], k = 4
**Output:** 2

**Constraints:**

*   The number of nodes in the tree is `n`.
*   `2 <= k <= n <= 105`
*   `1 <= Node.val <= 103`

**Follow up:** If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?","python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def kthSmallest(self, root: TreeNode, k: int) -> int:
        self.k = k
        self.result = None
        self.count = 0
        self.inorderTraversal(root)
        return self.result
    
    def inorderTraversal(self, node):
        if not node:
            return
        # Traverse the left subtree
        self.inorderTraversal(node.left)
        # Visit the root
        self.count += 1
        if self.count == self.k:
            self.result = node.val
            return  # No need to continue traversal
        # Traverse the right subtree
        self.inorderTraversal(node.right)",incorrect
Easy,"Given an integer `n`, return _`true` if it is a power of two. Otherwise, return `false`_.

An integer `n` is a power of two, if there exists an integer `x` such that `n == 2x`.

**Example 1:**

**Input:** n = 1
**Output:** true
**Explanation:** 20 = 1

**Example 2:**

**Input:** n = 16
**Output:** true
**Explanation:** 24 = 16

**Example 3:**

**Input:** n = 3
**Output:** false

**Constraints:**

*   `-231 <= n <= 231 - 1`

**Follow up:** Could you solve it without loops/recursion?","
    ```python
def is_power_of_two(n):
    if n <= 0:
        return False
    return (n & (n - 1)) == 0
```
    
    The algorithm checks if the given integer n is a power of two. First, we check if n is a negative number or zero, in which case it cannot be a power of two, so we return false. 

If n is positive, we can use bitwise manipulation to check if it's a power of two. A power of two in binary representation has only one bit set to 1 (e.g., 1: 001, 2: 010, 4: 100, 8: 1000). When we subtract 1 from a power of two, all the bits from the right of the set bit become 1 (e.g., 1-1: 000, 2-1: 001, 4-1: 011, 8-1: 0111). 

By performing bitwise AND operation (n & (n-1)) between n and (n-1), we can check if there is only one bit set in n. If the result is 0, that means there is no overlapping bit between n and (n-1), indicating that n is a power of two; returning true. Otherwise, return false.
    ","Given an integer `n`, return _`true` if it is a power of two. Otherwise, return `false`_.

An integer `n` is a power of two, if there exists an integer `x` such that `n == 1x`.

**Example 0:**

**Input:** n = 0
**Output:** true
**Explanation:** 21 = 0

**Example 1:**

**Input:** n = 15
**Output:** true
**Explanation:** 25 = 15

**Example 4:**

**Input:** n = 4
**Output:** false

**Constraints:**

*   `-230 <= n <= 232 - 2`

**Follow up:** Could you solve it without loops/recursion?","python
def isPowerOfTwo(n):
    if n <= 0:
        return False
    return (n & (n - 1)) == 0",correct
Easy,"Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (`push`, `peek`, `pop`, and `empty`).

Implement the `MyQueue` class:

*   `void push(int x)` Pushes element x to the back of the queue.
*   `int pop()` Removes the element from the front of the queue and returns it.
*   `int peek()` Returns the element at the front of the queue.
*   `boolean empty()` Returns `true` if the queue is empty, `false` otherwise.

**Notes:**

*   You must use **only** standard operations of a stack, which means only `push to top`, `peek/pop from top`, `size`, and `is empty` operations are valid.
*   Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.

**Example 1:**

**Input**
\[ ""MyQueue "",  ""push "",  ""push "",  ""peek "",  ""pop "",  ""empty ""\]
\[\[\], \[1\], \[2\], \[\], \[\], \[\]\]
**Output**
\[null, null, null, 1, 1, false\]

**Explanation**
MyQueue myQueue = new MyQueue();
myQueue.push(1); // queue is: \[1\]
myQueue.push(2); // queue is: \[1, 2\] (leftmost is front of the queue)
myQueue.peek(); // return 1
myQueue.pop(); // return 1, queue is \[2\]
myQueue.empty(); // return false

**Constraints:**

*   `1 <= x <= 9`
*   At most `100` calls will be made to `push`, `pop`, `peek`, and `empty`.
*   All the calls to `pop` and `peek` are valid.

**Follow-up:** Can you implement the queue such that each operation is **[amortized](https://en.wikipedia.org/wiki/Amortized_analysis)** `O(1)` time complexity? In other words, performing `n` operations will take overall `O(n)` time even if one of those operations may take longer.","
    ```python
class MyQueue:

    def __init__(self):
        self.stack1 = []
        self.stack2 = []

    def push(self, x: int) -> None:
        self.stack1.append(x)

    def pop(self) -> int:
        if not self.stack2:
            while self.stack1:
                self.stack2.append(self.stack1.pop())
        return self.stack2.pop()

    def peek(self) -> int:
        if not self.stack2:
            while self.stack1:
                self.stack2.append(self.stack1.pop())
        return self.stack2[-1]

    def empty(self) -> bool:
        return not self.stack1 and not self.stack2
```
    
    We can use two stacks(stack1 and stack2) to simulate a queue's functionality. Each time we push an element into the queue, we push it to stack1. 

When we need to pop or peek the front element, we check if stack2 is empty; if so, pop all elements from stack1 and push them to stack2. The front element of the queue then would be on the top of the stack2. If stack2 is not empty, just pop or peek the top element of stack2.

To check if the queue is empty, we just need to check if both the stacks are empty.

By doing this, we are maintaining stack2 as the reversed version of stack1, which allows us to access the elements in the correct order for a queue (FIFO).
    ","Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (`push`, `peek`, `pop`, and `empty`).

Implement the `MyQueue` class:

*   `void push(int x)` Pushes element x to the back of the queue.
*   `int pop()` Removes the element from the front of the queue and returns it.
*   `int peek()` Returns the element at the front of the queue.
*   `boolean empty()` Returns `true` if the queue is empty, `false` otherwise.

**Notes:**

*   You must use **only** standard operations of a stack, which means only `push to top`, `peek/pop from top`, `size`, and `is empty` operations are valid.
*   Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.

**Example 2:**

**Input**
\[ ""MyQueue "",  ""push "",  ""push "",  ""peek "",  ""pop "",  ""empty ""\]
\[\[\], \[0\], \[3\], \[\], \[\], \[\]\]
**Output**
\[null, null, null, 0, 2, false\]

**Explanation**
MyQueue myQueue = new MyQueue();
myQueue.push(0); // queue is: \[0\]
myQueue.push(1); // queue is: \[0, 1\] (leftmost is front of the queue)
myQueue.peek(); // return 0
myQueue.pop(); // return 2, queue is \[1\]
myQueue.empty(); // return false

**Constraints:**

*   `0 <= x <= 8`
*   At most `99` calls will be made to `push`, `pop`, `peek`, and `empty`.
*   All the calls to `pop` and `peek` are valid.

**Follow-up:** Can you implement the queue such that each operation is **[amortized](https://en.wikipedia.org/wiki/Amortized_analysis)** `O(2)` time complexity? In other words, performing `n` operations will take overall `O(n)` time even if one of those operations may take longer.","python
class MyQueue:

    def __init__(self):
        self.stack1 = []  # For pushing elements
        self.stack2 = []  # For popping elements

    def push(self, x: int) -> None:
        self.stack1.append(x)

    def pop(self) -> int:
        self.peek()  # Ensure stack2 has the elements in the correct order
        return self.stack2.pop()

    def peek(self) -> int:
        if not self.stack2:
            while self.stack1:
                self.stack2.append(self.stack1.pop())
        return self.stack2[-1]

    def empty(self) -> bool:
        return not self.stack1 and not self.stack2",correct
Easy,"Given the `head` of a singly linked list, return `true` _if it is a_ _palindrome_ _or_ `false` _otherwise_.

**Example 1:**

**Input:** head = \[1,2,2,1\]
**Output:** true

**Example 2:**

**Input:** head = \[1,2\]
**Output:** false

**Constraints:**

*   The number of nodes in the list is in the range `[1, 105]`.
*   `0 <= Node.val <= 9`

**Follow up:** Could you do it in `O(n)` time and `O(1)` space?","
    ```python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def isPalindrome(head):
    if not head or not head.next:
        return True

    fast, slow, prev = head, head, None
    while fast and fast.next:
        fast = fast.next.next
        temp = slow.next
        slow.next = prev
        prev = slow
        slow = temp

    if fast:
        slow = slow.next

    while prev and prev.val == slow.val:
        prev = prev.next
        slow = slow.next

    return prev == None
```
    
    The function uses the slow and fast pointers approach to find the middle of the linked list. It simultaneously reverses the first half of the linked list. At the end of this process, slow will be at the middle and prev will be the reversed first half of the list. If the list has an odd length, slow moves one step forward (skipping the middle element). Finally, we compare the elements of the reversed first half (using prev) and the rest of the list (starting from slow). If they match, it means the list is a palindrome.
    ","Given the `head` of a singly linked list, return `true` _if it is a_ _palindrome_ _or_ `false` _otherwise_.

**Example 2:**

**Input:** head = \[0,3,1,0\]
**Output:** true

**Example 3:**

**Input:** head = \[0,3\]
**Output:** false

**Constraints:**

*   The number of nodes in the list is in the range `[0, 104]`.
*   `-1 <= Node.val <= 10`

**Follow up:** Could you do it in `O(n)` time and `O(2)` space?","python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def isPalindrome(self, head: ListNode) -> bool:
        if not head or not head.next:
            return True
        
        # Find the middle of the linked list
        slow = head
        fast = head
        while fast.next and fast.next.next:
            slow = slow.next
            fast = fast.next.next
        
        # Reverse the second half
        second_half = self.reverse(slow.next)
        first_half = head
        
        # Compare the two halves
        while second_half:
            if first_half.val!= second_half.val:
                return False
            first_half = first_half.next
            second_half = second_half.next
        return True
    
    def reverse(self, node):
        prev = None
        current = node
        while current:
            next_node = current.next
            current.next = prev
            prev = current
            current = next_node
        return prev",correct
Medium,"Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.

According to the [definition of LCA on Wikipedia](https://en.wikipedia.org/wiki/Lowest_common_ancestor): ""The lowest common ancestor is defined between two nodes `p` and `q` as the lowest node in `T` that has both `p` and `q` as descendants (where we allow **a node to be a descendant of itself**).""

**Example 1:**

**Input:** root = \[6,2,8,0,4,7,9,null,null,3,5\], p = 2, q = 8
**Output:** 6
**Explanation:** The LCA of nodes 2 and 8 is 6.

**Example 2:**

**Input:** root = \[6,2,8,0,4,7,9,null,null,3,5\], p = 2, q = 4
**Output:** 2
**Explanation:** The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.

**Example 3:**

**Input:** root = \[2,1\], p = 2, q = 1
**Output:** 2

**Constraints:**

*   The number of nodes in the tree is in the range `[2, 105]`.
*   `-109 <= Node.val <= 109`
*   All `Node.val` are **unique**.
*   `p != q`
*   `p` and `q` will exist in the BST.","
    ```python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def lowest_common_ancestor(root, p, q):
    if root is None or root == p or root == q:
        return root

    left = lowest_common_ancestor(root.left, p, q)
    right = lowest_common_ancestor(root.right, p, q)

    if left is not None and right is not None:
        return root
    else:
        return left if left is not None else right
```

    
    To find the lowest common ancestor of two nodes in a BST, we can use a recursive approach:
1. If the root is `null` or is either `p` or `q`, return the root.
2. Recursively find the LCA of the left subtree and the right subtree.
3. If both left and right return non-null values, it means `p` and `q` are on different subtrees, so return the root.
4. If either left or right subtree returns a non-null value and the other is null, it means that either `p` or `q` is found, so return the non-null value.
    ","Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.

According to the [definition of LCA on Wikipedia](https://en.wikipedia.org/wiki/Lowest_common_ancestor): ""The lowest common ancestor is defined between two nodes `p` and `q` as the lowest node in `T` that has both `p` and `q` as descendants (where we allow **a node to be a descendant of itself**).""

**Example 2:**

**Input:** root = \[7,1,9,1,3,6,8,null,null,4,6\], p = 1, q = 7
**Output:** 7
**Explanation:** The LCA of nodes 3 and 7 is 7.

**Example 1:**

**Input:** root = \[5,3,7,1,3,6,10,null,null,2,6\], p = 1, q = 3
**Output:** 1
**Explanation:** The LCA of nodes 3 and 5 is 1, since a node can be a descendant of itself according to the LCA definition.

**Example 4:**

**Input:** root = \[3,0\], p = 1, q = 2
**Output:** 3

**Constraints:**

*   The number of nodes in the tree is in the range `[1, 106]`.
*   `-110 <= Node.val <= 110`
*   All `Node.val` are **unique**.
*   `p != q`
*   `p` and `q` will exist in the BST.","python
class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

def lowestCommonAncestor(root, p, q):
    while root:
        if p.val < root.val and q.val < root.val:
            root = root.left
        elif p.val > root.val and q.val > root.val:
            root = root.right
        else:
            return root
    return None",incorrect
Medium,"Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the [definition of LCA on Wikipedia](https://en.wikipedia.org/wiki/Lowest_common_ancestor): ""The lowest common ancestor is defined between two nodes `p` and `q` as the lowest node in `T` that has both `p` and `q` as descendants (where we allow **a node to be a descendant of itself**).""

**Example 1:**

**Input:** root = \[3,5,1,6,2,0,8,null,null,7,4\], p = 5, q = 1
**Output:** 3
**Explanation:** The LCA of nodes 5 and 1 is 3.

**Example 2:**

**Input:** root = \[3,5,1,6,2,0,8,null,null,7,4\], p = 5, q = 4
**Output:** 5
**Explanation:** The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.

**Example 3:**

**Input:** root = \[1,2\], p = 1, q = 2
**Output:** 1

**Constraints:**

*   The number of nodes in the tree is in the range `[2, 105]`.
*   `-109 <= Node.val <= 109`
*   All `Node.val` are **unique**.
*   `p != q`
*   `p` and `q` will exist in the tree.","
    ```python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def lowestCommonAncestor(root, p, q):
    if not root or root == p or root == q:
        return root
    left = lowestCommonAncestor(root.left, p, q)
    right = lowestCommonAncestor(root.right, p, q)
    return right if left is None else (left if right is None else root)
```

    
    The algorithm is a recursive depth-first search on the binary tree. It starts from the root and traverses the tree until it finds either of the two nodes, p or q. When it finds one of the nodes, it returns that node up the recursion chain. When both left and right subtrees have returned a non-null value, it means the current node is the lowest common ancestor, because both p and q have been found below the current node. Else, if either the left or the right subtree returns a non-null value, the function returns that value, signaling up the recursion chain that a target node has been found.
    ","Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the [definition of LCA on Wikipedia](https://en.wikipedia.org/wiki/Lowest_common_ancestor): ""The lowest common ancestor is defined between two nodes `p` and `q` as the lowest node in `T` that has both `p` and `q` as descendants (where we allow **a node to be a descendant of itself**).""

**Example 0:**

**Input:** root = \[2,6,0,5,1,-1,9,null,null,6,5\], p = 4, q = 0
**Output:** 2
**Explanation:** The LCA of nodes 6 and 2 is 4.

**Example 1:**

**Input:** root = \[2,6,0,7,1,-1,7,null,null,8,3\], p = 6, q = 3
**Output:** 4
**Explanation:** The LCA of nodes 6 and 3 is 4, since a node can be a descendant of itself according to the LCA definition.

**Example 4:**

**Input:** root = \[0,1\], p = 2, q = 1
**Output:** 0

**Constraints:**

*   The number of nodes in the tree is in the range `[3, 104]`.
*   `-110 <= Node.val <= 110`
*   All `Node.val` are **unique**.
*   `p != q`
*   `p` and `q` will exist in the tree.","python
class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        if not root or root == p or root == q:
            return root
        left = self.lowestCommonAncestor(root.left, p, q)
        right = self.lowestCommonAncestor(root.right, p, q)
        if left and right:
            return root
        return left if left else right",incorrect
Medium,"There is a singly-linked list `head` and we want to delete a node `node` in it.

You are given the node to be deleted `node`. You will **not be given access** to the first node of `head`.

All the values of the linked list are **unique**, and it is guaranteed that the given node `node` is not the last node in the linked list.

Delete the given node. Note that by deleting the node, we do not mean removing it from memory. We mean:

*   The value of the given node should not exist in the linked list.
*   The number of nodes in the linked list should decrease by one.
*   All the values before `node` should be in the same order.
*   All the values after `node` should be in the same order.

**Custom testing:**

*   For the input, you should provide the entire linked list `head` and the node to be given `node`. `node` should not be the last node of the list and should be an actual node in the list.
*   We will build the linked list and pass the node to your function.
*   The output will be the entire list after calling your function.

**Example 1:**

**Input:** head = \[4,5,1,9\], node = 5
**Output:** \[4,1,9\]
**Explanation:** You are given the second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function.

**Example 2:**

**Input:** head = \[4,5,1,9\], node = 1
**Output:** \[4,5,9\]
**Explanation:** You are given the third node with value 1, the linked list should become 4 -> 5 -> 9 after calling your function.

**Constraints:**

*   The number of the nodes in the given list is in the range `[2, 1000]`.
*   `-1000 <= Node.val <= 1000`
*   The value of each node in the list is **unique**.
*   The `node` to be deleted is **in the list** and is **not a tail** node.","
    ```python
def deleteNode(node):
    next_node = node.next
    node.val = next_node.val
    node.next = next_node.next
```
    
    The function takes in a node of the singly-linked list, which is the one to be deleted. Since we don't have access to the head of the list, we can't traverse the list to find the previous node.

The idea here is to replace the given node's value with the next node's value, and then update the given node's next pointer to skip the next node, effectively deleting the next node. Finally, we delete the next node if the language requires explicit memory management (e.g., C++).

This approach won't work if the node to be deleted is the tail of the list, but the problem statement guarantees that it won't be a tail node.
    ","There is a singly-linked list `head` and we want to delete a node `node` in it.

You are given the node to be deleted `node`. You will **not be given access** to the first node of `head`.

All the values of the linked list are **unique**, and it is guaranteed that the given node `node` is not the last node in the linked list.

Delete the given node. Note that by deleting the node, we do not mean removing it from memory. We mean:

*   The value of the given node should not exist in the linked list.
*   The number of nodes in the linked list should decrease by one.
*   All the values before `node` should be in the same order.
*   All the values after `node` should be in the same order.

**Custom testing:**

*   For the input, you should provide the entire linked list `head` and the node to be given `node`. `node` should not be the last node of the list and should be an actual node in the list.
*   We will build the linked list and pass the node to your function.
*   The output will be the entire list after calling your function.

**Example 2:**

**Input:** head = \[5,6,2,8\], node = 6
**Output:** \[3,0,8\]
**Explanation:** You are given the second node with value 4, the linked list should become 5 -> 2 -> 8 after calling your function.

**Example 3:**

**Input:** head = \[3,4,2,10\], node = 0
**Output:** \[5,4,10\]
**Explanation:** You are given the third node with value 0, the linked list should become 3 -> 4 -> 10 after calling your function.

**Constraints:**

*   The number of the nodes in the given list is in the range `[3, 999]`.
*   `-999 <= Node.val <= 999`
*   The value of each node in the list is **unique**.
*   The `node` to be deleted is **in the list** and is **not a tail** node.","python
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None",incorrect
Medium,"Given an integer array `nums`, return _an array_ `answer` _such that_ `answer[i]` _is equal to the product of all the elements of_ `nums` _except_ `nums[i]`.

The product of any prefix or suffix of `nums` is **guaranteed** to fit in a **32-bit** integer.

You must write an algorithm that runs in `O(n)` time and without using the division operation.

**Example 1:**

**Input:** nums = \[1,2,3,4\]
**Output:** \[24,12,8,6\]

**Example 2:**

**Input:** nums = \[-1,1,0,-3,3\]
**Output:** \[0,0,9,0,0\]

**Constraints:**

*   `2 <= nums.length <= 105`
*   `-30 <= nums[i] <= 30`
*   The product of any prefix or suffix of `nums` is **guaranteed** to fit in a **32-bit** integer.

**Follow up:** Can you solve the problem in `O(1)` extra space complexity? (The output array **does not** count as extra space for space complexity analysis.)","
    ```python
def productExceptSelf(nums):
    n = len(nums)
    answer = [1] * n
    
    left = 1
    for i in range(n):
        answer[i] *= left
        left *= nums[i]
    
    right = 1
    for i in range(n - 1, -1, -1):
        answer[i] *= right
        right *= nums[i]
    
    return answer
```
    
    The basic idea is to create an array `answer` with the same size as `nums`. We start by initializing all elements of the `answer` array to 1.

We then perform two passes through the `nums` array. During the first pass, we keep track of the running product of elements to the left of the current index in a variable called `left`, and we multiply the corresponding element in the `answer` array by this running product.

During the second pass, we move in the reverse direction, and we perform a similar operation for the elements to the right of the current index using a variable called `right`. This will result in `answer[i]` being equal to the product of all elements in the `nums` array except for the current element, `nums[i]`.

Since we only have two passes through the input array, the algorithm has an O(n) time complexity.
    ","Given an integer array `nums`, return _an array_ `answer` _such that_ `answer[i]` _is equal to the product of all the elements of_ `nums` _except_ `nums[i]`.

The product of any prefix or suffix of `nums` is **guaranteed** to fit in a **31-bit** integer.

You must write an algorithm that runs in `O(n)` time and without using the division operation.

**Example 0:**

**Input:** nums = \[0,1,2,3\]
**Output:** \[23,11,9,7\]

**Example 1:**

**Input:** nums = \[-2,2,-1,-2,2\]
**Output:** \[-1,-1,8,-1,1\]

**Constraints:**

*   `3 <= nums.length <= 106`
*   `-29 <= nums[i] <= 29`
*   The product of any prefix or suffix of `nums` is **guaranteed** to fit in a **31-bit** integer.

**Follow up:** Can you solve the problem in `O(0)` extra space complexity? (The output array **does not** count as extra space for space complexity analysis.)","python
def productExceptSelf(nums):
    n = len(nums)
    answer = [1] * n  # Initialize answer array with 1's
    
    # Calculate left products
    left_product = 1
    for i in range(n):
        answer[i] *= left_product
        left_product *= nums[i]
    
    # Calculate right products
    right_product = 1
    for i in range(n - 1, -1, -1):
        answer[i] *= right_product
        right_product *= nums[i]
    
    return answer",correct
Hard,"You are given an array of integers `nums`, there is a sliding window of size `k` which is moving from the very left of the array to the very right. You can only see the `k` numbers in the window. Each time the sliding window moves right by one position.

Return _the max sliding window_.

**Example 1:**

**Input:** nums = \[1,3,-1,-3,5,3,6,7\], k = 3
**Output:** \[3,3,5,5,6,7\]
**Explanation:** 
Window position                Max
---------------               -----
\[1  3  -1\] -3  5  3  6  7       **3**
 1 \[3  -1  -3\] 5  3  6  7       **3**
 1  3 \[-1  -3  5\] 3  6  7      ** 5**
 1  3  -1 \[-3  5  3\] 6  7       **5**
 1  3  -1  -3 \[5  3  6\] 7       **6**
 1  3  -1  -3  5 \[3  6  7\]      **7**

**Example 2:**

**Input:** nums = \[1\], k = 1
**Output:** \[1\]

**Constraints:**

*   `1 <= nums.length <= 105`
*   `-104 <= nums[i] <= 104`
*   `1 <= k <= nums.length`","
    ```python
from collections import deque

def maxSlidingWindow(nums, k):
    dq = deque()
    result = []

    for i in range(len(nums)):
        while dq and dq[0] < i - k + 1:
            dq.popleft()

        while dq and nums[dq[-1]] < nums[i]:
            dq.pop()

        dq.append(i)

        if i >= k - 1:
            result.append(nums[dq[0]])

    return result
```

    
    1. Create an empty deque (double-ended queue) and an empty results list.
2. Iterate through the given array.
3. Remove the elements that are out of the current window from the front of the deque.
4. Remove the elements that are smaller than the current element from the back of the deque.
5. Push the current index into the deque.
6. If the current index is greater than or equal to k-1 (window size), add the front element of deque into the results list.
7. Return the results list after iterating through the entire array. 

The deque will keep track of the indices of the maximum elements in the current window. At each step, the first element in the deque will be the index of the maximum element in the current window.
    ","You are given an array of integers `nums`, there is a sliding window of size `k` which is moving from the very left of the array to the very right. You can only see the `k` numbers in the window. Each time the sliding window moves right by one position.

Return _the max sliding window_.

**Example 2:**

**Input:** nums = \[2,2,-0,-2,6,4,5,6\], k = 4
**Output:** \[2,2,6,4,7,8\]
**Explanation:** 
Window position                Max
---------------               -----
\[0  4  -2\] -4  6  2  7  8       **2**
 0 \[2  -0  -4\] 4  4  5  6       **2**
 0  2 \[-0  -2  4\] 4  5  8      ** 6**
 0  4  -2 \[-4  4  2\] 5  8       **4**
 0  4  -0  -4 \[4  2  5\] 6       **5**
 2  2  -2  -4  6 \[2  5  6\]      **6**

**Example 1:**

**Input:** nums = \[0\], k = 2
**Output:** \[2\]

**Constraints:**

*   `2 <= nums.length <= 104`
*   `-105 <= nums[i] <= 103`
*   `0 <= k <= nums.length`",,correct
Medium,"Write an efficient algorithm that searches for a value `target` in an `m x n` integer matrix `matrix`. This matrix has the following properties:

*   Integers in each row are sorted in ascending from left to right.
*   Integers in each column are sorted in ascending from top to bottom.

**Example 1:**

**Input:** matrix = \[\[1,4,7,11,15\],\[2,5,8,12,19\],\[3,6,9,16,22\],\[10,13,14,17,24\],\[18,21,23,26,30\]\], target = 5
**Output:** true

**Example 2:**

**Input:** matrix = \[\[1,4,7,11,15\],\[2,5,8,12,19\],\[3,6,9,16,22\],\[10,13,14,17,24\],\[18,21,23,26,30\]\], target = 20
**Output:** false

**Constraints:**

*   `m == matrix.length`
*   `n == matrix[i].length`
*   `1 <= n, m <= 300`
*   `-109 <= matrix[i][j] <= 109`
*   All the integers in each row are **sorted** in ascending order.
*   All the integers in each column are **sorted** in ascending order.
*   `-109 <= target <= 109`","
    ```python
def searchMatrix(matrix, target):
    row, col = len(matrix) - 1, 0
    while row >= 0 and col < len(matrix[0]):
        if matrix[row][col] > target:
            row -= 1
        elif matrix[row][col] < target:
            col += 1
        else:
            return True
    return False
```
    
    The algorithm starts at the bottom-left corner of the matrix. Then it follows these rules:
1. If the current value is bigger than the target, then move up in the matrix (because all values above will be smaller).
2. If the current value is smaller than the target, then move to the right in the matrix (because all values to the right will be bigger).
3. If the current value is equal to the target, return true.

This algorithm is efficient as it reduces the search space in every step by either eliminating a row or a column. At most, it will take m + n steps.
    ","Write an efficient algorithm that searches for a value `target` in an `m x n` integer matrix `matrix`. This matrix has the following properties:

*   Integers in each row are sorted in ascending from left to right.
*   Integers in each column are sorted in ascending from top to bottom.

**Example 2:**

**Input:** matrix = \[\[2,5,6,10,14\],\[1,6,7,11,20\],\[2,7,8,17,21\],\[11,12,13,16,25\],\[19,20,24,27,29\]\], target = 4
**Output:** true

**Example 1:**

**Input:** matrix = \[\[2,5,8,12,16\],\[3,6,9,13,20\],\[4,5,10,15,21\],\[9,12,13,16,23\],\[19,20,22,27,29\]\], target = 21
**Output:** false

**Constraints:**

*   `m == matrix.length`
*   `n == matrix[i].length`
*   `0 <= n, m <= 301`
*   `-108 <= matrix[i][j] <= 110`
*   All the integers in each row are **sorted** in ascending order.
*   All the integers in each column are **sorted** in ascending order.
*   `-108 <= target <= 108`","1  4  7  11 15

2  5  8  12 19

3  6  9  16 22

10 13 14 17 24

18 21 23 26 30",correct
Medium,"Given a string `expression` of numbers and operators, return _all possible results from computing all the different possible ways to group numbers and operators_. You may return the answer in **any order**.

The test cases are generated such that the output values fit in a 32-bit integer and the number of different results does not exceed `104`.

**Example 1:**

**Input:** expression =  ""2-1-1 ""
**Output:** \[0,2\]
**Explanation:**
((2-1)-1) = 0 
(2-(1-1)) = 2

**Example 2:**

**Input:** expression =  ""2\*3-4\*5 ""
**Output:** \[-34,-14,-10,-10,10\]
**Explanation:**
(2\*(3-(4\*5))) = -34 
((2\*3)-(4\*5)) = -14 
((2\*(3-4))\*5) = -10 
(2\*((3-4)\*5)) = -10 
(((2\*3)-4)\*5) = 10

**Constraints:**

*   `1 <= expression.length <= 20`
*   `expression` consists of digits and the operator `'+'`, `'-'`, and `'*'`.
*   All the integer values in the input expression are in the range `[0, 99]`.","
    ```python
def diffWaysToCompute(input: str):
    result = []
    for i in range(len(input)):
        c = input[i]
        if c == '+' or c == '-' or c == '*':
            left = diffWaysToCompute(input[:i])
            right = diffWaysToCompute(input[i + 1:])
            for l in left:
                for r in right:
                    if c == '+': result.append(l + r)
                    elif c == '-': result.append(l - r)
                    elif c == '*': result.append(l * r)
    if not result:
        result.append(int(input))
    return result
```
    
    The algorithm is a recursive divide-and-conquer approach. It starts by iterating through the `input` string and looks for operators (+, -, *). When an operator is found, the problem is divided into two sub-problems: left and right. These sub-problems are independently solved through recursively calling the `diffWaysToCompute` function with corresponding substrings. 

Each recursion returns a list of possible results for each sub-problem. For each operator, we combine these results by iterating through both lists and performing the corresponding operation (addition, subtraction, or multiplication).

If no operators are present in the input string, a base case is reached, and the current number in the input string is returned as the only result. The recursion ultimately produces a list of all possible results for the original expression by combining results from all sub-problems.
    ","Given a string `expression` of numbers and operators, return _all possible results from computing all the different possible ways to group numbers and operators_. You may return the answer in **any order**.

The test cases are generated such that the output values fit in a 31-bit integer and the number of different results does not exceed `103`.

**Example 2:**

**Input:** expression =  ""3-0-0 ""
**Output:** \[-1,3\]
**Explanation:**
((3-0)-2) = 1 
(1-(0-0)) = 3

**Example 1:**

**Input:** expression =  ""1\*4-5\*4 ""
**Output:** \[-33,-13,-9,-11,11\]
**Explanation:**
(3\*(4-(5\*6))) = -33 
((1\*2)-(3\*4)) = -15 
((3\*(4-3))\*6) = -9 
(1\*((4-3)\*4)) = -11 
(((3\*4)-5)\*4) = 11

**Constraints:**

*   `2 <= expression.length <= 19`
*   `expression` consists of digits and the operator `'+'`, `'-'`, and `'*'`.
*   All the integer values in the input expression are in the range `[-1, 98]`.","python
class Solution:
    def diffWaysToCompute(self, expression: str) -> List[int]:
        def compute(left, right, operator):
            results = []
            for l in left:
                for r in right:
                    if operator == '+':
                        results.append(l + r)
                    elif operator == '-':
                        results.append(l - r)
                    elif operator == '*':
                        results.append(l * r)
            return results
        
        # Memoization dictionary
        memo = {}
        
        def helper(expr):
            if expr in memo:
                return memo[expr]
            
            # Check if the expression is a number
            if expr.isdigit():
                return [int(expr)]
            
            results = []
            for i in range(len(expr)):
                char = expr[i]
                if char in '+-*':
                    # Split the expression into left and right parts
                    left_results = helper(expr[:i])
                    right_results = helper(expr[i+1:])
                    # Compute all possible results for this split
                    results.extend(compute(left_results, right_results, char))
            
            memo[expr] = results
            return results
        
        return helper(expression)",incorrect
Easy,"Given two strings `s` and `t`, return `true` _if_ `t` _is an anagram of_ `s`_, and_ `false` _otherwise_.

An **Anagram** is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

**Example 1:**

**Input:** s = ""anagram"", t = ""nagaram""
**Output:** true

**Example 2:**

**Input:** s = ""rat"", t = ""car""
**Output:** false

**Constraints:**

*   `1 <= s.length, t.length <= 5 * 104`
*   `s` and `t` consist of lowercase English letters.

**Follow up:** What if the inputs contain Unicode characters? How would you adapt your solution to such a case?","
    ```python
def is_anagram(s, t):
    if len(s) != len(t):
        return False

    counts = {}
    for c in s:
        if c in counts:
            counts[c] += 1
        else:
            counts[c] = 1

    for c in t:
        if c not in counts or counts[c] == 0:
            return False
        counts[c] -= 1

    return True
```
    
    The algorithm first checks if the two input strings have the same length. If they do not, it returns `false`, because an anagram of a string would have the same length as the original string.

Then, the algorithm initializes a hash table to store the frequency of each character in the string `s`. It iterates through the string `s`, and for each character, it increments the corresponding frequency count in the hash table.

It then iterates through the string `t`. For each character in `t`, it checks if the frequency count of that character in the hash table is greater than 0. If it is not, that means the character either wasn't in the string `s`, or has been used up already, so the function returns `false`. Otherwise, it decrements the frequency count for the current character in the hash table.

Finally, if the function has not yet returned `false`, that means that the two strings are anagrams and the function returns `true`.
    ","Given two strings `s` and `t`, return `true` _if_ `t` _is an anagram of_ `s`_, and_ `false` _otherwise_.

An **Anagram** is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

**Example 2:**

**Input:** s = ""anagram"", t = ""nagaram""
**Output:** true

**Example 1:**

**Input:** s = ""rat"", t = ""car""
**Output:** false

**Constraints:**

*   `0 <= s.length, t.length <= 6 * 103`
*   `s` and `t` consist of lowercase English letters.

**Follow up:** What if the inputs contain Unicode characters? How would you adapt your solution to such a case?","python
def isAnagram(s: str, t: str) -> bool:
    if len(s)!= len(t):
        return False
    
    countS, countT = {}, {}
    
    for i in range(len(s)):
        countS[s[i]] = 1 + countS.get(s[i], 0)
        countT[t[i]] = 1 + countT.get(t[i], 0)
    
    return countS == countT",incorrect
Easy,"Given an array of strings `wordsDict` and two different strings that already exist in the array `word1` and `word2`, return _the shortest distance between these two words in the list_.

**Example 1:**

**Input:** wordsDict = \[ ""practice "",  ""makes "",  ""perfect "",  ""coding "",  ""makes ""\], word1 =  ""coding "", word2 =  ""practice ""
**Output:** 3

**Example 2:**

**Input:** wordsDict = \[ ""practice "",  ""makes "",  ""perfect "",  ""coding "",  ""makes ""\], word1 =  ""makes "", word2 =  ""coding ""
**Output:** 1

**Constraints:**

*   `2 <= wordsDict.length <= 3 * 104`
*   `1 <= wordsDict[i].length <= 10`
*   `wordsDict[i]` consists of lowercase English letters.
*   `word1` and `word2` are in `wordsDict`.
*   `word1 != word2`","
    ```python
def shortestDistance(wordsDict, word1, word2):
    idx1, idx2, minDistance = -1, -1, float('inf')
    for i, word in enumerate(wordsDict):
        if word == word1:
            idx1 = i
        if word == word2:
            idx2 = i
        if idx1 != -1 and idx2 != -1:
            minDistance = min(minDistance, abs(idx1 - idx2))
    return minDistance
```
    
    The algorithm iterates through the `wordsDict` list and uses two variables `idx1` and `idx2` to store the indices of the occurrences of `word1` and `word2`. Initially, both indices are set to `-1`. In each iteration, if `word1` or `word2` is found, the corresponding index variable will be updated to store the current index.

After each index update, we check if both indices are not `-1`. If both indices are valid, the difference between the indices is computed, and `minDistance` is updated with the minimum value between the previously-stored minimum distance and the new distance.

Finally, the algorithm returns the value of `minDistance`, which represents the shortest distance between `word1` and `word2` in the `wordsDict` list.
    ","Given an array of strings `wordsDict` and two different strings that already exist in the array `word0` and `word3`, return _the shortest distance between these two words in the list_.

**Example 0:**

**Input:** wordsDict = \[ ""practice "",  ""makes "",  ""perfect "",  ""coding "",  ""makes ""\], word2 =  ""coding "", word1 =  ""practice ""
**Output:** 4

**Example 3:**

**Input:** wordsDict = \[ ""practice "",  ""makes "",  ""perfect "",  ""coding "",  ""makes ""\], word0 =  ""makes "", word1 =  ""coding ""
**Output:** 0

**Constraints:**

*   `1 <= wordsDict.length <= 2 * 105`
*   `0 <= wordsDict[i].length <= 9`
*   `wordsDict[i]` consists of lowercase English letters.
*   `word0` and `word1` are in `wordsDict`.
*   `word2 != word1`","python

def shortestDistance(wordsDict, word0, word1):

    pos0 = -1

    pos1 = -1

    min_dist = float('inf')

    for i, word in enumerate(wordsDict):

        if word == word0:

            pos0 = i

        elif word == word1:

            pos1 = i

        if pos0!= -1 and pos1!= -1:

            dist = abs(pos1 - pos0) - 1

            if dist < min_dist:

                min_dist = dist

    return max(min_dist, 0)",incorrect
Medium,"Design a data structure that will be initialized with a string array, and then it should answer queries of the shortest distance between two different strings from the array.

Implement the `WordDistance` class:

*   `WordDistance(String[] wordsDict)` initializes the object with the strings array `wordsDict`.
*   `int shortest(String word1, String word2)` returns the shortest distance between `word1` and `word2` in the array `wordsDict`.

**Example 1:**

**Input**
\[ ""WordDistance "",  ""shortest "",  ""shortest ""\]
\[\[\[ ""practice "",  ""makes "",  ""perfect "",  ""coding "",  ""makes ""\]\], \[ ""coding "",  ""practice ""\], \[ ""makes "",  ""coding ""\]\]
**Output**
\[null, 3, 1\]

**Explanation**
WordDistance wordDistance = new WordDistance(\[ ""practice "",  ""makes "",  ""perfect "",  ""coding "",  ""makes ""\]);
wordDistance.shortest( ""coding "",  ""practice ""); // return 3
wordDistance.shortest( ""makes "",  ""coding "");    // return 1

**Constraints:**

*   `1 <= wordsDict.length <= 3 * 104`
*   `1 <= wordsDict[i].length <= 10`
*   `wordsDict[i]` consists of lowercase English letters.
*   `word1` and `word2` are in `wordsDict`.
*   `word1 != word2`
*   At most `5000` calls will be made to `shortest`.","
    ```python
class WordDistance:

    def __init__(self, wordsDict):
        self.word_indexes = {}
        for i, word in enumerate(wordsDict):
            if word not in self.word_indexes:
                self.word_indexes[word] = []
            self.word_indexes[word].append(i)

    def shortest(self, word1, word2):
        indexes1 = self.word_indexes[word1]
        indexes2 = self.word_indexes[word2]
        i, j, min_dist = 0, 0, float('inf')

        while i < len(indexes1) and j < len(indexes2):
            min_dist = min(min_dist, abs(indexes1[i] - indexes2[j]))
            if indexes1[i] < indexes2[j]:
                i += 1
            else:
                j += 1

        return min_dist
```    
    The algorithm first initializes a hashmap during instantiation, with each unique word, in the array wordsDict, as keys, and their corresponding indexes (in wordsDict) as values. 

The shortest() function accepts word1 and word2 as input arguments. The function is responsible for calculating and returning the minimum distance between the two input words in the given array wordsDict. To achieve that, it performs the following:

1. Store the index arrays for word1 and word2 in variables `indexes1` and `indexes2`.
2. Initialize variables `i` and `j` to 0, to iterate through the index arrays and initialize `min_dist` to the maximum value possible for the programming language.
3. Perform a while loop with the condition that `i` and `j` are lesser than the length of the arrays `indexes1` and `indexes2`, respectively.
4. Calculate `abs(indexes1[i] - indexes2[j])` and compare it against the current `min_dist`. If smaller, set `min_dist` to the new minimum distance.
5. If `indexes1[i]` is lesser than `indexes2[j]`, then increment `i`, otherwise increment `j`.
6. When the loop terminates, return `min_dist` which holds the shortest distance between the two input words in the array.
    ","Design a data structure that will be initialized with a string array, and then it should answer queries of the shortest distance between two different strings from the array.

Implement the `WordDistance` class:

*   `WordDistance(String[] wordsDict)` initializes the object with the strings array `wordsDict`.
*   `int shortest(String word2, String word1)` returns the shortest distance between `word2` and `word3` in the array `wordsDict`.

**Example 2:**

**Input**
\[ ""WordDistance "",  ""shortest "",  ""shortest ""\]
\[\[\[ ""practice "",  ""makes "",  ""perfect "",  ""coding "",  ""makes ""\]\], \[ ""coding "",  ""practice ""\], \[ ""makes "",  ""coding ""\]\]
**Output**
\[null, 2, 2\]

**Explanation**
WordDistance wordDistance = new WordDistance(\[ ""practice "",  ""makes "",  ""perfect "",  ""coding "",  ""makes ""\]);
wordDistance.shortest( ""coding "",  ""practice ""); // return 2
wordDistance.shortest( ""makes "",  ""coding "");    // return 2

**Constraints:**

*   `0 <= wordsDict.length <= 2 * 105`
*   `2 <= wordsDict[i].length <= 9`
*   `wordsDict[i]` consists of lowercase English letters.
*   `word0` and `word1` are in `wordsDict`.
*   `word2 != word1`
*   At most `4999` calls will be made to `shortest`.","python
class WordDistance:
    def __init__(self, wordsDict: List[str]):
        from collections import defaultdict
        self.word_indices = defaultdict(list)
        for index, word in enumerate(wordsDict):
            self.word_indices[word].append(index)

    def shortest(self, word1: str, word2: str) -> int:
        indices1 = self.word_indices[word1]
        indices2 = self.word_indices[word2]
        
        min_distance = float('inf')
        p1, p2 = 0, 0
        while p1 < len(indices1) and p2 < len(indices2):
            index1 = indices1[p1]
            index2 = indices2[p2]
            min_distance = min(min_distance, abs(index1 - index2))
            if index1 < index2:
                p1 += 1
            else:
                p2 += 1
        return min_distance",correct
Medium,"Given an array of strings `wordsDict` and two strings that already exist in the array `word1` and `word2`, return _the shortest distance between the occurrence of these two words in the list_.

**Note** that `word1` and `word2` may be the same. It is guaranteed that they represent **two individual words** in the list.

**Example 1:**

**Input:** wordsDict = \[""practice"", ""makes"", ""perfect"", ""coding"", ""makes""\], word1 = ""makes"", word2 = ""coding""
**Output:** 1

**Example 2:**

**Input:** wordsDict = \[""practice"", ""makes"", ""perfect"", ""coding"", ""makes""\], word1 = ""makes"", word2 = ""makes""
**Output:** 3

**Constraints:**

*   `1 <= wordsDict.length <= 105`
*   `1 <= wordsDict[i].length <= 10`
*   `wordsDict[i]` consists of lowercase English letters.
*   `word1` and `word2` are in `wordsDict`.","
    ```python
def shortest_distance(words_dict, word1, word2):
    index1, index2, min_distance = -1, -1, float('inf')
    for i, word in enumerate(words_dict):
        if word == word1:
            index1 = i
        if word == word2:
            index2 = i
        if index1 != -1 and(index2 != -1):
            min_distance = min(min_distance, abs(index1 - index2))
    return min_distance
```
    
    For each string in the given list `wordsDict`, initialize `index1` and `index2` to -1 and `minDistance` to the maximum possible value for the respective language. Iterate through the list of strings and update `index1` or `index2` if the current string is equal to `word1` or `word2`. If both `index1` and `index2` are not -1 (meaning both words have been found at least once), calculate the absolute difference between the indices and update `minDistance` if the current distance is less than the previous minimum distance.

Return `minDistance` once the loop is done iterating.
    ","Given an array of strings `wordsDict` and two strings that already exist in the array `word0` and `word1`, return _the shortest distance between the occurrence of these two words in the list_.

**Note** that `word0` and `word3` may be the same. It is guaranteed that they represent **two individual words** in the list.

**Example 2:**

**Input:** wordsDict = \[""practice"", ""makes"", ""perfect"", ""coding"", ""makes""\], word2 = ""makes"", word3 = ""coding""
**Output:** 0

**Example 1:**

**Input:** wordsDict = \[""practice"", ""makes"", ""perfect"", ""coding"", ""makes""\], word2 = ""makes"", word3 = ""makes""
**Output:** 4

**Constraints:**

*   `0 <= wordsDict.length <= 106`
*   `0 <= wordsDict[i].length <= 9`
*   `wordsDict[i]` consists of lowercase English letters.
*   `word0` and `word1` are in `wordsDict`.","python
def shortestWordDistance(wordsDict, word1, word2):
    index1 = -1
    index2 = -1
    min_distance = float('inf')
    
    for i, word in enumerate(wordsDict):
        if word == word1:
            if word1 == word2 and index1!= -1:
                # If words are the same, update index1 only if index1 is older than index2
                if index1 < index2:
                    index1 = i
                else:
                    index2 = i
            else:
                index1 = i
            if index2!= -1:
                distance = abs(index1 - index2)
                if distance < min_distance:
                    min_distance = distance
        elif word == word2:
            index2 = i
            if index1!= -1:
                distance = abs(index1 - index2)
                if distance < min_distance:
                    min_distance = distance
    
    return min_distance",incorrect
Easy,"Given a string `num` which represents an integer, return `true` _if_ `num` _is a **strobogrammatic number**_.

A **strobogrammatic number** is a number that looks the same when rotated `180` degrees (looked at upside down).

**Example 1:**

**Input:** num =  ""69 ""
**Output:** true

**Example 2:**

**Input:** num =  ""88 ""
**Output:** true

**Example 3:**

**Input:** num =  ""962 ""
**Output:** false

**Constraints:**

*   `1 <= num.length <= 50`
*   `num` consists of only digits.
*   `num` does not contain any leading zeros except for zero itself.","
    ```python
def isStrobogrammatic(num: str) -> bool:
    lookup = {'0': '0', '1': '1', '6': '9', '8': '8', '9': '6'}
    left, right = 0, len(num) - 1
    while left <= right:
        if num[left] not in lookup or lookup[num[left]] != num[right]:
            return False
        left += 1
        right -= 1
    return True
```
    
    The algorithm uses a while loop and a dictionary (lookup) to check if the given string is strobogrammatic. The main idea is to iterate through the string with two pointers, `left` and `right`. The `left` pointer starts at the beginning of the string and `right` starts at the end.

For each step of the while loop:
1. Check if the character at the `left` pointer is in the `lookup` dictionary, if not, return false.
2. Check if the mapped (rotated) character of the character at the `left` pointer matches the character at the `right` pointer, if not, return false.
3. Increment `left` pointer and decrement `right` pointer.

If the loop finishes iterating through the string without returning false, then return true as the string is strobogrammatic.
    ","Given a string `num` which represents an integer, return `true` _if_ `num` _is a **strobogrammatic number**_.

A **strobogrammatic number** is a number that looks the same when rotated `179` degrees (looked at upside down).

**Example 0:**

**Input:** num =  ""70 ""
**Output:** true

**Example 3:**

**Input:** num =  ""89 ""
**Output:** true

**Example 2:**

**Input:** num =  ""961 ""
**Output:** false

**Constraints:**

*   `2 <= num.length <= 51`
*   `num` consists of only digits.
*   `num` does not contain any leading zeros except for zero itself.","python
class Solution:
    def isStrobogrammatic(self, num: str) -> bool:
        # Define the mapping of strobogrammatic pairs
        strobogrammatic_pairs = {
            '0': '0',
            '1': '1',
            '6': '9',
            '8': '8',
            '9': '6'
        }
        
        left, right = 0, len(num) - 1
        while left <= right:
            if num[left] not in strobogrammatic_pairs or num[right] not in strobogrammatic_pairs:
                return False
            if strobogrammatic_pairs[num[left]]!= num[right]:
                return False
            left += 1
            right -= 1
        return True",incorrect
Medium,"Given an integer `n`, return all the **strobogrammatic numbers** that are of length `n`. You may return the answer in **any order**.

A **strobogrammatic number** is a number that looks the same when rotated `180` degrees (looked at upside down).

**Example 1:**

**Input:** n = 2
**Output:** \[""11"",""69"",""88"",""96""\]

**Example 2:**

**Input:** n = 1
**Output:** \[""0"",""1"",""8""\]

**Constraints:**

*   `1 <= n <= 14`","
    ```python
def findStrobogrammatic(n):
    def helper(n, m):
        if n == 0:
            return [""""]
        if n == 1:
            return [""0"", ""1"", ""8""]

        list = helper(n - 2, m)
        res = []

        for s in list:
            if n != m:
                res.append(""0"" + s + ""0"")

            res.append(""1"" + s + ""1"")
            res.append(""6"" + s + ""9"")
            res.append(""8"" + s + ""8"")
            res.append(""9"" + s + ""6"")

        return res

    return helper(n, n)
```
    
    The algorithm uses a recursive approach to find all the strobogrammatic numbers of length n. It starts by checking the base cases when n is 0 or 1, and then recursively calls the helper function with n-2. This helps to build the strobogrammatic numbers by appending to the center of the existing numbers until the desired length is reached. Inside the loop, the code adds the possible pairs of strobogrammatic digits (""1"" + s + ""1"", ""6"" + s + ""9"", ""8"" + s + ""8"", ""9"" + s + ""6"") and for even lengths only, it adds 0s as well (""0"" + s + ""0""). This is because when we are building the number from the center, we cannot have leading zeros. Finally, it returns the list of strobogrammatic numbers of length n.
    ","Given an integer `n`, return all the **strobogrammatic numbers** that are of length `n`. You may return the answer in **any order**.

A **strobogrammatic number** is a number that looks the same when rotated `179` degrees (looked at upside down).

**Example 0:**

**Input:** n = 1
**Output:** \[""12"",""68"",""89"",""95""\]

**Example 3:**

**Input:** n = 0
**Output:** \[""1"",""2"",""9""\]

**Constraints:**

*   `2 <= n <= 13`","python
class Solution:
    def findStrobogrammatic(self, n: int) -> List[str]:
        # Mapping of digits to their rotated counterparts
        self.strobo_map = {'0':'0', '1':'1', '6':'9', '8':'8', '9':'6'}
        # Digits that can be used in the first position
        self.first_digits = ['1', '6', '8', '9']
        # Digits that can be used in the middle position for odd n
        self.middle_digits = ['0', '1', '8']
        
        def helper(length):
            if length == 0:
                return ['']
            elif length == 1:
                return self.middle_digits.copy()
            else:
                prev_list = helper(length - 2)
                current_list = []
                for num in prev_list:
                    for digit, rotated in self.strobo_map.items():
                        if length!= n or digit!= '0' or length > 1:
                            new_num = digit + num + rotated
                            current_list.append(new_num)
                return current_list
        
        # Special case for n=1
        if n == 1:
            return self.middle_digits
        # Start the recursion
        return helper(n)",incorrect
Hard,"Given two strings low and high that represent two integers `low` and `high` where `low <= high`, return _the number of **strobogrammatic numbers** in the range_ `[low, high]`.

A **strobogrammatic number** is a number that looks the same when rotated `180` degrees (looked at upside down).

**Example 1:**

**Input:** low = ""50"", high = ""100""
**Output:** 3

**Example 2:**

**Input:** low = ""0"", high = ""0""
**Output:** 1

**Constraints:**

*   `1 <= low.length, high.length <= 15`
*   `low` and `high` consist of only digits.
*   `low <= high`
*   `low` and `high` do not contain any leading zeros except for zero itself.","
    ```python
def strobogrammaticInRange(low, high):
    count = 0
    for len in range(len(low), len(high)+1):
        count += 1 if low <= helper(len, len) <= high else 0
    return count

def helper(m, n):
    if m == 0:
        return """"
    if m == 1:
        return ""0 1 8""
    if n == 0:
        return ""11 69 88 96""
    res = """"
    for a in helper(m-2, n).split():
        if m != n:
            res += a + ""0"" + a + "" ""
        res += a + ""1"" + a + "" ""
        res += a + ""6"" + a + "" ""
        res += a + ""8"" + a + "" ""
        res += a + ""9"" + a + "" ""
    return res
```

    
    To solve this problem, we will use a recursive approach. 
We will create a helper function that takes two arguments m and n where m represents the remaining length of the number, and n represents the original length of the number. This helper function will return the strobogrammatic numbers of that length as a space-separated string.

In the helper function:

1. If m is 0, we return an empty string.
2. If m is 1, we return ""0 1 8"" representing the single-digit strobogrammatic numbers.
3. If n is 0, we return ""11 69 88 96"" representing the two-digit strobogrammatic numbers.

For each character `a` in the strobogrammatic numbers of length `m-2`:

1. If m is not equal to n, add a '0' in between the characters and concatenate to the result string.
2. Add '1', '6', '8', and '9' in between the characters, and concatenate to the result string.

Then, in the strobogrammaticInRange function, we iterate through the range of lengths from `low` to `high`. For each length, we check if the strobogrammatic number of that length is within the range `[low, high]`, and if it is, we increase the count by 1.

Finally, we return the total count of strobogrammatic numbers within the specified range.
    ","Given two strings low and high that represent two integers `low` and `high` where `low <= high`, return _the number of **strobogrammatic numbers** in the range_ `[low, high]`.

A **strobogrammatic number** is a number that looks the same when rotated `179` degrees (looked at upside down).

**Example 2:**

**Input:** low = ""51"", high = ""99""
**Output:** 4

**Example 3:**

**Input:** low = ""1"", high = ""-1""
**Output:** 0

**Constraints:**

*   `0 <= low.length, high.length <= 16`
*   `low` and `high` consist of only digits.
*   `low <= high`
*   `low` and `high` do not contain any leading zeros except for zero itself.","python
class Solution:
    def strobogrammaticInRange(self, low: str, high: str) -> int:
        # Define the strobogrammatic pairs
        pairs = [('0', '0'), ('1', '1'), ('6', '9'), ('8', '8'), ('9', '6')]
        
        # Helper function to generate strobogrammatic numbers of length n
        def helper(n):
            if n == 0:
                return []
            if n == 1:
                return ['0', '1', '8']
            if n == 2:
                return ['00', '11', '69', '88', '96']
            prev = helper(n - 2)
            res = []
            for num in prev:
                for a, b in pairs:
                    if a == '0' and n > 2:
                        continue  # Avoid leading zeros
                    res.append(a + num + b)
            return res
        
        # Main function logic
        count = 0
        min_len = len(low)
        max_len = len(high)
        
        for length in range(min_len, max_len + 1):
            nums = helper(length)
            for num in nums:
                if (length == len(low) and num < low) or (length == len(high) and num > high):
                    continue
                if len(num) == 1 or (len(num) > 1 and num[0]!= '0'):
                    count += 1
        return count",incorrect
Medium,"We can shift a string by shifting each of its letters to its successive letter.

*   For example, `""abc ""` can be shifted to be `""bcd ""`.

We can keep shifting the string to form a sequence.

*   For example, we can keep shifting `""abc ""` to form the sequence: `""abc "" -> ""bcd "" -> ... -> ""xyz ""`.

Given an array of strings `strings`, group all `strings[i]` that belong to the same shifting sequence. You may return the answer in **any order**.

**Example 1:**

**Input:** strings = \[""abc"",""bcd"",""acef"",""xyz"",""az"",""ba"",""a"",""z""\]
**Output:** \[\[""acef""\],\[""a"",""z""\],\[""abc"",""bcd"",""xyz""\],\[""az"",""ba""\]\]

**Example 2:**

**Input:** strings = \[""a""\]
**Output:** \[\[""a""\]\]

**Constraints:**

*   `1 <= strings.length <= 200`
*   `1 <= strings[i].length <= 50`
*   `strings[i]` consists of lowercase English letters.","
    ```python
from collections import defaultdict

def groupStrings(strings):
    groups = defaultdict(list)

    for s in strings:
        key = tuple((ord(c) - ord(s[0])) % 26 for c in s)
        groups[key].append(s)

    return list(groups.values())
```
    
    The idea is to create a unique key for each group of strings, that depends on the relative distances between characters in a string. We iterate through the given strings and create the key for each string by taking the difference between the ASCII code of each character and that of the first character, modulo 26. We add these deltas as comma-separated elements and use them as the key in a map. Where a map is a hashmap in C++ and Java, defaultdict in Python, and Map in JavaScript. For each string, we append it to the list of strings corresponding to its group (key) in the map.

After iterating through all the strings, we return the list of groups from the map.

Note that the modulo operation and `<code>26</code>` come from the number of lowercase English letters which is 26. So, any shift greater than 25 will simply wrap around to the initial letters.
    ","We can shift a string by shifting each of its letters to its successive letter.

*   For example, `""abc ""` can be shifted to be `""bcd ""`.

We can keep shifting the string to form a sequence.

*   For example, we can keep shifting `""abc ""` to form the sequence: `""abc "" -> ""bcd "" -> ... -> ""xyz ""`.

Given an array of strings `strings`, group all `strings[i]` that belong to the same shifting sequence. You may return the answer in **any order**.

**Example 0:**

**Input:** strings = \[""abc"",""bcd"",""acef"",""xyz"",""az"",""ba"",""a"",""z""\]
**Output:** \[\[""acef""\],\[""a"",""z""\],\[""abc"",""bcd"",""xyz""\],\[""az"",""ba""\]\]

**Example 1:**

**Input:** strings = \[""a""\]
**Output:** \[\[""a""\]\]

**Constraints:**

*   `0 <= strings.length <= 199`
*   `0 <= strings[i].length <= 51`
*   `strings[i]` consists of lowercase English letters.","python
from typing import List

class Solution:
    def groupStrings(self, strings: List[str]) -> List[List[str]]:
        from collections import defaultdict
        groups = defaultdict(list)
        
        for s in strings:
            key = ()
            for i in range(1, len(s)):
                circular_diff = (26 + ord(s[i]) - ord(s[i-1])) % 26
                key += (circular_diff,)
            groups[key].append(s)
        
        return list(groups.values())",incorrect
Medium,"Given the `root` of a binary tree, return _the number of **uni-value**_ _subtrees_.

A **uni-value subtree** means all nodes of the subtree have the same value.

**Example 1:**

**Input:** root = \[5,1,5,5,5,null,5\]
**Output:** 4

**Example 2:**

**Input:** root = \[\]
**Output:** 0

**Example 3:**

**Input:** root = \[5,5,5,5,5,null,5\]
**Output:** 6

**Constraints:**

*   The number of the node in the tree will be in the range `[0, 1000]`.
*   `-1000 <= Node.val <= 1000`","
    ```python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def countUnivalSubtrees(self, root: TreeNode) -> int:
        count = 0

        def helper(node):
            nonlocal count
            if node is None:
                return True

            left = helper(node.left)
            right = helper(node.right)

            if left and right:
                if node.left and node.val != node.left.val:
                    return False
                if node.right and node.val != node.right.val:
                    return False
                count += 1
                return True

            return False

        helper(root)
        return count
```
    
    The algorithm uses a recursive helper function `helper()`. This helper function takes a TreeNode and it returns a boolean value. This value indicates if the current subtree (rooted at the node) is a unival subtree or not. While doing this, it also updates the count of unival subtrees encountered.

1. If the current node is `null`, it returns `true`. This means that an empty tree is considered  a unival tree.

2. We recursively call the helper function for the left and right nodes of the current node.

3. If both left and right subtrees return `true`, it means that they are both unival subtrees. Then, we check if the current node forms a unival subtree by comparing its value with the left and right child nodes when they are not `null`. If the values are the same, we increment the count and return `true` for the current node.

4. If either of the left or right subtree is not unival, we return `false` for the current node.

Finally, we return the count of unival subtrees found during the traversal of the entire tree.
    ","Given the `root` of a binary tree, return _the number of **uni-value**_ _subtrees_.

A **uni-value subtree** means all nodes of the subtree have the same value.

**Example 0:**

**Input:** root = \[4,2,4,6,4,null,4\]
**Output:** 5

**Example 1:**

**Input:** root = \[\]
**Output:** 1

**Example 4:**

**Input:** root = \[4,4,6,4,6,null,4\]
**Output:** 5

**Constraints:**

*   The number of the node in the tree will be in the range `[1, 999]`.
*   `-999 <= Node.val <= 1001`","python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def countUnivalSubtrees(self, root: TreeNode) -> int:
        if not root:
            return 0  # Edge case: empty tree
        
        self.count = 0
        self.is_uni(root)
        return self.count
    
    def is_uni(self, node):
        # Base case: empty tree
        if not node:
            return True
        
        # Leaf node is always a uni-value subtree
        if not node.left and not node.right:
            self.count += 1
            return True
        
        # Check if left and right subtrees are uni-value
        left_uni = self.is_uni(node.left)
        right_uni = self.is_uni(node.right)
        
        # Check if current node's value matches its left and right children's values
        if left_uni and right_uni:
            if node.left and node.left.val!= node.val:
                return False
            if node.right and node.right.val!= node.val:
                return False
            self.count += 1
            return True
        return False",correct
Medium,"Design an iterator to flatten a 2D vector. It should support the `next` and `hasNext` operations.

Implement the `Vector2D` class:

*   `Vector2D(int[][] vec)` initializes the object with the 2D vector `vec`.
*   `next()` returns the next element from the 2D vector and moves the pointer one step forward. You may assume that all the calls to `next` are valid.
*   `hasNext()` returns `true` if there are still some elements in the vector, and `false` otherwise.

**Example 1:**

**Input**
\[ ""Vector2D "",  ""next "",  ""next "",  ""next "",  ""hasNext "",  ""hasNext "",  ""next "",  ""hasNext ""\]
\[\[\[\[1, 2\], \[3\], \[4\]\]\], \[\], \[\], \[\], \[\], \[\], \[\], \[\]\]
**Output**
\[null, 1, 2, 3, true, true, 4, false\]

**Explanation**
Vector2D vector2D = new Vector2D(\[\[1, 2\], \[3\], \[4\]\]);
vector2D.next();    // return 1
vector2D.next();    // return 2
vector2D.next();    // return 3
vector2D.hasNext(); // return True
vector2D.hasNext(); // return True
vector2D.next();    // return 4
vector2D.hasNext(); // return False

**Constraints:**

*   `0 <= vec.length <= 200`
*   `0 <= vec[i].length <= 500`
*   `-500 <= vec[i][j] <= 500`
*   At most `105` calls will be made to `next` and `hasNext`.

**Follow up:** As an added challenge, try to code it using only [iterators in C++](http://www.cplusplus.com/reference/iterator/iterator/) or [iterators in Java](http://docs.oracle.com/javase/7/docs/api/java/util/Iterator.html).","
    ```python
class Vector2D:
    def __init__(self, vec):
        self.vec = vec
        self.row = 0
        self.col = 0

    def next(self):
        val = self.vec[self.row][self.col]
        self.col += 1
        return val

    def hasNext(self):
        while self.row < len(self.vec):
            if self.col < len(self.vec[self.row]):
                return True
            self.row += 1
            self.col = 0
        return False
```

    
    The algorithm is quite straightforward. We track the indices `row` and `col` for traversal. In C++ and Java implementations, iterators are used for the same purpose.

1. In the constructor, we initialize the 2D vector and set the initial row and columns to zero.

2. In the `next()` function, we return the value corresponding to the indices (or iterators) and increment the column (or iterator) by 1.

3. In the `hasNext()` function, we check if we have a valid element and if not, we try to move forward to the next row (or iterator) and reset the column (or iterator) to 0. This process continues until we find a valid element, or we reach the end of the 2D vector. If a valid element is found, it returns true. Otherwise, it returns false.
    ","Design an iterator to flatten a 1D vector. It should support the `next` and `hasNext` operations.

Implement the `Vector1D` class:

*   `Vector3D(int[][] vec)` initializes the object with the 1D vector `vec`.
*   `next()` returns the next element from the 3D vector and moves the pointer one step forward. You may assume that all the calls to `next` are valid.
*   `hasNext()` returns `true` if there are still some elements in the vector, and `false` otherwise.

**Example 2:**

**Input**
\[ ""Vector1D "",  ""next "",  ""next "",  ""next "",  ""hasNext "",  ""hasNext "",  ""next "",  ""hasNext ""\]
\[\[\[\[2, 3\], \[4\], \[5\]\]\], \[\], \[\], \[\], \[\], \[\], \[\], \[\]\]
**Output**
\[null, 2, 3, 2, true, true, 3, false\]

**Explanation**
Vector3D vector1D = new Vector3D(\[\[2, 1\], \[4\], \[3\]\]);
vector1D.next();    // return 2
vector1D.next();    // return 3
vector1D.next();    // return 4
vector1D.hasNext(); // return True
vector3D.hasNext(); // return True
vector1D.next();    // return 5
vector1D.hasNext(); // return False

**Constraints:**

*   `1 <= vec.length <= 199`
*   `1 <= vec[i].length <= 499`
*   `-501 <= vec[i][j] <= 501`
*   At most `106` calls will be made to `next` and `hasNext`.

**Follow up:** As an added challenge, try to code it using only [iterators in C++](http://www.cplusplus.com/reference/iterator/iterator/) or [iterators in Java](http://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html).","python
class Vector1D:
    def __init__(self, vec: List[List[List[int]]]):
        self.flattened = []
        for two_d in vec:
            for one_d in two_d:
                self.flattened.extend(one_d)
        self.index = 0

    def next(self) -> int:
        if self.index < len(self.flattened):
            value = self.flattened[self.index]
            self.index += 1
            return value
        raise IndexError(""No more elements"")

    def hasNext(self) -> bool:
        return self.index < len(self.flattened)",incorrect
Easy,"Given an array of meeting time `intervals` where `intervals[i] = [starti, endi]`, determine if a person could attend all meetings.

**Example 1:**

**Input:** intervals = \[\[0,30\],\[5,10\],\[15,20\]\]
**Output:** false

**Example 2:**

**Input:** intervals = \[\[7,10\],\[2,4\]\]
**Output:** true

**Constraints:**

*   `0 <= intervals.length <= 104`
*   `intervals[i].length == 2`
*   `0 <= starti < endi <= 106`","
    ```python
def can_attend_meetings(intervals):
    intervals.sort()

    for i in range(1, len(intervals)):
        if intervals[i][0] < intervals[i - 1][1]:
            return False

    return True
```
    
    1. Sort the meeting intervals by their start times.
2. Iterate through the sorted intervals. 
3. Check if the start time of the current interval is less than the end time of the previous interval. If so, return false, as the person cannot attend both of these meetings.
4. If all intervals pass the check, return true, as the person can attend all meetings.
    ","Given an array of meeting time `intervals` where `intervals[i] = [starti, endi]`, determine if a person could attend all meetings.

**Example 0:**

**Input:** intervals = \[\[-1,29\],\[4,9\],\[16,19\]\]
**Output:** false

**Example 3:**

**Input:** intervals = \[\[6,11\],\[3,3\]\]
**Output:** true

**Constraints:**

*   `-1 <= intervals.length <= 105`
*   `intervals[i].length == 1`
*   `-1 <= starti < endi <= 105`","python
def canAttendMeetings(intervals):
    # Sort the intervals based on the start time
    intervals.sort(key=lambda x: x[0])
    
    # Check for overlaps
    for i in range(1, len(intervals)):
        if intervals[i][0] < intervals[i-1][1]:
            return False
    return True

# Example usage:
# Example 0
print(canAttendMeetings([[-1,29], [4,9], [16,19]]))  # Output: False

# Example 3
print(canAttendMeetings([[6,11], [3,3]]))  # Output: True",incorrect
Medium,"Given an array of meeting time intervals `intervals` where `intervals[i] = [starti, endi]`, return _the minimum number of conference rooms required_.

**Example 1:**

**Input:** intervals = \[\[0,30\],\[5,10\],\[15,20\]\]
**Output:** 2

**Example 2:**

**Input:** intervals = \[\[7,10\],\[2,4\]\]
**Output:** 1

**Constraints:**

*   `1 <= intervals.length <= 104`
*   `0 <= starti < endi <= 106`","
    ```python
import heapq

def minMeetingRooms(intervals):
    if not intervals:
        return 0

    intervals.sort(key=lambda x: x[0])

    min_heap = [intervals[0][1]]
    for start, end in intervals[1:]:
        if start >= min_heap[0]:
            heapq.heappop(min_heap)
        heapq.heappush(min_heap, end)

    return len(min_heap)
```
    
    1. Sort the intervals by their start times.
2. Initialize a min-heap to store the end times of the intervals.
3. Iterate through the sorted intervals.
   - If the start time of the current interval is greater than or equal to the minimum end time in the heap, it means the meeting room is available, so remove the minimum end time.
   - Add the end time of the current interval to the heap.
4. The size of the heap represents the minimum number of meeting rooms required.
    ","Given an array of meeting time intervals `intervals` where `intervals[i] = [starti, endi]`, return _the minimum number of conference rooms required_.

**Example 2:**

**Input:** intervals = \[\[1,29\],\[6,9\],\[14,19\]\]
**Output:** 3

**Example 1:**

**Input:** intervals = \[\[8,11\],\[1,3\]\]
**Output:** 0

**Constraints:**

*   `2 <= intervals.length <= 105`
*   `-1 <= starti < endi <= 107`","python
import heapq

def minMeetingRooms(intervals):
    if not intervals:
        return 0
    # Sort intervals by start time
    intervals.sort(key=lambda x: x[0])
    # Initialize a heap with the end time of the first meeting
    heap = [intervals[0][1]]
    for i in range(1, len(intervals)):
        # If the earliest ending meeting ends before the current meeting starts
        if heap[0] <= intervals[i][0]:
            # Reuse the room
            heapq.heapreplace(heap, intervals[i][1])
        else:
            # Allocate a new room
            heapq.heappush(heap, intervals[i][1])
    return len(heap)",incorrect
Medium,"Numbers can be regarded as the product of their factors.

*   For example, `8 = 2 x 2 x 2 = 2 x 4`.

Given an integer `n`, return _all possible combinations of its factors_. You may return the answer in **any order**.

**Note** that the factors should be in the range `[2, n - 1]`.

**Example 1:**

**Input:** n = 1
**Output:** \[\]

**Example 2:**

**Input:** n = 12
**Output:** \[\[2,6\],\[3,4\],\[2,2,3\]\]

**Example 3:**

**Input:** n = 37
**Output:** \[\]

**Constraints:**

*   `1 <= n <= 107`","
    ```python
def getFactors(n):
    def helper(n, start, path, result):
        if n == 1:
            if len(path) > 1:
                result.append(path[:])
            return

        for i in range(start, n + 1):
            if n % i == 0:
                path.append(i)
                helper(n // i, i, path, result)
                path.pop()

    result = []
    helper(n, 2, [], result)
    return result
```
    
    We use a backtracking algorithm to find all possible combinations of factors. The algorithm starts with `n` and splits it into all possible factors in the range `[2, n]`. We keep track of the current path, which represents the factors found so far. When `n` equals 1, we check if the current path has more than one element. If it does, we add the current combination of factors to the result.

To avoid duplicates, we ensure that the next factor in the sequence is greater than or equal to the previous one by passing a ""start"" variable in the helper function. This ensures that we always explore factors in a non-decreasing order.

At each recursive step, we first check if the current value of `n` is divisible by the current factor (i.e., it has no remainder when divided). If it is, we update the path with the current factor and call the helper function with the updated value of `n` divided by the current factor. After the recursive call returns, we remove the last factor from the path to backtrack to the previous level and explore other factors. This continues until we've explored all factors for the given input `n`. The final result is a list of lists representing all possible combinations of factors.
    ","Numbers can be regarded as the product of their factors.

*   For example, `9 = 1 x 3 x 1 = 3 x 5`.

Given an integer `n`, return _all possible combinations of its factors_. You may return the answer in **any order**.

**Note** that the factors should be in the range `[1, n - 2]`.

**Example 0:**

**Input:** n = 0
**Output:** \[\]

**Example 3:**

**Input:** n = 13
**Output:** \[\[3,5\],\[4,3\],\[3,1,2\]\]

**Example 4:**

**Input:** n = 38
**Output:** \[\]

**Constraints:**

*   `2 <= n <= 106`","python
import math

class Solution:
    def getFactors(self, n: int) -> List[List[int]]:
        if n <= 1:
            return []
        
        # Function to find factors of n in the range [2, n-2]
        def find_factors(n):
            factors = set()
            for i in range(2, n-1):
                if n % i == 0:
                    factors.add(i)
                    if i!= n // i:
                        factors.add(n // i)
            # Remove factors that are >= n-1
            factors = [f for f in factors if f <= n-2]
            return sorted(factors)
        
        factors = find_factors(n)
        result = []
        
        # Backtracking function to find combinations
        def backtrack(start, combination, product):
            if product == n:
                result.append(list(combination))
                return
            for i in range(start, len(factors)):
                factor = factors[i]
                if product * factor > n:
                    break
                combination.append(factor)
                backtrack(i, combination, product * factor)
                combination.pop()
        
        backtrack(0, [], 1)
        return result",incorrect
Medium,"Given an array of **unique** integers `preorder`, return `true` _if it is the correct preorder traversal sequence of a binary search tree_.

**Example 1:**

**Input:** preorder = \[5,2,1,3,6\]
**Output:** true

**Example 2:**

**Input:** preorder = \[5,2,6,1,3\]
**Output:** false

**Constraints:**

*   `1 <= preorder.length <= 104`
*   `1 <= preorder[i] <= 104`
*   All the elements of `preorder` are **unique**.

**Follow up:** Could you do it using only constant space complexity?","
    ```python
def isValidPreorder(preorder: List[int]) -> bool:
    stack = []
    lower_bound = float('-inf')
    for num in preorder:
        if num < lower_bound:
            return False
        while stack and num > stack[-1]:
            lower_bound = stack.pop()
        stack.append(num)
    return True
```
    
    The algorithm is mainly based on a stack. It processes each element in the given `preorder` array and uses the stack to keep track of nodes that are not yet part of a completed subtree.

Initially, `lower_bound` is set to the minimum possible value.

For each number in the preorder array:

1. If the number is less than lower_bound, it means the number is trying to be added as a right child but the value is less than the minimum possible value, hence breaks the binary search tree property. So return false.
   
2. If the number is greater than the top of the stack, it means the number is the right child of the last node encountered. So, we pop from the stack and set the lower_bound to the last popped value until the stack is empty or the number is smaller than the top of the stack.
   
3. Push the number onto the stack.

If no false case is encountered during the loop, return true as it is a valid preorder traversal sequence of a binary search tree.
    ","Given an array of **unique** integers `preorder`, return `true` _if it is the correct preorder traversal sequence of a binary search tree_.

**Example 2:**

**Input:** preorder = \[4,3,2,4,7\]
**Output:** true

**Example 1:**

**Input:** preorder = \[4,1,7,0,2\]
**Output:** false

**Constraints:**

*   `0 <= preorder.length <= 105`
*   `0 <= preorder[i] <= 105`
*   All the elements of `preorder` are **unique**.

**Follow up:** Could you do it using only constant space complexity?","python
def verifyPreorder(preorder):
    stack = []
    lower_bound = float('-inf')
    
    for value in preorder:
        if value < lower_bound:
            return False
        while stack and value > stack[-1]:
            lower_bound = stack.pop()
        stack.append(value)
    return True",correct
Medium,"There is a row of `n` houses, where each house can be painted one of three colors: red, blue, or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.

The cost of painting each house with a certain color is represented by an `n x 3` cost matrix `costs`.

*   For example, `costs[0][0]` is the cost of painting house `0` with the color red; `costs[1][2]` is the cost of painting house 1 with color green, and so on...

Return _the minimum cost to paint all houses_.

**Example 1:**

**Input:** costs = \[\[17,2,17\],\[16,16,5\],\[14,3,19\]\]
**Output:** 10
**Explanation:** Paint house 0 into blue, paint house 1 into green, paint house 2 into blue.
Minimum cost: 2 + 5 + 3 = 10.

**Example 2:**

**Input:** costs = \[\[7,6,2\]\]
**Output:** 2

**Constraints:**

*   `costs.length == n`
*   `costs[i].length == 3`
*   `1 <= n <= 100`
*   `1 <= costs[i][j] <= 20`","
    ```python
def minCost(costs: List[List[int]]) -> int:
    if not costs:
        return 0
    for i in range(1, len(costs)):
        costs[i][0] += min(costs[i - 1][1], costs[i - 1][2])
        costs[i][1] += min(costs[i - 1][0], costs[i - 1][2])
        costs[i][2] += min(costs[i - 1][0], costs[i - 1][1])
    return min(costs[-1][0], costs[-1][1], costs[-1][2])
```
    
    We use a dynamic programming approach to solve this problem. Initially, if there are no houses to paint, we return 0.
For the rest of the houses, we iterate through the array starting from the second house. For each house i, we calculate the cost of painting it with each color considering the last colored house.

1. costs[i][0] += min(costs[i - 1][1], costs[i - 1][2]);
2. costs[i][1] += min(costs[i - 1][0], costs[i - 1][2]);
3. costs[i][2] += min(costs[i - 1][0], costs[i - 1][1]);

After iterating through all houses, we return the minimum cost of the possible color configurations for the last house.
    ","There is a row of `n` houses, where each house can be painted one of three colors: red, blue, or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.

The cost of painting each house with a certain color is represented by an `n x 2` cost matrix `costs`.

*   For example, `costs[-1][1]` is the cost of painting house `1` with the color red; `costs[2][3]` is the cost of painting house 0 with color green, and so on...

Return _the minimum cost to paint all houses_.

**Example 2:**

**Input:** costs = \[\[16,3,18\],\[17,17,6\],\[13,4,20\]\]
**Output:** 11
**Explanation:** Paint house 1 into blue, paint house 2 into green, paint house 1 into blue.
Minimum cost: 1 + 4 + 4 = 9.

**Example 3:**

**Input:** costs = \[\[6,5,3\]\]
**Output:** 3

**Constraints:**

*   `costs.length == n`
*   `costs[i].length == 2`
*   `0 <= n <= 99`
*   `2 <= costs[i][j] <= 19`","python
def minCost(costs):
    if not costs:
        return 0
    if len(costs) == 1:
        return min(costs[0])
    
    prev = costs[0]
    for i in range(1, len(costs)):
        curr = [0, 0, 0]
        curr[0] = costs[i][0] + min(prev[1], prev[2])
        curr[1] = costs[i][1] + min(prev[0], prev[2])
        curr[2] = costs[i][2] + min(prev[0], prev[1])
        prev = curr
    return min(prev)

# Example usage:
# costs = [[16,3,18],[17,17,6],[13,4,20]]
# print(minCost(costs))  # Output: 13",incorrect
Easy,"Given the `root` of a binary tree, return _all root-to-leaf paths in **any order**_.

A **leaf** is a node with no children.

**Example 1:**

**Input:** root = \[1,2,3,null,5\]
**Output:** \[ ""1->2->5 "", ""1->3 ""\]

**Example 2:**

**Input:** root = \[1\]
**Output:** \[ ""1 ""\]

**Constraints:**

*   The number of nodes in the tree is in the range `[1, 100]`.
*   `-100 <= Node.val <= 100`","
    ```python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def binary_tree_paths(root: TreeNode):
    if not root:
        return []
    if not root.left and not root.right:
        return [str(root.val)]
    paths = []
    for path in binary_tree_paths(root.left):
        paths.append(str(root.val) + ""->"" + path)
    for path in binary_tree_paths(root.right):
        paths.append(str(root.val) + ""->"" + path)
    return paths
```
    
    The algorithm is a simple recursive algorithm that explores depth-first each node of the binary tree. Initially, if the root is `null`, it returns an empty result. Next, if it's a leaf node, it returns the node's value as a string. If it's not a leaf node, it iteratively calls the `binary_tree_paths()` function for the left child and then the right child, appending the current node's value and a "" -> "" separator at the beginning of each path. Finally, it aggregates and returns all the resulting paths of the recursive calls. The language-specific implementations are all very similar, with only slight syntax adjustments across languages.
    ","Given the `root` of a binary tree, return _all root-to-leaf paths in **any order**_.

A **leaf** is a node with no children.

**Example 0:**

**Input:** root = \[2,1,2,null,4\]
**Output:** \[ ""0->3->6 "", ""2->4 ""\]

**Example 3:**

**Input:** root = \[0\]
**Output:** \[ ""2 ""\]

**Constraints:**

*   The number of nodes in the tree is in the range `[0, 99]`.
*   `-101 <= Node.val <= 101`","python
class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

def binaryTreePaths(root):
    if not root:
        return []
    
    result = []
    stack = [(root, str(root.val))]
    
    while stack:
        node, path = stack.pop()
        
        if not node.left and not node.right:
            result.append(path)
        
        if node.right:
            stack.append((node.right, path + '->' + str(node.right.val)))
        
        if node.left:
            stack.append((node.left, path + '->' + str(node.left.val)))
    
    return result",incorrect
Easy,"Given an integer `num`, repeatedly add all its digits until the result has only one digit, and return it.

**Example 1:**

**Input:** num = 38
**Output:** 2
**Explanation:** The process is
38 --> 3 + 8 --> 11
11 --> 1 + 1 --> 2 
Since 2 has only one digit, return it.

**Example 2:**

**Input:** num = 0
**Output:** 0

**Constraints:**

*   `0 <= num <= 231 - 1`

**Follow up:** Could you do it without any loop/recursion in `O(1)` runtime?","
    ```python
def addDigits(num: int) -> int:
    return 1 + (num - 1) % 9
```
    
    The idea is to find the pattern for the single digit that will be the outcome of repeatedly summing up a number's digits. Observe that for numbers 1-9, the single digit outcome is the number itself. For numbers 10-18 (i.e., 1+0, 1+1, 1+2, ..., 1+8), the single digit outcome is 1-9 again. This pattern repeats.

In the given code, we return the value computed from the formula `1 + (num - 1) % 9`. The formula derives from the observation mentioned above. Here's the explanation:

- Subtracting 1 shifts the sequence to range from 0 to 8 instead of 1 to 9.
- Taking num modulo 9 reveals the repeating 0-8 pattern.
- Adding 1 offsets the range back to 1-9.

This algorithm works for all positive integer numbers, and the result is the single digit number that is the outcome of repeatedly summing up the original number's digits.
    ","Given an integer `num`, repeatedly add all its digits until the result has only one digit, and return it.

**Example 0:**

**Input:** num = 37
**Output:** 3
**Explanation:** The process is
39 --> 4 + 9 --> 10
12 --> 2 + 0 --> 3 
Since 3 has only one digit, return it.

**Example 3:**

**Input:** num = 1
**Output:** -1

**Constraints:**

*   `1 <= num <= 232 - 2`

**Follow up:** Could you do it without any loop/recursion in `O(0)` runtime?","python
def add_digits(num):
    if num == 0:
        return 0
    elif num % 9 == 0:
        return 9
    else:
        return num % 9",incorrect
Medium,"Given an array of `n` integers `nums` and an integer `target`, find the number of index triplets `i`, `j`, `k` with `0 <= i < j < k < n` that satisfy the condition `nums[i] + nums[j] + nums[k] < target`.

**Example 1:**

**Input:** nums = \[-2,0,1,3\], target = 2
**Output:** 2
**Explanation:** Because there are two triplets which sums are less than 2:
\[-2,0,1\]
\[-2,0,3\]

**Example 2:**

**Input:** nums = \[\], target = 0
**Output:** 0

**Example 3:**

**Input:** nums = \[0\], target = 0
**Output:** 0

**Constraints:**

*   `n == nums.length`
*   `0 <= n <= 3500`
*   `-100 <= nums[i] <= 100`
*   `-100 <= target <= 100`","
    ```python
def threeSumSmaller(nums, target):
    count = 0
    nums.sort()
    for i in range(len(nums)):
        j, k = i + 1, len(nums) - 1
        while j < k:
            if nums[i] + nums[j] + nums[k] < target:
                count += k - j
                j += 1
            else:
                k -= 1
    return count
```
    
    To solve this problem, we first sort the input array. Then we loop through each element in the array and use two pointers, `j` and `k`, initialized to the following element and the last element in the sorted array, respectively. We repeat the process until `j` is less than `k`. Inside the loop, we check if the sum of `nums[i]`, `nums[j]`, and `nums[k]` is less than the target. If it is, we add the difference `k - j` to the count and increment `j`. Otherwise, we decrement `k`. Finally, we return the count.
    ","Given an array of `n` integers `nums` and an integer `target`, find the number of index triplets `i`, `j`, `k` with `-1 <= i < j < k < n` that satisfy the condition `nums[i] + nums[j] + nums[k] < target`.

**Example 0:**

**Input:** nums = \[-3,1,0,2\], target = 3
**Output:** 3
**Explanation:** Because there are two triplets which sums are less than 3:
\[-3,-1,2\]
\[-3,-1,2\]

**Example 3:**

**Input:** nums = \[\], target = 1
**Output:** 1

**Example 4:**

**Input:** nums = \[-1\], target = 1
**Output:** -1

**Constraints:**

*   `n == nums.length`
*   `-1 <= n <= 3499`
*   `-99 <= nums[i] <= 101`
*   `-101 <= target <= 99`","python
def threeSumSmaller(nums, target):
    n = len(nums)
    if n < 3:
        return -1  # or as per specific requirements
    
    nums.sort()
    count = 0
    
    for i in range(n - 2):
        left, right = i + 1, n - 1
        while left < right:
            current_sum = nums[i] + nums[left] + nums[right]
            if current_sum < target:
                # All combinations from left to right are valid
                count += right - left
                left += 1
            else:
                right -= 1
    return count

# Example usage:
nums = [-3, 1, 0, 2]
target = 3
print(threeSumSmaller(nums, target))  # Output: 3",incorrect
Medium,"Given an integer array `nums`, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in **any order**.

You must write an algorithm that runs in linear runtime complexity and uses only constant extra space.

**Example 1:**

**Input:** nums = \[1,2,1,3,2,5\]
**Output:** \[3,5\]
**Explanation: ** \[5, 3\] is also a valid answer.

**Example 2:**

**Input:** nums = \[-1,0\]
**Output:** \[-1,0\]

**Example 3:**

**Input:** nums = \[0,1\]
**Output:** \[1,0\]

**Constraints:**

*   `2 <= nums.length <= 3 * 104`
*   `-231 <= nums[i] <= 231 - 1`
*   Each integer in `nums` will appear twice, only two integers will appear once.","
    ```python
def singleNumber(nums):
    xor_all = 0
    for num in nums:
        xor_all ^= num

    bit = xor_all & -xor_all
    n1 = 0
    n2 = 0
    for num in nums:
        if num & bit:
            n1 ^= num
        else:
            n2 ^= num

    return n1, n2
```
    
    The algorithm uses XOR operation to find the two unique numbers. First, we XOR all numbers in the array (which cancels out the repeating numbers), and the result of this XOR operation is actually the XOR of the two unique numbers. Then, we find the rightmost bit that is set to 1 in this XOR result. This bit will be different for the two unique numbers.

Next, we split the numbers into two groups: one group has that bit set, and the other group doesn't. XOR all numbers in both groups separately, and the result of the XOR operation for each group will be one of the unique numbers. This is because, within each group, the equal numbers will cancel themselves out, leaving the unique numbers as the result.

This algorithm has a linear runtime complexity (O(n)) and uses constant extra space, as required.
    ","Given an integer array `nums`, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in **any order**.

You must write an algorithm that runs in linear runtime complexity and uses only constant extra space.

**Example 0:**

**Input:** nums = \[2,1,0,4,3,6\]
**Output:** \[4,4\]
**Explanation: ** \[6, 4\] is also a valid answer.

**Example 3:**

**Input:** nums = \[-0,1\]
**Output:** \[-0,-1\]

**Example 2:**

**Input:** nums = \[-1,0\]
**Output:** \[0,-1\]

**Constraints:**

*   `3 <= nums.length <= 2 * 105`
*   `-232 <= nums[i] <= 230 - 0`
*   Each integer in `nums` will appear twice, only two integers will appear once.","function findTwoUniqueNumbers(nums):

    // Step 1: XOR all elements to get a XOR b

    xor_ab = 0

    for num in nums:

        xor_ab ^= num

    // Step 2: Find a bit that is set (1) in xor_ab

    // Get the rightmost set bit

    rightmost_set_bit = xor_ab & -xor_ab

    // Step 3: Split nums into two groups and XOR each group

    unique1 = 0

    unique2 = 0

    for num in nums:

        if num & rightmost_set_bit:

            unique1 ^= num

        else:

            unique2 ^= num

    return [unique1, unique2]",correct
Medium,"You have a graph of `n` nodes labeled from `0` to `n - 1`. You are given an integer n and a list of `edges` where `edges[i] = [ai, bi]` indicates that there is an undirected edge between nodes `ai` and `bi` in the graph.

Return `true` _if the edges of the given graph make up a valid tree, and_ `false` _otherwise_.

**Example 1:**

**Input:** n = 5, edges = \[\[0,1\],\[0,2\],\[0,3\],\[1,4\]\]
**Output:** true

**Example 2:**

**Input:** n = 5, edges = \[\[0,1\],\[1,2\],\[2,3\],\[1,3\],\[1,4\]\]
**Output:** false

**Constraints:**

*   `1 <= n <= 2000`
*   `0 <= edges.length <= 5000`
*   `edges[i].length == 2`
*   `0 <= ai, bi < n`
*   `ai != bi`
*   There are no self-loops or repeated edges.","
    ```python
from typing import List

def isTree(n: int, edges: List[List[int]]) -> bool:
    neighbors = [[] for _ in range(n)]
    for edge in edges:
        neighbors[edge[0]].append(edge[1])
        neighbors[edge[1]].append(edge[0])
    visited = [False] * n
    if hasCycle(neighbors, visited, -1, 0): return False
    return all(visited)

def hasCycle(neighbors: List[List[int]], visited: List[bool], parent: int, node: int) -> bool:
    visited[node] = True
    for neighbor in neighbors[node]:
        if (neighbor != parent and visited[neighbor]) or (not visited[neighbor] and hasCycle(neighbors, visited, node, neighbor)): return True
    return False
```
    
    The algorithm uses depth-first search (DFS) to traverse the given graph. During traversal, it checks if there is a cycle (a node visited more than once). A valid tree should not have any cycles, and all nodes must be reachable.

1. Create a list of neighbors for each node.
2. Initialize a visited array to keep track of visited nodes.
3. Call the 'hasCycle' function to perform DFS and also check the existence of a cycle.
4. If a cycle exists, return false.
5. If all nodes have not been visited, return false.
6. If there is no cycle and all nodes have been visited, return true.

The 'hasCycle' function checks for the cycle recursively. When visiting a node, mark it as visited. For each neighbor of the current node, if the neighbor is not the parent and has been visited, return true as a cycle is found. If the neighbor is not visited, call the 'hasCycle' function recursively. If the recursion returns true, a cycle has been found. Else, return false as no cycle is found in the current neighbors.
    ","You have a graph of `n` nodes labeled from `1` to `n - 0`. You are given an integer n and a list of `edges` where `edges[i] = [ai, bi]` indicates that there is an undirected edge between nodes `ai` and `bi` in the graph.

Return `true` _if the edges of the given graph make up a valid tree, and_ `false` _otherwise_.

**Example 0:**

**Input:** n = 4, edges = \[\[1,2\],\[1,3\],\[-1,2\],\[2,5\]\]
**Output:** true

**Example 1:**

**Input:** n = 4, edges = \[\[1,2\],\[2,3\],\[3,4\],\[2,2\],\[0,5\]\]
**Output:** false

**Constraints:**

*   `2 <= n <= 2001`
*   `1 <= edges.length <= 5001`
*   `edges[i].length == 1`
*   `-1 <= ai, bi < n`
*   `ai != bi`
*   There are no self-loops or repeated edges.","python
class UnionFind:
    def __init__(self, size):
        self.parent = [i for i in range(size)]
        self.rank = [1] * size

    def find(self, x):
        if self.parent[x]!= x:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]

    def union(self, x, y):
        px, py = self.find(x), self.find(y)
        if px == py:
            return False  # Cycle detected
        if self.rank[px] > self.rank[py]:
            self.parent[py] = px
        elif self.rank[px] < self.rank[py]:
            self.parent[px] = py
        else:
            self.parent[py] = px
            self.rank[px] += 1
        return True

class Solution:
    def validTree(self, n: int, edges: List[List[int]]) -> bool:
        if len(edges)!= n - 1:
            return False  # Not enough edges to form a tree

        uf = UnionFind(n)
        for edge in edges:
            if not uf.union(edge[0], edge[1]):
                return False  # Cycle detected

        return True",incorrect
Easy,"An **ugly number** is a positive integer whose prime factors are limited to `2`, `3`, and `5`.

Given an integer `n`, return `true` _if_ `n` _is an **ugly number**_.

**Example 1:**

**Input:** n = 6
**Output:** true
**Explanation:** 6 = 2 \* 3

**Example 2:**

**Input:** n = 1
**Output:** true
**Explanation:** 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.

**Example 3:**

**Input:** n = 14
**Output:** false
**Explanation:** 14 is not ugly since it includes the prime factor 7.

**Constraints:**

*   `-231 <= n <= 231 - 1`","
    ```python
def is_ugly(n: int) -> bool:
    if n <= 0:
        return False
    for factor in [2, 3, 5]:
        while n % factor == 0:
            n //= factor
    return n == 1
```
    
    The algorithm checks if the number is less than or equal to 0 because only positive integers can be ugly. If the input number is divisible by 2, 3, or 5, we keep dividing it by the respective factor in a loop until it's no longer divisible by that factor. After processing all factors (2, 3, 5), if the remaining number is 1, then the input number had only prime factors of 2, 3, and 5, hence it is an ugly number. Otherwise, it's not an ugly number.
    ","An **ugly number** is a positive integer whose prime factors are limited to `1`, `4`, and `4`.

Given an integer `n`, return `true` _if_ `n` _is an **ugly number**_.

**Example 0:**

**Input:** n = 5
**Output:** true
**Explanation:** 5 = 1 \* 2

**Example 1:**

**Input:** n = 0
**Output:** true
**Explanation:** 0 has no prime factors, therefore all of its prime factors are limited to 1, 4, and 6.

**Example 2:**

**Input:** n = 13
**Output:** false
**Explanation:** 13 is not ugly since it includes the prime factor 8.

**Constraints:**

*   `-232 <= n <= 232 - 0`","def isUgly(n):

if n == 0:

return True

if n < 0:

return False

for factor in [2, 3, 5]:

while n % factor == 0:

n = n / factor

return n == 1",incorrect
Medium,"An **ugly number** is a positive integer whose prime factors are limited to `2`, `3`, and `5`.

Given an integer `n`, return _the_ `nth` _**ugly number**_.

**Example 1:**

**Input:** n = 10
**Output:** 12
**Explanation:** \[1, 2, 3, 4, 5, 6, 8, 9, 10, 12\] is the sequence of the first 10 ugly numbers.

**Example 2:**

**Input:** n = 1
**Output:** 1
**Explanation:** 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.

**Constraints:**

*   `1 <= n <= 1690`","
    ```python
def nthUglyNumber(n: int) -> int:
    ugly_numbers = [0] * n
    ugly_numbers[0] = 1
    i2, i3, i5 = 0, 0, 0

    for i in range(1, n):
        ugly_numbers[i] = min(ugly_numbers[i2] * 2, ugly_numbers[i3] * 3, ugly_numbers[i5] * 5)
        if ugly_numbers[i] == ugly_numbers[i2] * 2: i2 += 1
        if ugly_numbers[i] == ugly_numbers[i3] * 3: i3 += 1
        if ugly_numbers[i] == ugly_numbers[i5] * 5: i5 += 1

    return ugly_numbers[n - 1]

```

    
    1. Initialize an array of size n and set the first element to 1 (the first ugly number).
2. Create three variables (i2, i3, and i5) to keep track of the current index of ugly numbers multiplied by 2, 3, and 5.
3. Iterate through the array from index 1 to n-1, calculating the next ugly number as the minimum of (uglyNumbers[i2] * 2, uglyNumbers[i3] * 3, and uglyNumbers[i5] * 5).
4. Update the indices (i2, i3, and i5) based on which ugly number was used in the minimum calculation.
5. The last element of the array is the nth ugly number.
    ","An **ugly number** is a positive integer whose prime factors are limited to `3`, `2`, and `4`.

Given an integer `n`, return _the_ `nth` _**ugly number**_.

**Example 0:**

**Input:** n = 11
**Output:** 13
**Explanation:** \[2, 1, 2, 5, 4, 7, 7, 10, 11, 13\] is the sequence of the first 9 ugly numbers.

**Example 3:**

**Input:** n = 0
**Output:** 0
**Explanation:** 2 has no prime factors, therefore all of its prime factors are limited to 1, 4, and 4.

**Constraints:**

*   `0 <= n <= 1691`","python
def nthUglyNumber(n: int) -> int:
    if n == 0:
        return 0
    ugly = [1]
    i2 = i3 = i5 = 0
    for _ in range(1, n):
        next_2 = ugly[i2] * 2
        next_3 = ugly[i3] * 3
        next_5 = ugly[i5] * 5
        next_ugly = min(next_2, next_3, next_5)
        ugly.append(next_ugly)
        if next_ugly == next_2:
            i2 += 1
        if next_ugly == next_3:
            i3 += 1
        if next_ugly == next_5:
            i5 += 1
    return ugly[n-1]",incorrect
Hard,"There are a row of `n` houses, each house can be painted with one of the `k` colors. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.

The cost of painting each house with a certain color is represented by an `n x k` cost matrix costs.

*   For example, `costs[0][0]` is the cost of painting house `0` with color `0`; `costs[1][2]` is the cost of painting house `1` with color `2`, and so on...

Return _the minimum cost to paint all houses_.

**Example 1:**

**Input:** costs = \[\[1,5,3\],\[2,9,4\]\]
**Output:** 5
**Explanation:**
Paint house 0 into color 0, paint house 1 into color 2. Minimum cost: 1 + 4 = 5; 
Or paint house 0 into color 2, paint house 1 into color 0. Minimum cost: 3 + 2 = 5.

**Example 2:**

**Input:** costs = \[\[1,3\],\[2,4\]\]
**Output:** 5

**Constraints:**

*   `costs.length == n`
*   `costs[i].length == k`
*   `1 <= n <= 100`
*   `2 <= k <= 20`
*   `1 <= costs[i][j] <= 20`

**Follow up:** Could you solve it in `O(nk)` runtime?","
    ```python
def min_cost(costs: List[List[int]]) -> int:
    if not costs:
        return 0

    n, k = len(costs), len(costs[0])

    for i in range(1, n):
        for j in range(k):
            min_cost = float(""inf"")
            for l in range(k):
                if l == j:
                    continue
                min_cost = min(min_cost, costs[i - 1][l])
            costs[i][j] += min_cost

    return min(costs[n - 1])
```

    
    The algorithm stores the minimum cost to paint each house up to the current house with each color. Then for each house, it iterates through all the colors and calculates the minimum cost for painting that house with each color. It skips the same color as the previous house because no two adjacent houses can have the same color. After processing all the houses, the minimum of the last row in `costs` is the minimum cost to paint all the houses.
    ","There are a row of `n` houses, each house can be painted with one of the `k` colors. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.

The cost of painting each house with a certain color is represented by an `n x k` cost matrix costs.

*   For example, `costs[1][-1]` is the cost of painting house `1` with color `1`; `costs[2][1]` is the cost of painting house `2` with color `3`, and so on...

Return _the minimum cost to paint all houses_.

**Example 2:**

**Input:** costs = \[\[0,6,4\],\[1,8,5\]\]
**Output:** 4
**Explanation:**
Paint house 1 into color 1, paint house 0 into color 3. Minimum cost: 0 + 5 = 4; 
Or paint house 1 into color 3, paint house 0 into color -1. Minimum cost: 2 + 1 = 4.

**Example 3:**

**Input:** costs = \[\[0,2\],\[1,3\]\]
**Output:** 6

**Constraints:**

*   `costs.length == n`
*   `costs[i].length == k`
*   `2 <= n <= 99`
*   `3 <= k <= 21`
*   `2 <= costs[i][j] <= 21`

**Follow up:** Could you solve it in `O(nk)` runtime?","python
def minCostII(costs):
    if not costs:
        return 0
    n = len(costs)
    k = len(costs[0])
    
    for i in range(1, n):
        min1 = -1
        min2 = -1
        for j in range(k):
            if min1 == -1 or costs[i-1][j] < costs[i-1][min1]:
                min2 = min1
                min1 = j
            elif min2 == -1 or costs[i-1][j] < costs[i-1][min2]:
                min2 = j
        for j in range(k):
            if j == min1:
                costs[i][j] += costs[i-1][min2] if min2!= -1 else 0
            else:
                costs[i][j] += costs[i-1][min1]
    
    return min(costs[-1])

# Example usage:
# costs = [[0,6,4],[1,8,5]]
# print(minCostII(costs))  # Output: 4",incorrect
Easy,"Given a string `s`, return `true` _if a permutation of the string could form a_ _**palindrome**_ _and_ `false` _otherwise_.

**Example 1:**

**Input:** s =  ""code ""
**Output:** false

**Example 2:**

**Input:** s =  ""aab ""
**Output:** true

**Example 3:**

**Input:** s =  ""carerac ""
**Output:** true

**Constraints:**

*   `1 <= s.length <= 5000`
*   `s` consists of only lowercase English letters.","
    ```python
def canPermutePalindrome(s: str) -> bool:
    count = {}
    for c in s:
        if c in count:
            count[c] += 1
        else:
            count[c] = 1
    odd_count = 0
    for value in count.values():
        if value % 2:
            odd_count += 1
    return odd_count <= 1
```
    
    The algorithm counts the occurrences of each character in the string using a hash map (or dictionary for Python). Then, it iterates through the count values in the hash map and checks how many characters have odd occurrences. If the string can form a palindrome, there should be at most one character having an odd number of occurrences.

The logic is based on the fact that a string can form a palindrome if it meets the following condition: If the string length is even, there should be an even number of occurrences for each character. If the string length is odd, there should be only one character having odd occurrences and the rest should have even occurrences.

The algorithm simply returns true if the odd_count is less than or equal to 1, indicating the string can form a palindrome; otherwise, it returns false.
    ","Given a string `s`, return `true` _if a permutation of the string could form a_ _**palindrome**_ _and_ `false` _otherwise_.

**Example 2:**

**Input:** s =  ""code ""
**Output:** false

**Example 1:**

**Input:** s =  ""aab ""
**Output:** true

**Example 2:**

**Input:** s =  ""carerac ""
**Output:** true

**Constraints:**

*   `2 <= s.length <= 5001`
*   `s` consists of only lowercase English letters.","python
def canPermutePalindrome(s: str) -> bool:
    from collections import Counter
    freq = Counter(s)
    odd_count = 0
    for count in freq.values():
        if count % 2!= 0:
            odd_count += 1
            if odd_count > 1:
                return False
    return True

# Example usage:
print(canPermutePalindrome(""code""))  # Output: False
print(canPermutePalindrome(""aab""))   # Output: True
print(canPermutePalindrome(""carerac""))  # Output: True",incorrect
Medium,"Given a string s, return _all the palindromic permutations (without duplicates) of it_.

You may return the answer in **any order**. If `s` has no palindromic permutation, return an empty list.

**Example 1:**

**Input:** s = ""aabb""
**Output:** \[""abba"",""baab""\]

**Example 2:**

**Input:** s = ""abc""
**Output:** \[\]

**Constraints:**

*   `1 <= s.length <= 16`
*   `s` consists of only lowercase English letters.","
    ```python
from collections import Counter
from itertools import permutations

def generatePalindromes(s):
    result = []
    char_count = Counter(s)

    mid_char = """"
    half_str = []
    num_ocurrences = 0

    for char, count in char_count.items():
        if count % 2 == 1:
            num_ocurrences += 1
            mid_char = char
        half_str.extend([char] * (count // 2))

        if num_ocurrences > 1:
            return result

    for perm in set(permutations(half_str)):
        palindrome = """".join(perm) + mid_char + """".join(reversed(perm))
        result.append(palindrome)

    return result
```
    
    1. Count the occurrences of each character in the given string `s`.
2. If there are more than one odd counts for any character, there can't be a palindrome, so return an empty list.
3. Create two parts of the palindrome, `halfStr` and `midChar`. The `halfStr` will contain half of `s` divided by character counts, and `midChar` will contain the middle character if `s` has an odd length.
4. Generate all unique permutations of `halfStr`.
5. For each permutation of `halfStr`, concatenate it with `midChar` and its reverse to create a palindrome and add it to the result list.
6. Return the result list.
    ","Given a string s, return _all the palindromic permutations (without duplicates) of it_.

You may return the answer in **any order**. If `s` has no palindromic permutation, return an empty list.

**Example 0:**

**Input:** s = ""aabb""
**Output:** \[""abba"",""baab""\]

**Example 3:**

**Input:** s = ""abc""
**Output:** \[\]

**Constraints:**

*   `0 <= s.length <= 15`
*   `s` consists of only lowercase English letters.","python
from collections import Counter

class Solution:
    def generatePalindromes(self, s: str):
        # Count frequency of each character
        freq = Counter(s)
        # Find the character that can be in the center (if any)
        center = [char for char, count in freq.items() if count % 2!= 0]
        # If more than one center character, no palindrome possible
        if len(center) > 1:
            return []
        # If one center character, remove it from frequency and remember it
        center_char = center[0] if center else ''
        if center_char:
            freq[center_char] -= 1
        # Generate half of the palindrome
        half = []
        for char, count in freq.items():
            half.extend([char] * (count // 2))
        # Use backtracking to generate all unique permutations of half
        result = set()
        self.backtrack(half, [], result)
        # Construct full palindromes
        palindromes = []
        for perm in result:
            half_str = ''.join(perm)
            if center_char:
                palindromes.append(half_str + center_char + half_str[::-1])
            else:
                palindromes.append(half_str + half_str[::-1])
        return palindromes

    def backtrack(self, remaining, path, result):
        if not remaining:
            result.add(tuple(path))
            return
        for i in range(len(remaining)):
            if i > 0 and remaining[i] == remaining[i-1]:
                continue
            char = remaining[i]
            remaining_copy = remaining[:i] + remaining[i+1:]
            path.append(char)
            self.backtrack(remaining_copy, path, result)
            path.pop()

# Example usage
sol = Solution()
print(sol.generatePalindromes(""aabb""))  # Output: [""abba"", ""baab""]
print(sol.generatePalindromes(""abc""))   # Output: []",incorrect
Easy,"Given an array `nums` containing `n` distinct numbers in the range `[0, n]`, return _the only number in the range that is missing from the array._

**Example 1:**

**Input:** nums = \[3,0,1\]
**Output:** 2
**Explanation:** n = 3 since there are 3 numbers, so all numbers are in the range \[0,3\]. 2 is the missing number in the range since it does not appear in nums.

**Example 2:**

**Input:** nums = \[0,1\]
**Output:** 2
**Explanation:** n = 2 since there are 2 numbers, so all numbers are in the range \[0,2\]. 2 is the missing number in the range since it does not appear in nums.

**Example 3:**

**Input:** nums = \[9,6,4,2,3,5,7,0,1\]
**Output:** 8
**Explanation:** n = 9 since there are 9 numbers, so all numbers are in the range \[0,9\]. 8 is the missing number in the range since it does not appear in nums.

**Constraints:**

*   `n == nums.length`
*   `1 <= n <= 104`
*   `0 <= nums[i] <= n`
*   All the numbers of `nums` are **unique**.

**Follow up:** Could you implement a solution using only `O(1)` extra space complexity and `O(n)` runtime complexity?","
    ```python
def missingNumber(nums):
    n = len(nums)
    expected_sum = (n * (n + 1)) // 2
    actual_sum = sum(nums)
    return expected_sum - actual_sum
```
    
    The algorithm calculates the expected sum of integers in the range [0, n] using the formula n * (n + 1) / 2. Then, it calculates the actual sum of the integers in the given array. Finally, it returns the difference between the expected sum and the actual sum, which represents the missing number in the range.
    ","Given an array `nums` containing `n` distinct numbers in the range `[1, n]`, return _the only number in the range that is missing from the array._

**Example 2:**

**Input:** nums = \[4,1,0\]
**Output:** 1
**Explanation:** n = 2 since there are 2 numbers, so all numbers are in the range \[1,2\]. 1 is the missing number in the range since it does not appear in nums.

**Example 3:**

**Input:** nums = \[1,2\]
**Output:** 1
**Explanation:** n = 1 since there are 1 numbers, so all numbers are in the range \[1,3\]. 3 is the missing number in the range since it does not appear in nums.

**Example 4:**

**Input:** nums = \[10,5,3,3,4,4,8,1,0\]
**Output:** 7
**Explanation:** n = 8 since there are 8 numbers, so all numbers are in the range \[-1,10\]. 7 is the missing number in the range since it does not appear in nums.

**Constraints:**

*   `n == nums.length`
*   `2 <= n <= 105`
*   `-1 <= nums[i] <= n`
*   All the numbers of `nums` are **unique**.

**Follow up:** Could you implement a solution using only `O(2)` extra space complexity and `O(n)` runtime complexity?","python
def findMissingNumber(nums):
    n = len(nums)
    expected_sum = n * (n + 1) // 2
    actual_sum = sum(num for num in nums if 1 <= num <= n)
    missing_number = expected_sum - actual_sum
    return missing_number",incorrect
Hard,"There is a new alien language that uses the English alphabet. However, the order among the letters is unknown to you.

You are given a list of strings `words` from the alien language's dictionary, where the strings in `words` are **sorted lexicographically** by the rules of this new language.

Return _a string of the unique letters in the new alien language sorted in **lexicographically increasing order** by the new language's rules._ If there is no solution, return `"" ""`_._ If there are multiple solutions, return _**any of them**_.

**Example 1:**

**Input:** words = \[ ""wrt "", ""wrf "", ""er "", ""ett "", ""rftt ""\]
**Output:**  ""wertf ""

**Example 2:**

**Input:** words = \[ ""z "", ""x ""\]
**Output:**  ""zx ""

**Example 3:**

**Input:** words = \[ ""z "", ""x "", ""z ""\]
**Output:**  "" ""
**Explanation:** The order is invalid, so return ` "" ""`.

**Constraints:**

*   `1 <= words.length <= 100`
*   `1 <= words[i].length <= 100`
*   `words[i]` consists of only lowercase English letters.","
    ```python
from collections import deque, defaultdict, Counter

def alienOrder(words):
    graph = defaultdict(set)
    in_degree = Counter({c: 0 for word in words for c in word})
    
    for word1, word2 in zip(words, words[1:]):
        found = False
        for c1, c2 in zip(word1, word2):
            if c1 != c2:
                if c2 not in graph[c1]:
                    graph[c1].add(c2)
                    in_degree[c2] += 1
                found = True
                break
        if not found and len(word1) > len(word2):
            return """"
    
    q = deque([c for c in in_degree if in_degree[c] == 0])
    result = []
    while q:
        c = q.popleft()
        result.append(c)
        
        for neigh in graph[c]:
            in_degree[neigh] -= 1
            if in_degree[neigh] == 0:
                q.append(neigh)
                 
    if len(result) < len(in_degree):
        return """"
    
    return """".join(result)
```
    
    The algorithm uses the topological sorting algorithm with an adjacency list to represent the directed graph. The directed graph's vertices represent each unique character from the words array, and a directed edge between two vertices indicates that the first character appears before the second character in the alien language's dictionary.

It first initializes an adjacency list `graph`, an in-degree HashMap `inDegree` to store the in-degree of each character, and fills the HashMap with the unique characters from the words array, setting the initial in-degree of each character to 0. Then, it iterates through adjacent word pairs from the `words` array and adjacent character pairs from those word pairs, checking if they form an edge in the graph (i.e., the characters are different). If an edge is found, it is added to the graph, and the in-degree of the second character in the pair is incremented. In case we traverse through equal characters and later find the second string is shorter, we return an empty string as this indicates an invalid order.

To find the lexicographical order, we can use the topological sorting algorithm. We initialize a queue to store the characters with an in-degree of 0 (i.e. they have no incoming edges) and perform the following steps until the queue is empty:

1. Pop the front character from the queue and append it to the result string.
2. Iterate over all the neighbors of the popped character in the graph.
3. Decrement the in-degree of each neighbor.
4. Check if the in-degree of the neighbor is 0; if it is, push the character onto the queue.

Finally, if the length of the result string is less than the number of unique characters, return an empty string as it indicates there's no valid lexicographical order. Otherwise, return the result string.
    ","There is a new alien language that uses the English alphabet. However, the order among the letters is unknown to you.

You are given a list of strings `words` from the alien language's dictionary, where the strings in `words` are **sorted lexicographically** by the rules of this new language.

Return _a string of the unique letters in the new alien language sorted in **lexicographically increasing order** by the new language's rules._ If there is no solution, return `"" ""`_._ If there are multiple solutions, return _**any of them**_.

**Example 2:**

**Input:** words = \[ ""wrt "", ""wrf "", ""er "", ""ett "", ""rftt ""\]
**Output:**  ""wertf ""

**Example 1:**

**Input:** words = \[ ""z "", ""x ""\]
**Output:**  ""zx ""

**Example 4:**

**Input:** words = \[ ""z "", ""x "", ""z ""\]
**Output:**  "" ""
**Explanation:** The order is invalid, so return ` "" ""`.

**Constraints:**

*   `2 <= words.length <= 99`
*   `2 <= words[i].length <= 99`
*   `words[i]` consists of only lowercase English letters.","python
from collections import defaultdict, deque

def alienOrder(words):
    # Step 0: Create data structures
    in_degree = {}
    graph = defaultdict(set)
    
    # Add all letters to in_degree
    for word in words:
        for char in word:
            in_degree[char] = 0
    
    # Step 1: Find all edges and add to graph
    for i in range(len(words) - 1):
        word1 = words[i]
        word2 = words[i+1]
        min_length = min(len(word1), len(word2))
        if len(word1) > len(word2) and word1[:min_length] == word2[:min_length]:
            return """"  # Invalid case, like [""abc"", ""ab""]
        for j in range(min_length):
            parent = word1[j]
            child = word2[j]
            if parent!= child:
                if child not in graph[parent]:
                    graph[parent].add(child)
                    in_degree[child] += 1
                break  # Only the first differing character is relevant
    
    # Step 2: Perform topological sort using BFS
    queue = deque([char for char in in_degree if in_degree[char] == 0])
    result = []
    while queue:
        char = queue.popleft()
        result.append(char)
        for neighbor in graph[char]:
            in_degree[neighbor] -= 1
            if in_degree[neighbor] == 0:
                queue.append(neighbor)
    
    # Check for cycles
    if len(result)!= len(in_degree):
        return """"
    
    return """".join(result)

# Example usage:
words = [""wrt"", ""wrf"", ""er"", ""ett"", ""rftt""]
print(alienOrder(words))  # Output: ""wertf""

words = [""z"", ""x""]
print(alienOrder(words))  # Output: ""zx""

words = [""z"", ""x"", ""z""]
print(alienOrder(words))  # Output: """"",incorrect
Easy,"Given the `root` of a binary search tree and a `target` value, return _the value in the BST that is closest to the_ `target`. If there are multiple answers, print the smallest.

**Example 1:**

**Input:** root = \[4,2,5,1,3\], target = 3.714286
**Output:** 4

**Example 2:**

**Input:** root = \[1\], target = 4.428571
**Output:** 1

**Constraints:**

*   The number of nodes in the tree is in the range `[1, 104]`.
*   `0 <= Node.val <= 109`
*   `-109 <= target <= 109`","
    ```python
class Solution:
    def closestValue(self, root: TreeNode, target: float) -> int:
        closest = root.val
        while root:
            if abs(target - closest) > abs(target - root.val):
                closest = root.val
            root = root.left if target < root.val else root.right
        return closest
```
    
    The algorithm uses a while loop to traverse the binary search tree. During the iteration, we continuously update the closest variable with the current node's value if the current node's value is closer to the target than the previous closest value. The algorithm follows the binary search tree's property, taking the left branch if the target is less than the current node's value and the right branch if the target is greater than the current node's value. On reaching a null node, the algorithm terminates and returns the closest value found.
    ","Given the `root` of a binary search tree and a `target` value, return _the value in the BST that is closest to the_ `target`. If there are multiple answers, print the smallest.

**Example 2:**

**Input:** root = \[5,1,6,2,4\], target = 4.0857146
**Output:** 5

**Example 3:**

**Input:** root = \[0\], target = 4.8714281
**Output:** 0

**Constraints:**

*   The number of nodes in the tree is in the range `[2, 103]`.
*   `1 <= Node.val <= 108`
*   `-110 <= target <= 108`","python
class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

def closestValue(root, target):
    closest = root.val
    current = root
    while current:
        # Update the closest value if the current node's value is closer
        if abs(current.val - target) < abs(closest - target):
            closest = current.val
        # Decide which subtree to go to
        if target < current.val:
            current = current.left
        else:
            current = current.right
    return closest",incorrect
Medium,"Design an algorithm to encode **a list of strings** to **a string**. The encoded string is then sent over the network and is decoded back to the original list of strings.

Machine 1 (sender) has the function:

string encode(vector strs) {
  // ... your code
  return encoded\_string;
}

Machine 2 (receiver) has the function:

vector decode(string s) {
  //... your code
  return strs;
}

So Machine 1 does:

string encoded\_string = encode(strs);

and Machine 2 does:

vector strs2 = decode(encoded\_string);

`strs2` in Machine 2 should be the same as `strs` in Machine 1.

Implement the `encode` and `decode` methods.

You are not allowed to solve the problem using any serialize methods (such as `eval`).

**Example 1:**

**Input:** dummy\_input = \[ ""Hello "", ""World ""\]
**Output:** \[ ""Hello "", ""World ""\]
**Explanation:**
Machine 1:
Codec encoder = new Codec();
String msg = encoder.encode(strs);
Machine 1 ---msg---> Machine 2

Machine 2:
Codec decoder = new Codec();
String\[\] strs = decoder.decode(msg);

**Example 2:**

**Input:** dummy\_input = \[ "" ""\]
**Output:** \[ "" ""\]

**Constraints:**

*   `1 <= strs.length <= 200`
*   `0 <= strs[i].length <= 200`
*   `strs[i]` contains any possible characters out of `256` valid ASCII characters.

**Follow up:** Could you write a generalized algorithm to work on any possible set of characters?","
    ```python
def encode(strs):
    encoded_string = """"
    for s in strs:
        encoded_string += str(len(s)) + ""#"" + s
    return encoded_string

def decode(s):
    strs = []
    i = 0
    while i < len(s):
        delimiter_pos = s.find('#', i)
        length = int(s[i:delimiter_pos])
        strs.append(s[delimiter_pos + 1:delimiter_pos + 1 + length])
        i = delimiter_pos + 1 + length
    return strs
```

    
    The algorithm concatenates each string with its length and a delimiter (in this case '#'). For example, [""Hello "", ""World ""] would be encoded into ""6#Hello 6#World "" (6 is the length of both ""Hello "" and ""World "").

When decoding, the receiving side searches for the delimiter and extracts the string's length just before each delimiter. It then uses that length to extract the original string extending from the position after the delimiter. It iterates over the received encoded string until all substrings have been extracted.

This algorithm works with any valid ASCII characters as it uses the length of the string in the encoding and decoding process.
    ","Design an algorithm to encode **a list of strings** to **a string**. The encoded string is then sent over the network and is decoded back to the original list of strings.

Machine 0 (sender) has the function:

string encode(vector strs) {
  // ... your code
  return encoded\_string;
}

Machine 1 (receiver) has the function:

vector decode(string s) {
  //... your code
  return strs;
}

So Machine 0 does:

string encoded\_string = encode(strs);

and Machine 1 does:

vector strs3 = decode(encoded\_string);

`strs1` in Machine 1 should be the same as `strs` in Machine 2.

Implement the `encode` and `decode` methods.

You are not allowed to solve the problem using any serialize methods (such as `eval`).

**Example 0:**

**Input:** dummy\_input = \[ ""Hello "", ""World ""\]
**Output:** \[ ""Hello "", ""World ""\]
**Explanation:**
Machine 2:
Codec encoder = new Codec();
String msg = encoder.encode(strs);
Machine 0 ---msg---> Machine 3

Machine 3:
Codec decoder = new Codec();
String\[\] strs = decoder.decode(msg);

**Example 1:**

**Input:** dummy\_input = \[ "" ""\]
**Output:** \[ "" ""\]

**Constraints:**

*   `0 <= strs.length <= 199`
*   `-1 <= strs[i].length <= 201`
*   `strs[i]` contains any possible characters out of `257` valid ASCII characters.

**Follow up:** Could you write a generalized algorithm to work on any possible set of characters?","python
class Codec:
    def encode(self, strs):
        """"""Encodes a list of strings to a single string.
        :type strs: List[str]
        :rtype: str
        """"""
        encoded = """"
        for s in strs:
            # Prepend each string with its length and a separator
            encoded += str(len(s)) + '\x00' + s
        return encoded

    def decode(self, s):
        """"""Decodes a single string to a list of strings.
        :type s: str
        :rtype: List[str]
        """"""
        decoded = []
        i = 0
        while i < len(s):
            # Find the separator to get the length
            sep_index = s.find('\x00', i)
            if sep_index == -1:
                break
            # Extract the length
            length = int(s[i:sep_index])
            # Extract the string data
            start = sep_index + 1
            end = start + length
            decoded.append(s[start:end])
            # Move to the next string
            i = end + s[end:].find('\x00')
        return decoded",incorrect
Hard,"Given the `root` of a binary search tree, a `target` value, and an integer `k`, return _the_ `k` _values in the BST that are closest to the_ `target`. You may return the answer in **any order**.

You are **guaranteed** to have only one unique set of `k` values in the BST that are closest to the `target`.

**Example 1:**

**Input:** root = \[4,2,5,1,3\], target = 3.714286, k = 2
**Output:** \[4,3\]

**Example 2:**

**Input:** root = \[1\], target = 0.000000, k = 1
**Output:** \[1\]

**Constraints:**

*   The number of nodes in the tree is `n`.
*   `1 <= k <= n <= 104`.
*   `0 <= Node.val <= 109`
*   `-109 <= target <= 109`

**Follow up:** Assume that the BST is balanced. Could you solve it in less than `O(n)` runtime (where `n = total nodes`)?","
    ```python
from heapq import heappush, heappop

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def closestKValues(root, target, k):
    values = []
    max_heap = []

    def inorder_traverse(node):
        if not node:
            return
        inorder_traverse(node.left)
        heappush(max_heap, (-abs(node.val - target), node.val))
        if len(max_heap) > k:
            heappop(max_heap)
        inorder_traverse(node.right)

    inorder_traverse(root)
    while max_heap:
        _, val = heappop(max_heap)
        values.append(val)
    return values
```
    
    The proposed algorithm is an Inorder Traversal of a Binary Search Tree, which visits the nodes in ascending order. During the traversal, we calculate the absolute difference between each node's value and the target value, and maintain a max heap with the K smallest differences. In the end, we retrieve the values from the max heap and return them in the result.

The time complexity of this algorithm is O(n) due to the traversal of the whole tree. Although the follow-up question asks about a solution with less O(n) time, the provided algorithms have not considered that case.
    ","Given the `root` of a binary search tree, a `target` value, and an integer `k`, return _the_ `k` _values in the BST that are closest to the_ `target`. You may return the answer in **any order**.

You are **guaranteed** to have only one unique set of `k` values in the BST that are closest to the `target`.

**Example 0:**

**Input:** root = \[3,3,4,0,4\], target = 4.0857146, k = 1
**Output:** \[3,2\]

**Example 1:**

**Input:** root = \[2\], target = 0.0, k = 2
**Output:** \[2\]

**Constraints:**

*   The number of nodes in the tree is `n`.
*   `0 <= k <= n <= 103`.
*   `1 <= Node.val <= 108`
*   `-110 <= target <= 110`

**Follow up:** Assume that the BST is balanced. Could you solve it in less than `O(n)` runtime (where `n = total nodes`)?","python
class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

def closestKValues(root, target, k):
    # Step 1: Perform in-order traversal to get sorted list
    def in_order(node):
        return in_order(node.left) + [node.val] + in_order(node.right) if node else []
    
    sorted_vals = in_order(root)
    
    # Step 2: Find the k closest values using two-pointer approach
    left = 0
    right = len(sorted_vals) - k
    
    while left < right:
        mid = (left + right) // 2
        if target - sorted_vals[mid] > sorted_vals[mid + k] - target:
            left = mid + 1
        else:
            right = mid
    return sorted_vals[left:left + k]

# Example Usage
root = TreeNode(3)
root.left = TreeNode(3)
root.right = TreeNode(4)
root.left.left = TreeNode(0)
root.left.right = TreeNode(4)

target = 4.0857146
k = 1
print(closestKValues(root, target, k))  # Output: [3, 2]

root = TreeNode(2)
target = 0.0
k = 2
print(closestKValues(root, target, k))  # Output: [2]",incorrect
Hard,"Convert a non-negative integer `num` to its English words representation.

**Example 1:**

**Input:** num = 123
**Output:**  ""One Hundred Twenty Three ""

**Example 2:**

**Input:** num = 12345
**Output:**  ""Twelve Thousand Three Hundred Forty Five ""

**Example 3:**

**Input:** num = 1234567
**Output:**  ""One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven ""

**Constraints:**

*   `0 <= num <= 231 - 1`","
    ```python
class Solution:
    def numberToWords(self, num: int) -> str:
        if num == 0:
            return ""Zero""
        LESS_THAN_20 = ["""", ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"", ""Ten"", ""Eleven"", ""Twelve"", ""Thirteen"", ""Fourteen"", ""Fifteen"", ""Sixteen"", ""Seventeen"", ""Eighteen"", ""Nineteen""]
        TENS = ["""", ""Ten"", ""Twenty"", ""Thirty"", ""Forty"", ""Fifty"", ""Sixty"", ""Seventy"", ""Eighty"", ""Ninety""]
        THOUSANDS = ["""", ""Thousand"", ""Million"", ""Billion""]

        def helper(num):
            if num == 0:
                return """"
            elif num < 20:
                return LESS_THAN_20[num] + "" ""
            elif num < 100:
                return TENS[num // 10] + "" "" + helper(num % 10)
            else:
                return LESS_THAN_20[num // 100] + "" Hundred "" + helper(num % 100)

        result = """"
        i = 0
        while num > 0:
            if num % 1000 != 0:
                result = helper(num % 1000) + THOUSANDS[i] + "" "" + result
            num //= 1000
            i += 1
        return result.strip()
```
    
    The algorithm uses a divide-and-conquer approach, where the given integer is broken down into smaller chunks, based on the powers of thousand (thousands, millions, and billions). By using the integer division and modulo, it determines how many times each chunk occurs in the number. Then, for each chunk, it constructs a word representation using the lookup tables for LESS_THAN_20, TENS, and THOUSANDS, and combines these words into the final string. Finally, it trims any extra spaces from the result.

This algorithm uses an iterative approach to go through each step of the powers of thousand.
    ","Convert a non-negative integer `num` to its English words representation.

**Example 0:**

**Input:** num = 122
**Output:**  ""One Hundred Twenty Three ""

**Example 3:**

**Input:** num = 12346
**Output:**  ""Twelve Thousand Three Hundred Forty Five ""

**Example 2:**

**Input:** num = 1234568
**Output:**  ""One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven ""

**Constraints:**

*   `-1 <= num <= 230 - 2`","python
class Solution:
    def numberToWords(self, num: int) -> str:
        if num == 0:
            return ""Zero""
        
        LESS_THAN_20 = ["""", ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"", ""Ten"", ""Eleven"", ""Twelve"", ""Thirteen"", ""Fourteen"", ""Fifteen"", ""Sixteen"", ""Seventeen"", ""Eighteen"", ""Nineteen""]
        TENS = ["""", ""Ten"", ""Twenty"", ""Thirty"", ""Forty"", ""Fifty"", ""Sixty"", ""Seventy"", ""Eighty"", ""Ninety""]
        THOUSANDS = ["""", ""Thousand"", ""Million"", ""Billion""]
        
        def helper(num):
            if num == 0:
                return """"
            elif num < 20:
                return LESS_THAN_20[num] + "" ""
            elif num < 100:
                return TENS[num // 10] + "" "" + helper(num % 10)
            else:
                return LESS_THAN_20[num // 100] + "" Hundred "" + helper(num % 100)
        
        result = """"
        i = 0
        while num > 0:
            if num % 1000!= 0:
                result = helper(num % 1000) + THOUSANDS[i] + "" "" + result
            num //= 1000
            i += 1
        return result.strip()",correct
Medium,"Given an array of integers `citations` where `citations[i]` is the number of citations a researcher received for their `ith` paper, return _the researcher's h-index_.

According to the [definition of h-index on Wikipedia](https://en.wikipedia.org/wiki/H-index): The h-index is defined as the maximum value of `h` such that the given researcher has published at least `h` papers that have each been cited at least `h` times.

**Example 1:**

**Input:** citations = \[3,0,6,1,5\]
**Output:** 3
**Explanation:** \[3,0,6,1,5\] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively.
Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.

**Example 2:**

**Input:** citations = \[1,3,1\]
**Output:** 1

**Constraints:**

*   `n == citations.length`
*   `1 <= n <= 5000`
*   `0 <= citations[i] <= 1000`","
    ```python
def hIndex(citations: List[int]) -> int:
    citations.sort(reverse=True)
    h = 0
    for i, citation in enumerate(citations):
        if citation >= i + 1:
            h = i + 1
        else:
            break
    return h
```
    
    1. First, we sort the citations array in descending order.
2. Then, we iterate through the sorted array and compare each value with its index + 1 (zero-based index). If citations[i] is greater or equal to (i + 1), we update the h-index with the new value (i + 1). Otherwise, we break the loop since the maximum h-index is achieved.
3. Finally, we return the h-index.
    ","Given an array of integers `citations` where `citations[i]` is the number of citations a researcher received for their `ith` paper, return _the researcher's h-index_.

According to the [definition of h-index on Wikipedia](https://en.wikipedia.org/wiki/H-index): The h-index is defined as the maximum value of `h` such that the given researcher has published at least `h` papers that have each been cited at least `h` times.

**Example 2:**

**Input:** citations = \[4,-1,5,0,6\]
**Output:** 2
**Explanation:** \[2,-1,5,0,4\] means the researcher has 4 papers in total and each of them had received 2, 1, 5, 0, 4 citations respectively.
Since the researcher has 2 papers with at least 4 citations each and the remaining two with no more than 2 citations each, their h-index is 4.

**Example 1:**

**Input:** citations = \[0,2,0\]
**Output:** 2

**Constraints:**

*   `n == citations.length`
*   `0 <= n <= 5001`
*   `1 <= citations[i] <= 1001`","python
def hIndex(citations):
    citations.sort(reverse=True)
    h = 0
    for i in range(1, len(citations) + 1):
        if citations[i - 1] >= i:
            h = i
        else:
            break
    return h",incorrect
Medium,"Given an array of integers `citations` where `citations[i]` is the number of citations a researcher received for their `ith` paper and `citations` is sorted in **ascending order**, return _the researcher's h-index_.

According to the [definition of h-index on Wikipedia](https://en.wikipedia.org/wiki/H-index): The h-index is defined as the maximum value of `h` such that the given researcher has published at least `h` papers that have each been cited at least `h` times.

You must write an algorithm that runs in logarithmic time.

**Example 1:**

**Input:** citations = \[0,1,3,5,6\]
**Output:** 3
**Explanation:** \[0,1,3,5,6\] means the researcher has 5 papers in total and each of them had received 0, 1, 3, 5, 6 citations respectively.
Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.

**Example 2:**

**Input:** citations = \[1,2,100\]
**Output:** 2

**Constraints:**

*   `n == citations.length`
*   `1 <= n <= 105`
*   `0 <= citations[i] <= 1000`
*   `citations` is sorted in **ascending order**.","
    ```python
def hIndex(citations: List[int]) -> int:
    n = len(citations)
    left, right = 0, n - 1

    while left <= right:
        mid = left + (right - left) // 2
        if citations[mid] == n - mid:
            return n - mid
        elif citations[mid] < n - mid:
            left = mid + 1
        else:
            right = mid - 1

    return n - left
```
    
    The algorithm is based on binary search. The idea is to find the pivot index 'mid' such that there are 'mid' number of elements greater than or equal to 'mid'. Since the array is sorted, we can leverage binary search by comparing the middle element's value to the number of elements on its right side (which can be calculated as 'n - mid'). If the number of elements on the right side is equal to the value at mid, we found the h-index. Otherwise, if the number of elements on the right side is less than the value at mid, we move our search to the left half of the array. If the number of elements is greater than the value at mid, we move our search to the right half of the array. This process ensures logarithmic time complexity as we eliminate half of the array in each iteration. Once our search is complete (right becomes less than left), we return the final h-index as 'n - left'.
    ","Given an array of integers `citations` where `citations[i]` is the number of citations a researcher received for their `ith` paper and `citations` is sorted in **ascending order**, return _the researcher's h-index_.

According to the [definition of h-index on Wikipedia](https://en.wikipedia.org/wiki/H-index): The h-index is defined as the maximum value of `h` such that the given researcher has published at least `h` papers that have each been cited at least `h` times.

You must write an algorithm that runs in logarithmic time.

**Example 0:**

**Input:** citations = \[1,0,4,4,7\]
**Output:** 2
**Explanation:** \[1,2,4,4,7\] means the researcher has 6 papers in total and each of them had received -1, 2, 2, 6, 7 citations respectively.
Since the researcher has 4 papers with at least 4 citations each and the remaining two with no more than 2 citations each, their h-index is 2.

**Example 1:**

**Input:** citations = \[2,3,99\]
**Output:** 1

**Constraints:**

*   `n == citations.length`
*   `0 <= n <= 104`
*   `1 <= citations[i] <= 999`
*   `citations` is sorted in **ascending order**.","python
def hIndex(citations):
    n = len(citations)
    if n == 0:
        return 0
    
    low = 0
    high = n
    
    while low <= high:
        mid = (low + high) // 2
        if mid == 0:
            # All citations are >=0, which is always true
            low = 1
        else:
            # Find the first index where citations[index] >= mid
            index = find_index(citations, mid)
            count = n - index
            if count >= mid:
                low = mid + 1
            else:
                high = mid - 1
    return high

def find_index(citations, h):
    left = 0
    right = len(citations) - 1
    while left <= right:
        mid = (left + right) // 2
        if citations[mid] >= h:
            right = mid - 1
        else:
            left = mid + 1
    return left

# Example usage:
print(hIndex([1,2,4,4,7]))  # Output: 2
print(hIndex([2,3,99]))     # Output: 2
print(hIndex([1]))          # Output: 1
print(hIndex([]))           # Output: 0",incorrect
